module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "JkW7");
/******/ })
/************************************************************************/
/******/ ({

/***/ "+XMp":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Snackbar = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _get2 = _interopRequireDefault(__webpack_require__("J5U+"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _snackbar = __webpack_require__("DzRl");

var _preact = __webpack_require__("KM04");

var _MaterialComponent2 = _interopRequireDefault(__webpack_require__("uc5p"));

// TODO: Is that needed?
function shallowDiffers(a, b) {
  for (var i in a) {
    if (!(i in b)) {
      return true;
    }
  }

  for (var _i in b) {
    // noinspection JSUnfilteredForInLoop
    if (a[_i] !== b[_i]) {
      return true;
    }
  }

  return false;
}

var Snackbar =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(Snackbar, _MaterialComponent);

  function Snackbar() {
    var _this;

    (0, _classCallCheck2.default)(this, Snackbar);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Snackbar).apply(this, arguments));
    _this.componentName = 'snackbar';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(Snackbar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Snackbar.prototype), "componentDidMount", this).call(this);

      if (this.control) {
        this.MDComponent = new _snackbar.MDCSnackbar(this.control);

        if (this.props.dismissesOnAction === undefined || this.props.dismissesOnAction === null) {
          this.MDComponent.dismissesOnAction = true;
        } else {
          this.MDComponent.dismissesOnAction = this.props.dismissesOnAction;
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Snackbar.prototype), "componentWillUnmount", this).call(this);

      if (this.MDComponent) {
        this.MDComponent.destroy();
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(props, state) {
      return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);
    }
  }, {
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("div", _extends({
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-hidden": "true",
        ref: this.setControlRef
      }, props), (0, _preact.h)("div", {
        className: "mdc-snackbar__text"
      }), (0, _preact.h)("div", {
        className: "mdc-snackbar__action-wrapper"
      }, (0, _preact.h)("button", {
        type: "button",
        className: "mdc-snackbar__action-button"
      })));
    }
  }]);
  return Snackbar;
}(_MaterialComponent2.default);

exports.Snackbar = Snackbar;
var _default = Snackbar;
exports.default = _default;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "/QC5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribers", function() { return subscribers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentUrl", function() { return getCurrentUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "route", function() { return route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return Router; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return Route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return Link; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact__ = __webpack_require__("KM04");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_preact___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_preact__);


var EMPTY$1 = {};

function assign(obj, props) {
	// eslint-disable-next-line guard-for-in
	for (var i in props) {
		obj[i] = props[i];
	}
	return obj;
}

function exec(url, route, opts) {
	var reg = /(?:\?([^#]*))?(#.*)?$/,
	    c = url.match(reg),
	    matches = {},
	    ret;
	if (c && c[1]) {
		var p = c[1].split('&');
		for (var i = 0; i < p.length; i++) {
			var r = p[i].split('=');
			matches[decodeURIComponent(r[0])] = decodeURIComponent(r.slice(1).join('='));
		}
	}
	url = segmentize(url.replace(reg, ''));
	route = segmentize(route || '');
	var max = Math.max(url.length, route.length);
	for (var i$1 = 0; i$1 < max; i$1++) {
		if (route[i$1] && route[i$1].charAt(0) === ':') {
			var param = route[i$1].replace(/(^\:|[+*?]+$)/g, ''),
			    flags = (route[i$1].match(/[+*?]+$/) || EMPTY$1)[0] || '',
			    plus = ~flags.indexOf('+'),
			    star = ~flags.indexOf('*'),
			    val = url[i$1] || '';
			if (!val && !star && (flags.indexOf('?') < 0 || plus)) {
				ret = false;
				break;
			}
			matches[param] = decodeURIComponent(val);
			if (plus || star) {
				matches[param] = url.slice(i$1).map(decodeURIComponent).join('/');
				break;
			}
		} else if (route[i$1] !== url[i$1]) {
			ret = false;
			break;
		}
	}
	if (opts.default !== true && ret === false) {
		return false;
	}
	return matches;
}

function pathRankSort(a, b) {
	return a.rank < b.rank ? 1 : a.rank > b.rank ? -1 : a.index - b.index;
}

// filter out VNodes without attributes (which are unrankeable), and add `index`/`rank` properties to be used in sorting.
function prepareVNodeForRanking(vnode, index) {
	vnode.index = index;
	vnode.rank = rankChild(vnode);
	return vnode.attributes;
}

function segmentize(url) {
	return url.replace(/(^\/+|\/+$)/g, '').split('/');
}

function rankSegment(segment) {
	return segment.charAt(0) == ':' ? 1 + '*+?'.indexOf(segment.charAt(segment.length - 1)) || 4 : 5;
}

function rank(path) {
	return segmentize(path).map(rankSegment).join('');
}

function rankChild(vnode) {
	return vnode.attributes.default ? 0 : rank(vnode.attributes.path);
}

var customHistory = null;

var ROUTERS = [];

var subscribers = [];

var EMPTY = {};

function isPreactElement(node) {
	return node.__preactattr_ != null || typeof Symbol !== 'undefined' && node[Symbol.for('preactattr')] != null;
}

function setUrl(url, type) {
	if (type === void 0) type = 'push';

	if (customHistory && customHistory[type]) {
		customHistory[type](url);
	} else if (typeof history !== 'undefined' && history[type + 'State']) {
		history[type + 'State'](null, null, url);
	}
}

function getCurrentUrl() {
	var url;
	if (customHistory && customHistory.location) {
		url = customHistory.location;
	} else if (customHistory && customHistory.getCurrentLocation) {
		url = customHistory.getCurrentLocation();
	} else {
		url = typeof location !== 'undefined' ? location : EMPTY;
	}
	return "" + (url.pathname || '') + (url.search || '');
}

function route(url, replace) {
	if (replace === void 0) replace = false;

	if (typeof url !== 'string' && url.url) {
		replace = url.replace;
		url = url.url;
	}

	// only push URL into history if we can handle it
	if (canRoute(url)) {
		setUrl(url, replace ? 'replace' : 'push');
	}

	return routeTo(url);
}

/** Check if the given URL can be handled by any router instances. */
function canRoute(url) {
	for (var i = ROUTERS.length; i--;) {
		if (ROUTERS[i].canRoute(url)) {
			return true;
		}
	}
	return false;
}

/** Tell all router instances to handle the given URL.  */
function routeTo(url) {
	var didRoute = false;
	for (var i = 0; i < ROUTERS.length; i++) {
		if (ROUTERS[i].routeTo(url) === true) {
			didRoute = true;
		}
	}
	for (var i$1 = subscribers.length; i$1--;) {
		subscribers[i$1](url);
	}
	return didRoute;
}

function routeFromLink(node) {
	// only valid elements
	if (!node || !node.getAttribute) {
		return;
	}

	var href = node.getAttribute('href'),
	    target = node.getAttribute('target');

	// ignore links with targets and non-path URLs
	if (!href || !href.match(/^\//g) || target && !target.match(/^_?self$/i)) {
		return;
	}

	// attempt to route, if no match simply cede control to browser
	return route(href);
}

function handleLinkClick(e) {
	if (e.button == 0) {
		routeFromLink(e.currentTarget || e.target || this);
		return prevent(e);
	}
}

function prevent(e) {
	if (e) {
		if (e.stopImmediatePropagation) {
			e.stopImmediatePropagation();
		}
		if (e.stopPropagation) {
			e.stopPropagation();
		}
		e.preventDefault();
	}
	return false;
}

function delegateLinkHandler(e) {
	// ignore events the browser takes care of already:
	if (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || e.button !== 0) {
		return;
	}

	var t = e.target;
	do {
		if (String(t.nodeName).toUpperCase() === 'A' && t.getAttribute('href') && isPreactElement(t)) {
			if (t.hasAttribute('native')) {
				return;
			}
			// if link is handled by the router, prevent browser defaults
			if (routeFromLink(t)) {
				return prevent(e);
			}
		}
	} while (t = t.parentNode);
}

var eventListenersInitialized = false;

function initEventListeners() {
	if (eventListenersInitialized) {
		return;
	}

	if (typeof addEventListener === 'function') {
		if (!customHistory) {
			addEventListener('popstate', function () {
				routeTo(getCurrentUrl());
			});
		}
		addEventListener('click', delegateLinkHandler);
	}
	eventListenersInitialized = true;
}

var Router = function (Component$$1) {
	function Router(props) {
		Component$$1.call(this, props);
		if (props.history) {
			customHistory = props.history;
		}

		this.state = {
			url: props.url || getCurrentUrl()
		};

		initEventListeners();
	}

	if (Component$$1) Router.__proto__ = Component$$1;
	Router.prototype = Object.create(Component$$1 && Component$$1.prototype);
	Router.prototype.constructor = Router;

	Router.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {
		if (props.static !== true) {
			return true;
		}
		return props.url !== this.props.url || props.onChange !== this.props.onChange;
	};

	/** Check if the given URL can be matched against any children */
	Router.prototype.canRoute = function canRoute(url) {
		return this.getMatchingChildren(this.props.children, url, false).length > 0;
	};

	/** Re-render children with a new URL to match against. */
	Router.prototype.routeTo = function routeTo(url) {
		this._didRoute = false;
		this.setState({ url: url });

		// if we're in the middle of an update, don't synchronously re-route.
		if (this.updating) {
			return this.canRoute(url);
		}

		this.forceUpdate();
		return this._didRoute;
	};

	Router.prototype.componentWillMount = function componentWillMount() {
		ROUTERS.push(this);
		this.updating = true;
	};

	Router.prototype.componentDidMount = function componentDidMount() {
		var this$1 = this;

		if (customHistory) {
			this.unlisten = customHistory.listen(function (location) {
				this$1.routeTo("" + (location.pathname || '') + (location.search || ''));
			});
		}
		this.updating = false;
	};

	Router.prototype.componentWillUnmount = function componentWillUnmount() {
		if (typeof this.unlisten === 'function') {
			this.unlisten();
		}
		ROUTERS.splice(ROUTERS.indexOf(this), 1);
	};

	Router.prototype.componentWillUpdate = function componentWillUpdate() {
		this.updating = true;
	};

	Router.prototype.componentDidUpdate = function componentDidUpdate() {
		this.updating = false;
	};

	Router.prototype.getMatchingChildren = function getMatchingChildren(children, url, invoke) {
		return children.filter(prepareVNodeForRanking).sort(pathRankSort).map(function (vnode) {
			var matches = exec(url, vnode.attributes.path, vnode.attributes);
			if (matches) {
				if (invoke !== false) {
					var newProps = { url: url, matches: matches };
					assign(newProps, matches);
					delete newProps.ref;
					delete newProps.key;
					return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["cloneElement"])(vnode, newProps);
				}
				return vnode;
			}
		}).filter(Boolean);
	};

	Router.prototype.render = function render(ref, ref$1) {
		var children = ref.children;
		var onChange = ref.onChange;
		var url = ref$1.url;

		var active = this.getMatchingChildren(children, url, true);

		var current = active[0] || null;
		this._didRoute = !!current;

		var previous = this.previousUrl;
		if (url !== previous) {
			this.previousUrl = url;
			if (typeof onChange === 'function') {
				onChange({
					router: this,
					url: url,
					previous: previous,
					active: active,
					current: current
				});
			}
		}

		return current;
	};

	return Router;
}(__WEBPACK_IMPORTED_MODULE_0_preact__["Component"]);

var Link = function Link(props) {
	return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])('a', assign({ onClick: handleLinkClick }, props));
};

var Route = function Route(props) {
	return Object(__WEBPACK_IMPORTED_MODULE_0_preact__["h"])(props.component, props);
};

Router.subscribers = subscribers;
Router.getCurrentUrl = getCurrentUrl;
Router.route = route;
Router.Router = Router;
Router.Route = Route;
Router.Link = Link;

/* harmony default export */ __webpack_exports__["default"] = (Router);
//# sourceMappingURL=preact-router.es.js.map

/***/ }),

/***/ "/aYh":
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__("UJE0");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;

/***/ }),

/***/ "0421":
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__("b9XL");

var assertThisInitialized = __webpack_require__("E7HD");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "0fcM":
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "2n+x":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"hero":"hero__3FWBs","heroText":"heroText___ONUV","heroShape":"heroShape__3Pdce","registrationShape":"registrationShape__L5nn3","registrationShapeMobile":"registrationShapeMobile__jRg_3","ticket_btn":"ticket_btn__1yK3f","registered":"registered__3sn6f","ticket_types":"ticket_types__EQXca","ticket_types_container":"ticket_types_container__14S7b","ticket_type":"ticket_type__hj9Gx","ticket_content":"ticket_content__1rvvR","ticket_title":"ticket_title__3xwlV","ticket_body":"ticket_body__hOsGX","ticker_icon":"ticker_icon__3KRyY","general":"general__3sjt6","community":"community__3waMT","academic":"academic__5ZbB7"};

/***/ }),

/***/ "5sRW":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var util_namespaceObject = {};
__webpack_require__.d(util_namespaceObject, "createFocusTrapInstance", function() { return createFocusTrapInstance; });

// EXTERNAL MODULE: ../node_modules/@material/base/index.js
var base = __webpack_require__("dSNL");

// EXTERNAL MODULE: ../node_modules/@material/ripple/index.js + 4 modules
var ripple = __webpack_require__("vkNc");

// CONCATENATED MODULE: ../node_modules/@material/dialog/constants.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var cssClasses = {
  ROOT: 'mdc-dialog',
  OPEN: 'mdc-dialog--open',
  ANIMATING: 'mdc-dialog--animating',
  BACKDROP: 'mdc-dialog__backdrop',
  SCROLL_LOCK: 'mdc-dialog-scroll-lock',
  ACCEPT_BTN: 'mdc-dialog__footer__button--accept',
  CANCEL_BTN: 'mdc-dialog__footer__button--cancel'
};

var strings = {
  OPEN_DIALOG_SELECTOR: '.mdc-dialog--open',
  DIALOG_SURFACE_SELECTOR: '.mdc-dialog__surface',
  ACCEPT_SELECTOR: '.mdc-dialog__footer__button--accept',
  ACCEPT_EVENT: 'MDCDialog:accept',
  CANCEL_EVENT: 'MDCDialog:cancel'
};

var numbers = {
  DIALOG_ANIMATION_TIME_MS: 120
};


// CONCATENATED MODULE: ../node_modules/@material/dialog/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */




var foundation_MDCDialogFoundation = function (_MDCFoundation) {
  _inherits(MDCDialogFoundation, _MDCFoundation);

  _createClass(MDCDialogFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        addBodyClass: function addBodyClass() /* className: string */{},
        removeBodyClass: function removeBodyClass() /* className: string */{},
        eventTargetHasClass: function eventTargetHasClass() {
          return (/* target: EventTarget, className: string */ /* boolean */false
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evt: string, handler: EventListener */{},
        registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler() /* handler: EventListener */{},
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() /* handler: EventListener */{},
        notifyAccept: function notifyAccept() {},
        notifyCancel: function notifyCancel() {},
        trapFocusOnSurface: function trapFocusOnSurface() {},
        untrapFocusOnSurface: function untrapFocusOnSurface() {},
        isDialog: function isDialog() {
          return (/* el: Element */ /* boolean */false
          );
        }
      };
    }
  }]);

  function MDCDialogFoundation(adapter) {
    _classCallCheck(this, MDCDialogFoundation);

    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCDialogFoundation.defaultAdapter, adapter)));

    _this.isOpen_ = false;
    _this.componentClickHandler_ = function (evt) {
      if (_this.adapter_.eventTargetHasClass(evt.target, cssClasses.BACKDROP)) {
        _this.cancel(true);
      }
    };
    _this.dialogClickHandler_ = function (evt) {
      return _this.handleDialogClick_(evt);
    };
    _this.documentKeydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        _this.cancel(true);
      }
    };

    _this.timerId_ = 0;
    _this.animationTimerEnd_ = function (evt) {
      return _this.handleAnimationTimerEnd_(evt);
    };
    return _this;
  }

  MDCDialogFoundation.prototype.destroy = function destroy() {
    // Ensure that dialog is cleaned up when destroyed
    if (this.isOpen_) {
      this.close();
    }
    // Final cleanup of animating class in case the timer has not completed.
    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
    clearTimeout(this.timerId_);
  };

  MDCDialogFoundation.prototype.open = function open() {
    this.isOpen_ = true;
    this.disableScroll_();
    this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.registerSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
    clearTimeout(this.timerId_);
    this.timerId_ = setTimeout(this.animationTimerEnd_, MDCDialogFoundation.numbers.DIALOG_ANIMATION_TIME_MS);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.OPEN);
  };

  MDCDialogFoundation.prototype.close = function close() {
    this.isOpen_ = false;
    this.enableScroll_();
    this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
    this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
    this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
    this.adapter_.untrapFocusOnSurface();
    clearTimeout(this.timerId_);
    this.timerId_ = setTimeout(this.animationTimerEnd_, MDCDialogFoundation.numbers.DIALOG_ANIMATION_TIME_MS);
    this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
  };

  MDCDialogFoundation.prototype.isOpen = function isOpen() {
    return this.isOpen_;
  };

  MDCDialogFoundation.prototype.accept = function accept(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyAccept();
    }

    this.close();
  };

  MDCDialogFoundation.prototype.cancel = function cancel(shouldNotify) {
    if (shouldNotify) {
      this.adapter_.notifyCancel();
    }

    this.close();
  };

  MDCDialogFoundation.prototype.handleDialogClick_ = function handleDialogClick_(evt) {
    var target = evt.target;

    if (this.adapter_.eventTargetHasClass(target, cssClasses.ACCEPT_BTN)) {
      this.accept(true);
    } else if (this.adapter_.eventTargetHasClass(target, cssClasses.CANCEL_BTN)) {
      this.cancel(true);
    }
  };

  MDCDialogFoundation.prototype.handleAnimationTimerEnd_ = function handleAnimationTimerEnd_() {
    this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
    if (this.isOpen_) {
      this.adapter_.trapFocusOnSurface();
    }
  };

  MDCDialogFoundation.prototype.disableScroll_ = function disableScroll_() {
    this.adapter_.addBodyClass(cssClasses.SCROLL_LOCK);
  };

  MDCDialogFoundation.prototype.enableScroll_ = function enableScroll_() {
    this.adapter_.removeBodyClass(cssClasses.SCROLL_LOCK);
  };

  return MDCDialogFoundation;
}(base["b" /* MDCFoundation */]);


// EXTERNAL MODULE: ../node_modules/focus-trap/index.js
var focus_trap = __webpack_require__("ySUw");
var focus_trap_default = /*#__PURE__*/__webpack_require__.n(focus_trap);

// CONCATENATED MODULE: ../node_modules/@material/dialog/util.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



function createFocusTrapInstance(surfaceEl, acceptButtonEl) {
  var focusTrapFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : focus_trap_default.a;

  return focusTrapFactory(surfaceEl, {
    initialFocus: acceptButtonEl,
    clickOutsideDeactivates: true
  });
}
// CONCATENATED MODULE: ../node_modules/@material/dialog/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCDialog", function() { return dialog_MDCDialog; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCDialogFoundation", function() { return foundation_MDCDialogFoundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "util", function() { return util_namespaceObject; });
var dialog__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function dialog__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dialog__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function dialog__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */










var dialog_MDCDialog = function (_MDCComponent) {
  dialog__inherits(MDCDialog, _MDCComponent);

  function MDCDialog() {
    dialog__classCallCheck(this, MDCDialog);

    return dialog__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCDialog.attachTo = function attachTo(root) {
    return new MDCDialog(root);
  };

  MDCDialog.prototype.initialize = function initialize() {
    this.focusTrap_ = createFocusTrapInstance(this.dialogSurface_, this.acceptButton_);
    this.footerBtnRipples_ = [];

    var footerBtns = this.root_.querySelectorAll('.mdc-dialog__footer__button');
    for (var i = 0, footerBtn; footerBtn = footerBtns[i]; i++) {
      this.footerBtnRipples_.push(new ripple["MDCRipple"](footerBtn));
    }
  };

  MDCDialog.prototype.destroy = function destroy() {
    this.footerBtnRipples_.forEach(function (ripple) {
      return ripple.destroy();
    });
    _MDCComponent.prototype.destroy.call(this);
  };

  MDCDialog.prototype.show = function show() {
    this.foundation_.open();
  };

  MDCDialog.prototype.close = function close() {
    this.foundation_.close();
  };

  MDCDialog.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new foundation_MDCDialogFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      addBodyClass: function addBodyClass(className) {
        return document.body.classList.add(className);
      },
      removeBodyClass: function removeBodyClass(className) {
        return document.body.classList.remove(className);
      },
      eventTargetHasClass: function eventTargetHasClass(target, className) {
        return target.classList.contains(className);
      },
      registerInteractionHandler: function registerInteractionHandler(evt, handler) {
        return _this2.root_.addEventListener(evt, handler);
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
        return _this2.root_.removeEventListener(evt, handler);
      },
      registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler(evt, handler) {
        return _this2.dialogSurface_.addEventListener(evt, handler);
      },
      deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler(evt, handler) {
        return _this2.dialogSurface_.removeEventListener(evt, handler);
      },
      registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
        return document.addEventListener('keydown', handler);
      },
      deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
        return document.removeEventListener('keydown', handler);
      },
      notifyAccept: function notifyAccept() {
        return _this2.emit(foundation_MDCDialogFoundation.strings.ACCEPT_EVENT);
      },
      notifyCancel: function notifyCancel() {
        return _this2.emit(foundation_MDCDialogFoundation.strings.CANCEL_EVENT);
      },
      trapFocusOnSurface: function trapFocusOnSurface() {
        return _this2.focusTrap_.activate();
      },
      untrapFocusOnSurface: function untrapFocusOnSurface() {
        return _this2.focusTrap_.deactivate();
      },
      isDialog: function isDialog(el) {
        return el === _this2.dialogSurface_;
      }
    });
  };

  dialog__createClass(MDCDialog, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    }
  }, {
    key: 'acceptButton_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCDialogFoundation.strings.ACCEPT_SELECTOR);
    }
  }, {
    key: 'dialogSurface_',
    get: function get() {
      return this.root_.querySelector(foundation_MDCDialogFoundation.strings.DIALOG_SURFACE_SELECTOR);
    }
  }]);

  return MDCDialog;
}(base["a" /* MDCComponent */]);

/***/ }),

/***/ "7/cg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = exports.ButtonIcon = void 0;

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _preact = __webpack_require__("KM04");

var _MaterialComponent2 = _interopRequireDefault(__webpack_require__("uc5p"));

var _Icon2 = _interopRequireDefault(__webpack_require__("MeGi"));

var _generateThemeClass = _interopRequireDefault(__webpack_require__("QTRl"));

var ButtonIcon =
/*#__PURE__*/
function (_Icon) {
  (0, _inherits2.default)(ButtonIcon, _Icon);

  function ButtonIcon() {
    var _this;

    (0, _classCallCheck2.default)(this, ButtonIcon);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ButtonIcon).apply(this, arguments));
    _this.componentName = 'button__icon';
    return _this;
  }

  return ButtonIcon;
}(_Icon2.default);

exports.ButtonIcon = ButtonIcon;

var Button =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(Button, _MaterialComponent);

  function Button() {
    var _this2;

    (0, _classCallCheck2.default)(this, Button);
    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Button).apply(this, arguments));
    _this2.componentName = 'button';
    _this2.mdcProps = ['dense', 'raised', 'unelevated', 'outlined'];
    _this2.themeProps = ['primary', 'secondary'];
    return _this2;
  }

  (0, _createClass2.default)(Button, [{
    key: "materialDom",
    value: function materialDom(props) {
      var ButtonElement = props.href ? 'a' : 'button';
      var className = '';
      this.themeProps.forEach(function (themeProp) {
        if (themeProp in props && props[themeProp] !== false) {
          className += (0, _generateThemeClass.default)(themeProp) + ' ';
        }
      });
      return (0, _preact.h)(ButtonElement, _extends({
        ref: this.setControlRef
      }, props, {
        className: className
      }), this.props.children);
    }
  }]);
  return Button;
}(_MaterialComponent2.default);

exports.Button = Button;

var default_1 =
/*#__PURE__*/
function (_Button) {
  (0, _inherits2.default)(default_1, _Button);

  function default_1() {
    (0, _classCallCheck2.default)(this, default_1);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(default_1).apply(this, arguments));
  }

  return default_1;
}(Button);

exports.default = default_1;
default_1.Icon = ButtonIcon;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "7LhK":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"social_footer":"social_footer__Onedb","social_body":"social_body__1kBPM","social_gif":"social_gif__-O59R"};

/***/ }),

/***/ "9HV9":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"ticket_icon":"ticket_icon__2VcjN","fill_color":"fill_color__bh7Dy"};

/***/ }),

/***/ "AkAO":
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "B1iE":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */;(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined;/** Used as the semantic version number. */var VERSION='4.17.11';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading and trailing whitespace. */var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange='\\ud800-\\udfff',rsComboMarksRange='\\u0300-\\u036f',reComboHalfMarksRange='\\ufe20-\\ufe2f',rsComboSymbolsRange='\\u20d0-\\u20ff',rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange='\\u2700-\\u27bf',rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange='\\u2000-\\u206f',rsSpaceRange=' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange='\\ufe0e\\ufe0f',rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos='[\'\u2019]',rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz='\\ud83c[\\udffb-\\udfff]',rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',rsUpper='['+rsUpperRange+']',rsZWJ='\\u200d';/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
'\u0100':'A','\u0102':'A','\u0104':'A','\u0101':'a','\u0103':'a','\u0105':'a','\u0106':'C','\u0108':'C','\u010A':'C','\u010C':'C','\u0107':'c','\u0109':'c','\u010B':'c','\u010D':'c','\u010E':'D','\u0110':'D','\u010F':'d','\u0111':'d','\u0112':'E','\u0114':'E','\u0116':'E','\u0118':'E','\u011A':'E','\u0113':'e','\u0115':'e','\u0117':'e','\u0119':'e','\u011B':'e','\u011C':'G','\u011E':'G','\u0120':'G','\u0122':'G','\u011D':'g','\u011F':'g','\u0121':'g','\u0123':'g','\u0124':'H','\u0126':'H','\u0125':'h','\u0127':'h','\u0128':'I','\u012A':'I','\u012C':'I','\u012E':'I','\u0130':'I','\u0129':'i','\u012B':'i','\u012D':'i','\u012F':'i','\u0131':'i','\u0134':'J','\u0135':'j','\u0136':'K','\u0137':'k','\u0138':'k','\u0139':'L','\u013B':'L','\u013D':'L','\u013F':'L','\u0141':'L','\u013A':'l','\u013C':'l','\u013E':'l','\u0140':'l','\u0142':'l','\u0143':'N','\u0145':'N','\u0147':'N','\u014A':'N','\u0144':'n','\u0146':'n','\u0148':'n','\u014B':'n','\u014C':'O','\u014E':'O','\u0150':'O','\u014D':'o','\u014F':'o','\u0151':'o','\u0154':'R','\u0156':'R','\u0158':'R','\u0155':'r','\u0157':'r','\u0159':'r','\u015A':'S','\u015C':'S','\u015E':'S','\u0160':'S','\u015B':'s','\u015D':'s','\u015F':'s','\u0161':'s','\u0162':'T','\u0164':'T','\u0166':'T','\u0163':'t','\u0165':'t','\u0167':'t','\u0168':'U','\u016A':'U','\u016C':'U','\u016E':'U','\u0170':'U','\u0172':'U','\u0169':'u','\u016B':'u','\u016D':'u','\u016F':'u','\u0171':'u','\u0173':'u','\u0174':'W','\u0175':'w','\u0176':'Y','\u0177':'y','\u0178':'Y','\u0179':'Z','\u017B':'Z','\u017D':'Z','\u017A':'z','\u017C':'z','\u017E':'z','\u0132':'IJ','\u0133':'ij','\u0152':'Oe','\u0153':'oe','\u0149':"'n",'\u017F':'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r','\u2028':'u2028','\u2029':'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*//**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludes(array,value){var length=array==null?0:array.length;return!!length&&baseIndexOf(array,value,0)>-1;}/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */var asciiSize=baseProperty('length');/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function asciiToArray(string){return string.split('');}/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return-1;}/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return-1;}/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */function baseIsNaN(value){return value!==value;}/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */function baseProperty(key){return function(object){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */function basePropertyOf(object){return function(key){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined){result=result===undefined?current:result+current;}}return result;}/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */function baseToPairs(object,props){return arrayMap(props,function(key){return[key,object[key]];});}/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */function baseUnary(func){return function(value){return func(value);};}/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */function cacheHas(cache,key){return cache.has(key);}/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */var deburrLetter=basePropertyOf(deburredLetters);/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */function escapeStringChar(chr){return'\\'+stringEscapes[chr];}/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */function getValue(object,key){return object==null?undefined:object[key];}/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */function hasUnicode(string){return reHasUnicode.test(string);}/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return-1;}/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*//**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined,Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=Symbol?Symbol.isConcatSpreadable:undefined,symIterator=Symbol?Symbol.iterator:undefined,symToStringTag=Symbol?Symbol.toStringTag:undefined;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/*------------------------------------------------------------------------*//**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return{};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined;return result;};}();/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */function baseLodash(){}// No operation performed.
/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined;}/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */lodash.templateSettings={/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'escape':reEscape,/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'evaluate':reEvaluate,/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'interpolate':reInterpolate,/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */'variable':'',/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */'imports':{/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*//**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else{result=this.clone();result.__dir__*=-1;}return result;}/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else{break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*//**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*//**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */function listCacheClear(){this.__data__=[];this.size=0;}/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*//**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*//**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*//**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function stackGet(key){return this.__data__.get(key);}/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function stackHas(key){return this.__data__.has(key);}/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*//**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined;}/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignMergeValue(object,key,value){if(value!==undefined&&!eq(object[key],value)||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{object[key]=value;}}/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined:get(object,paths[index]);}return result;}/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});return result;}if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return!length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined&&!(key in object)||!predicate(value)){return false;}}return true;}/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEach=createBaseEach(baseForOwn);/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);}else{arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseFor=createBaseFor();/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseForRight=createBaseFor(true);/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined;}/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */function baseGt(value,other){return value>other;}/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined:apply(func,object,args);}/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return!length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined&&!(key in object)){return false;}}else{var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
if(typeof value=='function'){return value;}if(value==null){return identity;}if(typeof value=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */function baseLt(value,other){return value<other;}/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){if(isObject(srcValue)){stack||(stack=new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined;if(newValue===undefined){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined;var isCommon=newValue===undefined;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else{newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||isFunction(objValue)){newValue=initCloneObject(srcValue);}}else{isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined;}/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */function baseOrderBy(collection,iteratees,orders){var index=-1;iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return{'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else{baseUnset(array,index);}}}return array;}/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */function baseSample(collection){return arraySample(values(collection));}/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined;if(newValue===undefined){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return!result;});return!!result;}/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else{high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndexBy(array,value,iteratee,retHighest){value=iteratee(value);var low=0,high=array==null?0:array.length,valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else{setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else{high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return+value;}/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else{seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined;assignFunc(result,props[index],value);}return result;}/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */function castFunction(value){return typeof value=='function'?value:identity;}/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */var castRest=baseRest;/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */function castSlice(array,start,end){var length=array.length;end=end===undefined?length:end;return!start&&end>=length?array:baseSlice(array,start,end);}/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return-1;}}return 0;}/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
// that causes it, under certain circumstances, to provide the same value for
// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
// for more details.
//
// This also ensures a stable sort in V8 and other engines.
// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
return object.index-other.index;}/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;if(newValue===undefined){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else{assignValue(object,key,newValue);}}return object;}/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined,guard=length>2?sources[2]:undefined;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
// for more details.
var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
// See https://es5.github.io/#x13.2.2 for more details.
return isObject(result)?result:thisBinding;};}/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined,args,holders,undefined,undefined,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined;};}/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else{wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined&&other===undefined){return defaultValue;}if(value!==undefined){result=value;}if(other!==undefined){if(result===undefined){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else{value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */function createPadding(length,chars){chars=chars===undefined?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined;}// Ensure the sign of `-0` is preserved.
start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}step=step===undefined?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision){// Shift with exponential notation to avoid floating-point issues.
// See [MDN](https://mdn.io/round#Examples) for more details.
var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return+(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined;}ary=ary===undefined?ary:nativeMax(toInteger(ary),0);arity=arity===undefined?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined;}var data=isBindKey?undefined:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else{result=createHybrid.apply(undefined,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */function customOmitClone(value){return isPlainObject(value)?undefined:value;}/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.
var stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
if(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */function flatRest(func){return setToString(overRest(func,undefined,flatten),func+'');}/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return{'start':start,'end':end};}/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return!!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */function isIndex(value,length){var type=typeof value;length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index;if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */function isKey(value,object){if(isArray(value)){return false;}var type=typeof value;if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */function isKeyable(value){var type=typeof value;return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return!!data&&func===data[0];}/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */var isMaskable=coreJsData?isFunction:stubFalse;/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */function isStrictComparable(value){return value===value&&!isObject(value);}/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined||key in Object(object));};}/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
data[0]=source[0];data[1]=newBitmask;return data;}/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */function objectToString(value){return nativeObjectToString.call(value);}/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */function overRest(func,start,transform){start=nativeMax(start===undefined?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}/**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */function safeGet(object,key){if(key=='__proto__'){return;}return object[key];}/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var setData=shortOut(baseSetData);/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var setToString=shortOut(baseSetToString);/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else{count=0;}return func.apply(undefined,arguments);};}/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*//**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined){size=1;}else{size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return[];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */function concat(){var length=arguments.length;if(!length){return[];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator):[];});/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return[];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length-1;if(fromIndex!==undefined){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return[];}depth=depth===undefined?1:toInteger(depth);return baseFlatten(array,depth);}/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */function head(array){return array&&array.length?array[0]:undefined;}/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined;}else{mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined,comparator):[];});/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined;}/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length;if(fromIndex!==undefined){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined;}/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */var pull=baseRest(pullAll);/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined,comparator):array;}/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return[];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else{start=start==null?0:toInteger(start);end=end===undefined?length:toInteger(end);}return baseSlice(array,start,end);}/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */function take(array,n,guard){if(!(array&&array.length)){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);});/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined;return array&&array.length?baseUniq(array,undefined,comparator):[];}/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */function unzip(array){if(!(array&&array.length)){return[];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */function unzipWith(array,iteratee){if(!(array&&array.length)){return[];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});/**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */var zip=baseRest(unzip);/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*//**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */function tap(value,interceptor){interceptor(value);return value;}/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */function thru(value,interceptor){return interceptor(value);}/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined);}return array;});});/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */function wrapperChain(){return chain(this);}/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */function wrapperNext(){if(this.__values__===undefined){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return{'done':done,'value':value};}/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */function wrapperToIterator(){return this;}/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined;if(result){previous.__wrapped__=clone;}else{result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*//**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else{baseAssignValue(result,key,1);}});/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */var find=createFind(findIndex);/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */var findLast=createFind(findLastIndex);/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else{baseAssignValue(result,key,[value]);}});/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */function orderBy(collection,iteratees,orders,guard){if(collection==null){return[];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return[[],[]];});/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined){n=1;}else{n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return[];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*//**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*//**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */function ary(func,n,guard){n=guard?undefined:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);}/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined;}return result;};}/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */function curry(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curry.placeholder;return result;}/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */function curryRight(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curryRight.placeholder;return result;}/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
memoize.Cache=MapCache;/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return!predicate.call(this);case 1:return!predicate.call(this,args[0]);case 2:return!predicate.call(this,args[0],args[1]);case 3:return!predicate.call(this,args[0],args[1],args[2]);}return!predicate.apply(this,args);};}/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */function once(func){return before(2,func);}/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);});/**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);});/**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);});/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined?start:toInteger(start);return baseRest(func,start);}/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */function unary(func){return ary(func,1);}/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*//**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */function castArray(){if(!arguments.length){return[];}var value=arguments[0];return isArray(value)?value:[value];}/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */function eq(value,other){return value===other||value!==value&&other!==other;}/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */var gt=createRelationalOperation(baseGt);/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */var isArray=Array.isArray;/**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */var isBuffer=nativeIsBuffer||stubFalse;/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return!value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return!value.size;}if(isPrototype(value)){return!baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */function isEqual(value,other){return baseIsEqual(value,other);}/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result===undefined?baseIsEqual(value,other,undefined,customizer):!!result;}/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */function isObjectLike(value){return value!=null&&typeof value=='object';}/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
// Perform the `toStringTag` check first to avoid errors with some
// ActiveX objects in IE.
return isNumber(value)&&value!=+value;}/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */function isNull(value){return value===null;}/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */function isNil(value){return value==null;}/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */function isUndefined(value){return value===undefined;}/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */var lt=createRelationalOperation(baseLt);/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */function toArray(value){if(!value){return[];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*//**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */var at=flatRest(baseAt);/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */var defaultsDeep=baseRest(function(args){args.push(undefined,customDefaultsMerge);return apply(mergeWith,undefined,args);});/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */function get(object,path,defaultValue){var result=object==null?undefined:baseGet(object,path);return result===undefined?defaultValue:result;}/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else{result[value]=[key];}},getIteratee);/**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */var invoke=baseRest(baseInvoke);/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */function pickBy(object,predicate){if(object==null){return{};}var props=arrayMap(getAllKeysIn(object),function(prop){return[prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
if(!length){length=1;object=undefined;}while(++index<length){var value=object==null?undefined:object[toKey(path[index])];if(value===undefined){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseSet(object,path,value,customizer);}/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */var toPairs=createToPairs(keys);/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */var toPairsIn=createToPairs(keysIn);/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else{accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*//**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */function inRange(number,start,end){start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined;}if(floating===undefined){if(typeof upper=='boolean'){floating=upper;upper=undefined;}else if(typeof lower=='boolean'){floating=lower;lower=undefined;}}if(lower===undefined&&upper===undefined){lower=0;upper=1;}else{lower=toFinite(lower);if(upper===undefined){upper=lower;lower=0;}else{upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*//**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */var lowerFirst=createCaseFirst('toLowerCase');/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined){n=1;}else{n=toInteger(n);}return baseRepeat(toString(string),n);}/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined;}limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return[];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
// (http://ejohn.org/blog/javascript-micro-templating/)
// and Laura Doktorova's doT.js (https://github.com/olado/doT).
var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
var sourceURL='//# sourceURL='+('sourceURL'in options?options.sourceURL:'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
// order to produce the correct `offset` value.
return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
// code to add the data object to the top of the scope chain.
var variable=options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Cleanup code by stripping empty strings.
source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined,importsValues);});// Provide the compiled function's source by its `toString` method or
// the `source` property as a convenience for inlining compiled templates.
result.source=source;if(isError(result)){throw result;}return result;}/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */function toLower(value){return toString(value).toLowerCase();}/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */function toUpper(value){return toString(value).toUpperCase();}/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrim,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimEnd,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */var upperFirst=createCaseFirst('toUpperCase');/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined:pattern;if(pattern===undefined){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*//**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */var attempt=baseRest(function(func,args){try{return apply(func,undefined,args);}catch(e){return isError(e)?e:new Error(e);}});/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return[toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */function constant(value){return function(){return value;};}/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */var flow=createFlow();/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */var flowRight=createFlow(true);/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */function identity(value){return value;}/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */function noop(){}// No operation performed.
/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */var over=createOver(arrayMap);/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */var overEvery=createOver(arrayEvery);/**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */var overSome=createOver(arraySome);/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */function propertyOf(object){return function(path){return object==null?undefined:baseGet(object,path);};}/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */var range=createRange();/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */var rangeRight=createRange(true);/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */function stubArray(){return[];}/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */function stubFalse(){return false;}/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */function stubObject(){return{};}/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */function stubString(){return'';}/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */function stubTrue(){return true;}/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return[];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*//**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */var ceil=createRound('ceil');/**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */var floor=createRound('floor');/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined;}/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined;}/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */function mean(array){return baseMean(array,identity);}/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined;}/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined;}/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */var round=createRound('round');/**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/// Add methods that return wrapped values in chain sequences.
lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
mixin(lodash,lodash);/*------------------------------------------------------------------------*/// Add methods that return unwrapped values in chain sequences.
lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*//**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */lodash.VERSION=VERSION;// Assign default placeholders.
arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else{result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'',names=realNames[key]||(realNames[key]=[]);names.push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined}];// Add methods to `LazyWrapper`.
LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/// Export lodash.
var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
if(true){// Expose Lodash on the global object to prevent errors when Lodash is
// loaded by a script tag in the presence of an AMD loader.
// See http://requirejs.org/docs/errors.html#mismatch for more details.
// Use `_.noConflict` to remove Lodash from the global object.
root._=_;// Define as an anonymous module so, through path mapping, it can be
// referenced as the "underscore" module.
!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return _;}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}// Check for `exports` after `define` in case a build optimizer adds it.
else if(freeModule){// Export for Node.js.
(freeModule.exports=_)._=_;// Export for CommonJS support.
freeExports._=_;}else{// Export to the global object.
root._=_;}}).call(this);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("l262")(module)))

/***/ }),

/***/ "Ci/U":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"photos_grid":"photos_grid__2poj_","grid_item":"grid_item__3-5H5","gallery_info":"gallery_info__3jnVc"};

/***/ }),

/***/ "DzRl":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ../node_modules/@material/base/index.js
var base = __webpack_require__("dSNL");

// CONCATENATED MODULE: ../node_modules/@material/snackbar/constants.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var cssClasses = {
  ROOT: 'mdc-snackbar',
  TEXT: 'mdc-snackbar__text',
  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',
  ACTION_BUTTON: 'mdc-snackbar__action-button',
  ACTIVE: 'mdc-snackbar--active',
  MULTILINE: 'mdc-snackbar--multiline',
  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom'
};

var strings = {
  TEXT_SELECTOR: '.mdc-snackbar__text',
  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',
  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button',
  SHOW_EVENT: 'MDCSnackbar:show',
  HIDE_EVENT: 'MDCSnackbar:hide'
};

var numbers = {
  MESSAGE_TIMEOUT: 2750
};
// CONCATENATED MODULE: ../node_modules/@material/snackbar/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */




var foundation_MDCSnackbarFoundation = function (_MDCFoundation) {
  _inherits(MDCSnackbarFoundation, _MDCFoundation);

  _createClass(MDCSnackbarFoundation, [{
    key: 'active',
    get: function get() {
      return this.active_;
    }
  }], [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        setAriaHidden: function setAriaHidden() {},
        unsetAriaHidden: function unsetAriaHidden() {},
        setActionAriaHidden: function setActionAriaHidden() {},
        unsetActionAriaHidden: function unsetActionAriaHidden() {},
        setActionText: function setActionText() /* actionText: string */{},
        setMessageText: function setMessageText() /* message: string */{},
        setFocus: function setFocus() {},
        isFocused: function isFocused() {
          return (/* boolean */false
          );
        },
        visibilityIsHidden: function visibilityIsHidden() {
          return (/* boolean */false
          );
        },
        registerCapturedBlurHandler: function registerCapturedBlurHandler() /* handler: EventListener */{},
        deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler() /* handler: EventListener */{},
        registerVisibilityChangeHandler: function registerVisibilityChangeHandler() /* handler: EventListener */{},
        deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler() /* handler: EventListener */{},
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerActionClickHandler: function registerActionClickHandler() /* handler: EventListener */{},
        deregisterActionClickHandler: function deregisterActionClickHandler() /* handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{},
        notifyShow: function notifyShow() {},
        notifyHide: function notifyHide() {}
      };
    }
  }]);

  function MDCSnackbarFoundation(adapter) {
    _classCallCheck(this, MDCSnackbarFoundation);

    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCSnackbarFoundation.defaultAdapter, adapter)));

    _this.active_ = false;
    _this.actionWasClicked_ = false;
    _this.dismissOnAction_ = true;
    _this.firstFocus_ = true;
    _this.pointerDownRecognized_ = false;
    _this.snackbarHasFocus_ = false;
    _this.snackbarData_ = null;
    _this.queue_ = [];
    _this.actionClickHandler_ = function () {
      _this.actionWasClicked_ = true;
      _this.invokeAction_();
    };
    _this.visibilitychangeHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = true;

      if (!_this.adapter_.visibilityIsHidden()) {
        setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);
      }
    };
    _this.interactionHandler_ = function (evt) {
      if (evt.type === 'focus' && !_this.adapter_.isFocused()) {
        return;
      }
      if (evt.type === 'touchstart' || evt.type === 'mousedown') {
        _this.pointerDownRecognized_ = true;
      }
      _this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type === 'focus') {
        _this.pointerDownRecognized_ = false;
      }
    };
    _this.blurHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = false;
      _this.timeoutId_ = setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);
    };
    return _this;
  }

  MDCSnackbarFoundation.prototype.init = function init() {
    this.adapter_.registerActionClickHandler(this.actionClickHandler_);
    this.adapter_.setAriaHidden();
    this.adapter_.setActionAriaHidden();
  };

  MDCSnackbarFoundation.prototype.destroy = function destroy() {
    var _this2 = this;

    this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);
    this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);
    this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this2.adapter_.deregisterCapturedInteractionHandler(evtType, _this2.interactionHandler_);
    });
  };

  MDCSnackbarFoundation.prototype.dismissesOnAction = function dismissesOnAction() {
    return this.dismissOnAction_;
  };

  MDCSnackbarFoundation.prototype.setDismissOnAction = function setDismissOnAction(dismissOnAction) {
    this.dismissOnAction_ = !!dismissOnAction;
  };

  MDCSnackbarFoundation.prototype.show = function show(data) {
    var _this3 = this;

    if (!data) {
      throw new Error('Please provide a data object with at least a message to display.');
    }
    if (!data.message) {
      throw new Error('Please provide a message to be displayed.');
    }
    if (data.actionHandler && !data.actionText) {
      throw new Error('Please provide action text with the handler.');
    }
    if (this.active) {
      this.queue_.push(data);
      return;
    }
    clearTimeout(this.timeoutId_);
    this.snackbarData_ = data;
    this.firstFocus_ = true;
    this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);
    this.adapter_.registerCapturedBlurHandler(this.blurHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
      _this3.adapter_.registerCapturedInteractionHandler(evtType, _this3.interactionHandler_);
    });

    var ACTIVE = cssClasses.ACTIVE,
        MULTILINE = cssClasses.MULTILINE,
        ACTION_ON_BOTTOM = cssClasses.ACTION_ON_BOTTOM;


    this.adapter_.setMessageText(this.snackbarData_.message);

    if (this.snackbarData_.multiline) {
      this.adapter_.addClass(MULTILINE);
      if (this.snackbarData_.actionOnBottom) {
        this.adapter_.addClass(ACTION_ON_BOTTOM);
      }
    }

    if (this.snackbarData_.actionHandler) {
      this.adapter_.setActionText(this.snackbarData_.actionText);
      this.actionHandler_ = this.snackbarData_.actionHandler;
      this.setActionHidden_(false);
    } else {
      this.setActionHidden_(true);
      this.actionHandler_ = null;
      this.adapter_.setActionText(null);
    }

    this.active_ = true;
    this.adapter_.addClass(ACTIVE);
    this.adapter_.unsetAriaHidden();
    this.adapter_.notifyShow();

    this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || numbers.MESSAGE_TIMEOUT);
  };

  MDCSnackbarFoundation.prototype.handlePossibleTabKeyboardFocus_ = function handlePossibleTabKeyboardFocus_() {
    var hijackFocus = this.firstFocus_ && !this.pointerDownRecognized_;

    if (hijackFocus) {
      this.setFocusOnAction_();
    }

    this.firstFocus_ = false;
  };

  MDCSnackbarFoundation.prototype.setFocusOnAction_ = function setFocusOnAction_() {
    this.adapter_.setFocus();
    this.snackbarHasFocus_ = true;
    this.firstFocus_ = false;
  };

  MDCSnackbarFoundation.prototype.invokeAction_ = function invokeAction_() {
    try {
      if (!this.actionHandler_) {
        return;
      }

      this.actionHandler_();
    } finally {
      if (this.dismissOnAction_) {
        this.cleanup_();
      }
    }
  };

  MDCSnackbarFoundation.prototype.cleanup_ = function cleanup_() {
    var _this4 = this;

    var allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;

    if (allowDismissal) {
      var ACTIVE = cssClasses.ACTIVE,
          MULTILINE = cssClasses.MULTILINE,
          ACTION_ON_BOTTOM = cssClasses.ACTION_ON_BOTTOM;


      this.adapter_.removeClass(ACTIVE);

      var handler = function handler() {
        clearTimeout(_this4.timeoutId_);
        _this4.adapter_.deregisterTransitionEndHandler(handler);
        _this4.adapter_.removeClass(MULTILINE);
        _this4.adapter_.removeClass(ACTION_ON_BOTTOM);
        _this4.setActionHidden_(true);
        _this4.adapter_.setAriaHidden();
        _this4.active_ = false;
        _this4.snackbarHasFocus_ = false;
        _this4.adapter_.notifyHide();
        _this4.showNext_();
      };

      this.adapter_.registerTransitionEndHandler(handler);
    }
  };

  MDCSnackbarFoundation.prototype.showNext_ = function showNext_() {
    if (!this.queue_.length) {
      return;
    }
    this.show(this.queue_.shift());
  };

  MDCSnackbarFoundation.prototype.setActionHidden_ = function setActionHidden_(isHidden) {
    if (isHidden) {
      this.adapter_.setActionAriaHidden();
    } else {
      this.adapter_.unsetActionAriaHidden();
    }
  };

  return MDCSnackbarFoundation;
}(base["b" /* MDCFoundation */]);


// CONCATENATED MODULE: ../node_modules/@material/animation/index.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @typedef {{
 *   noPrefix: string,
 *   webkitPrefix: string,
 *   styleProperty: string
 * }}
 */
var VendorPropertyMapType = void 0;

/** @const {Object<string, !VendorPropertyMapType>} */
var eventTypeMap = {
  'animationstart': {
    noPrefix: 'animationstart',
    webkitPrefix: 'webkitAnimationStart',
    styleProperty: 'animation'
  },
  'animationend': {
    noPrefix: 'animationend',
    webkitPrefix: 'webkitAnimationEnd',
    styleProperty: 'animation'
  },
  'animationiteration': {
    noPrefix: 'animationiteration',
    webkitPrefix: 'webkitAnimationIteration',
    styleProperty: 'animation'
  },
  'transitionend': {
    noPrefix: 'transitionend',
    webkitPrefix: 'webkitTransitionEnd',
    styleProperty: 'transition'
  }
};

/** @const {Object<string, !VendorPropertyMapType>} */
var cssPropertyMap = {
  'animation': {
    noPrefix: 'animation',
    webkitPrefix: '-webkit-animation'
  },
  'transform': {
    noPrefix: 'transform',
    webkitPrefix: '-webkit-transform'
  },
  'transition': {
    noPrefix: 'transition',
    webkitPrefix: '-webkit-transition'
  }
};

/**
 * @param {!Object} windowObj
 * @return {boolean}
 */
function hasProperShape(windowObj) {
  return windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function';
}

/**
 * @param {string} eventType
 * @return {boolean}
 */
function eventFoundInMaps(eventType) {
  return eventType in eventTypeMap || eventType in cssPropertyMap;
}

/**
 * @param {string} eventType
 * @param {!Object<string, !VendorPropertyMapType>} map
 * @param {!Element} el
 * @return {string}
 */
function getJavaScriptEventName(eventType, map, el) {
  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
}

/**
 * Helper function to determine browser prefix for CSS3 animation events
 * and property names.
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getAnimationName(windowObj, eventType) {
  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {
    return eventType;
  }

  var map = /** @type {!Object<string, !VendorPropertyMapType>} */eventType in eventTypeMap ? eventTypeMap : cssPropertyMap;
  var el = windowObj['document']['createElement']('div');
  var eventName = '';

  if (map === eventTypeMap) {
    eventName = getJavaScriptEventName(eventType, map, el);
  } else {
    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
  }

  return eventName;
}

// Public functions to access getAnimationName() for JavaScript events or CSS
// property names.

var transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectEventName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectPropertyName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}


// CONCATENATED MODULE: ../node_modules/@material/snackbar/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCSnackbar", function() { return snackbar_MDCSnackbar; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCSnackbarFoundation", function() { return foundation_MDCSnackbarFoundation; });
var snackbar__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function snackbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function snackbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function snackbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */







var snackbar_MDCSnackbar = function (_MDCComponent) {
  snackbar__inherits(MDCSnackbar, _MDCComponent);

  function MDCSnackbar() {
    snackbar__classCallCheck(this, MDCSnackbar);

    return snackbar__possibleConstructorReturn(this, _MDCComponent.apply(this, arguments));
  }

  MDCSnackbar.attachTo = function attachTo(root) {
    return new MDCSnackbar(root);
  };

  MDCSnackbar.prototype.show = function show(data) {
    this.foundation_.show(data);
  };

  MDCSnackbar.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    var _MDCSnackbarFoundatio = foundation_MDCSnackbarFoundation.strings,
        TEXT_SELECTOR = _MDCSnackbarFoundatio.TEXT_SELECTOR,
        ACTION_BUTTON_SELECTOR = _MDCSnackbarFoundatio.ACTION_BUTTON_SELECTOR;

    var getText = function getText() {
      return _this2.root_.querySelector(TEXT_SELECTOR);
    };
    var getActionButton = function getActionButton() {
      return _this2.root_.querySelector(ACTION_BUTTON_SELECTOR);
    };

    /* eslint brace-style: "off" */
    return new foundation_MDCSnackbarFoundation({
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      setAriaHidden: function setAriaHidden() {
        return _this2.root_.setAttribute('aria-hidden', 'true');
      },
      unsetAriaHidden: function unsetAriaHidden() {
        return _this2.root_.removeAttribute('aria-hidden');
      },
      setActionAriaHidden: function setActionAriaHidden() {
        return getActionButton().setAttribute('aria-hidden', 'true');
      },
      unsetActionAriaHidden: function unsetActionAriaHidden() {
        return getActionButton().removeAttribute('aria-hidden');
      },
      setActionText: function setActionText(text) {
        getActionButton().textContent = text;
      },
      setMessageText: function setMessageText(text) {
        getText().textContent = text;
      },
      setFocus: function setFocus() {
        return getActionButton().focus();
      },
      isFocused: function isFocused() {
        return document.activeElement === getActionButton();
      },
      visibilityIsHidden: function visibilityIsHidden() {
        return document.hidden;
      },
      registerCapturedBlurHandler: function registerCapturedBlurHandler(handler) {
        return getActionButton().addEventListener('blur', handler, true);
      },
      deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler(handler) {
        return getActionButton().removeEventListener('blur', handler, true);
      },
      registerVisibilityChangeHandler: function registerVisibilityChangeHandler(handler) {
        return document.addEventListener('visibilitychange', handler);
      },
      deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler(handler) {
        return document.removeEventListener('visibilitychange', handler);
      },
      registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {
        return document.body.addEventListener(evt, handler, true);
      },
      deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {
        return document.body.removeEventListener(evt, handler, true);
      },
      registerActionClickHandler: function registerActionClickHandler(handler) {
        return getActionButton().addEventListener('click', handler);
      },
      deregisterActionClickHandler: function deregisterActionClickHandler(handler) {
        return getActionButton().removeEventListener('click', handler);
      },
      registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
        return _this2.root_.addEventListener(getCorrectEventName(window, 'transitionend'), handler);
      },
      deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
        return _this2.root_.removeEventListener(getCorrectEventName(window, 'transitionend'), handler);
      },
      notifyShow: function notifyShow() {
        return _this2.emit(foundation_MDCSnackbarFoundation.strings.SHOW_EVENT);
      },
      notifyHide: function notifyHide() {
        return _this2.emit(foundation_MDCSnackbarFoundation.strings.HIDE_EVENT);
      }
    });
  };

  snackbar__createClass(MDCSnackbar, [{
    key: 'dismissesOnAction',
    get: function get() {
      return this.foundation_.dismissesOnAction();
    },
    set: function set(dismissesOnAction) {
      this.foundation_.setDismissOnAction(dismissesOnAction);
    }
  }]);

  return MDCSnackbar;
}(base["a" /* MDCComponent */]);

/***/ }),

/***/ "E7HD":
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "E7XR":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.List = exports.ListGroupHeader = exports.ListGroup = exports.ListSecondaryText = exports.ListPrimaryText = exports.ListTextContainer = exports.ListDivider = exports.ListItemMeta = exports.ListItemGraphic = exports.ListLinkItem = exports.ListItem = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _preact = __webpack_require__("KM04");

var _MaterialComponent9 = _interopRequireDefault(__webpack_require__("uc5p"));

var _Icon = _interopRequireDefault(__webpack_require__("MeGi"));

var ListItem =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(ListItem, _MaterialComponent);

  function ListItem() {
    var _this;

    (0, _classCallCheck2.default)(this, ListItem);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItem).apply(this, arguments));
    _this.componentName = 'list-item';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(ListItem, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("li", _extends({
        role: "option"
      }, props, {
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return ListItem;
}(_MaterialComponent9.default);

exports.ListItem = ListItem;

var ListLinkItem =
/*#__PURE__*/
function (_MaterialComponent2) {
  (0, _inherits2.default)(ListLinkItem, _MaterialComponent2);

  function ListLinkItem() {
    var _this2;

    (0, _classCallCheck2.default)(this, ListLinkItem);
    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListLinkItem).apply(this, arguments));
    _this2.componentName = 'list-item';
    _this2.mdcProps = [];
    return _this2;
  }

  (0, _createClass2.default)(ListLinkItem, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("a", _extends({
        role: "option"
      }, props, {
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return ListLinkItem;
}(_MaterialComponent9.default);

exports.ListLinkItem = ListLinkItem;

var ListItemGraphic =
/*#__PURE__*/
function (_MaterialComponent3) {
  (0, _inherits2.default)(ListItemGraphic, _MaterialComponent3);

  function ListItemGraphic() {
    var _this3;

    (0, _classCallCheck2.default)(this, ListItemGraphic);
    _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItemGraphic).apply(this, arguments));
    _this3.componentName = 'list-item__graphic';
    _this3.mdcProps = [];
    return _this3;
  }

  (0, _createClass2.default)(ListItemGraphic, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("span", _extends({}, props, {
        ref: this.setControlRef,
        role: "presentation"
      }), (0, _preact.h)(_Icon.default, {
        "aria-hidden": "true"
      }, props.children));
    }
  }]);
  return ListItemGraphic;
}(_MaterialComponent9.default);

exports.ListItemGraphic = ListItemGraphic;

var ListItemMeta =
/*#__PURE__*/
function (_ListItemGraphic) {
  (0, _inherits2.default)(ListItemMeta, _ListItemGraphic);

  function ListItemMeta() {
    var _this4;

    (0, _classCallCheck2.default)(this, ListItemMeta);
    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItemMeta).apply(this, arguments));
    _this4.componentName = 'list-item__meta';
    return _this4;
  }

  return ListItemMeta;
}(ListItemGraphic);

exports.ListItemMeta = ListItemMeta;

var ListDivider =
/*#__PURE__*/
function (_MaterialComponent4) {
  (0, _inherits2.default)(ListDivider, _MaterialComponent4);

  function ListDivider() {
    var _this5;

    (0, _classCallCheck2.default)(this, ListDivider);
    _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListDivider).apply(this, arguments));
    _this5.componentName = 'list-divider';
    _this5.mdcProps = ['inset'];
    return _this5;
  }

  (0, _createClass2.default)(ListDivider, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("li", _extends({
        role: "separator"
      }, props, {
        ref: this.setControlRef
      }));
    }
  }]);
  return ListDivider;
}(_MaterialComponent9.default);

exports.ListDivider = ListDivider;

var ListTextContainer =
/*#__PURE__*/
function (_MaterialComponent5) {
  (0, _inherits2.default)(ListTextContainer, _MaterialComponent5);

  function ListTextContainer() {
    var _this6;

    (0, _classCallCheck2.default)(this, ListTextContainer);
    _this6 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListTextContainer).apply(this, arguments));
    _this6.componentName = 'list-item__text';
    _this6.mdcProps = [];
    return _this6;
  }

  (0, _createClass2.default)(ListTextContainer, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("span", _extends({}, props, {
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return ListTextContainer;
}(_MaterialComponent9.default);

exports.ListTextContainer = ListTextContainer;

var ListPrimaryText =
/*#__PURE__*/
function (_ListTextContainer) {
  (0, _inherits2.default)(ListPrimaryText, _ListTextContainer);

  function ListPrimaryText() {
    var _this7;

    (0, _classCallCheck2.default)(this, ListPrimaryText);
    _this7 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListPrimaryText).apply(this, arguments));
    _this7.componentName = 'list-item__primary-text';
    return _this7;
  }

  return ListPrimaryText;
}(ListTextContainer);

exports.ListPrimaryText = ListPrimaryText;

var ListSecondaryText =
/*#__PURE__*/
function (_ListTextContainer2) {
  (0, _inherits2.default)(ListSecondaryText, _ListTextContainer2);

  function ListSecondaryText() {
    var _this8;

    (0, _classCallCheck2.default)(this, ListSecondaryText);
    _this8 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListSecondaryText).apply(this, arguments));
    _this8.componentName = 'list-item__secondary-text';
    return _this8;
  }

  return ListSecondaryText;
}(ListTextContainer);

exports.ListSecondaryText = ListSecondaryText;

var ListGroup =
/*#__PURE__*/
function (_MaterialComponent6) {
  (0, _inherits2.default)(ListGroup, _MaterialComponent6);

  function ListGroup() {
    var _this9;

    (0, _classCallCheck2.default)(this, ListGroup);
    _this9 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListGroup).apply(this, arguments));
    _this9.componentName = 'list-group';
    _this9.mdcProps = [];
    return _this9;
  }

  (0, _createClass2.default)(ListGroup, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("div", _extends({}, props), this.props.children);
    }
  }]);
  return ListGroup;
}(_MaterialComponent9.default);

exports.ListGroup = ListGroup;

var ListGroupHeader =
/*#__PURE__*/
function (_MaterialComponent7) {
  (0, _inherits2.default)(ListGroupHeader, _MaterialComponent7);

  function ListGroupHeader() {
    var _this10;

    (0, _classCallCheck2.default)(this, ListGroupHeader);
    _this10 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListGroupHeader).apply(this, arguments));
    _this10.componentName = 'list-group__subheader';
    _this10.mdcProps = [];
    return _this10;
  }

  (0, _createClass2.default)(ListGroupHeader, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("h3", _extends({}, props, {
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return ListGroupHeader;
}(_MaterialComponent9.default);

exports.ListGroupHeader = ListGroupHeader;

var List =
/*#__PURE__*/
function (_MaterialComponent8) {
  (0, _inherits2.default)(List, _MaterialComponent8);

  function List() {
    var _this11;

    (0, _classCallCheck2.default)(this, List);
    _this11 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(List).apply(this, arguments));
    _this11.componentName = 'list';
    _this11.mdcProps = ['dense', 'two-line', 'avatar-list'];
    return _this11;
  }

  (0, _createClass2.default)(List, [{
    key: "materialDom",
    value: function materialDom(props) {
      if (props.interactive) {
        return (0, _preact.h)("nav", _extends({
          ref: this.setControlRef
        }, props), props.children);
      }

      return (0, _preact.h)("ul", _extends({}, props, {
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return List;
}(_MaterialComponent9.default);

exports.List = List;

var default_1 =
/*#__PURE__*/
function (_List) {
  (0, _inherits2.default)(default_1, _List);

  function default_1() {
    (0, _classCallCheck2.default)(this, default_1);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(default_1).apply(this, arguments));
  }

  return default_1;
}(List);

exports.default = default_1;
default_1.Item = ListItem;
default_1.LinkItem = ListLinkItem;
default_1.ItemGraphic = ListItemGraphic;
default_1.ItemMeta = ListItemMeta;
default_1.Divider = ListDivider;
default_1.TextContainer = ListTextContainer;
default_1.PrimaryText = ListPrimaryText;
default_1.SecondaryText = ListSecondaryText;
default_1.Group = ListGroup;
default_1.GroupHeader = ListGroupHeader;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "EQDb":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__foundation__ = __webpack_require__("uJAj");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



/**
 * @template F
 */

var MDCComponent = function () {
  /**
   * @param {!Element} root
   * @return {!MDCComponent}
   */
  MDCComponent.attachTo = function attachTo(root) {
    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
    // returns an instantiated component with its root set to that element. Also note that in the cases of
    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
    // from getDefaultFoundation().
    return new MDCComponent(root, new __WEBPACK_IMPORTED_MODULE_0__foundation__["a" /* default */]());
  };

  /**
   * @param {!Element} root
   * @param {F=} foundation
   * @param {...?} args
   */


  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args);
    // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.
    /** @protected {!F} */
    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  MDCComponent.prototype.initialize = function initialize() /* ...args */{}
  // Subclasses can override this to do any additional setup work that would be considered part of a
  // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
  // initialized. Any additional arguments besides root and foundation will be passed in here.


  /**
   * @return {!F} foundation
   */
  ;

  MDCComponent.prototype.getDefaultFoundation = function getDefaultFoundation() {
    // Subclasses must override this method to return a properly configured foundation class for the
    // component.
    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
  };

  MDCComponent.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
  };

  MDCComponent.prototype.destroy = function destroy() {
    // Subclasses may implement this method to release any resources / deregister any listeners they have
    // attached. An example of this might be deregistering a resize event from the window object.
    this.foundation_.destroy();
  };

  /**
   * Wrapper method to add an event listener to the component's root element. This is most useful when
   * listening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCComponent.prototype.listen = function listen(evtType, handler) {
    this.root_.addEventListener(evtType, handler);
  };

  /**
   * Wrapper method to remove an event listener to the component's root element. This is most useful when
   * unlistening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCComponent.prototype.unlisten = function unlisten(evtType, handler) {
    this.root_.removeEventListener(evtType, handler);
  };

  /**
   * Fires a cross-browser-compatible custom event from the component root of the given type,
   * with the given data.
   * @param {string} evtType
   * @param {!Object} evtData
   * @param {boolean=} shouldBubble
   */


  MDCComponent.prototype.emit = function emit(evtType, evtData) {
    var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var evt = void 0;
    if (typeof CustomEvent === 'function') {
      evt = new CustomEvent(evtType, {
        detail: evtData,
        bubbles: shouldBubble
      });
    } else {
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }

    this.root_.dispatchEvent(evt);
  };

  return MDCComponent;
}();

/* harmony default export */ __webpack_exports__["a"] = (MDCComponent);

/***/ }),

/***/ "EyEO":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var util_namespaceObject = {};
__webpack_require__.d(util_namespaceObject, "createFocusTrapInstance", function() { return createFocusTrapInstance; });

// EXTERNAL MODULE: ../node_modules/@material/base/index.js
var base = __webpack_require__("dSNL");

// CONCATENATED MODULE: ../node_modules/@material/drawer/adapter.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Drawer
 *
 * Defines the shape of the adapter expected by the foundation. Implement this
 * adapter to integrate the Drawer into your framework. See
 * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md
 * for more information.
 *
 * @record
 */
var MDCDrawerAdapter = function () {
  function MDCDrawerAdapter() {
    _classCallCheck(this, MDCDrawerAdapter);
  }

  /**
   * Adds a class to the root Element.
   * @param {string} className
   */
  MDCDrawerAdapter.prototype.addClass = function addClass(className) {};

  /**
   * Removes a class from the root Element.
   * @param {string} className
   */


  MDCDrawerAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * Returns true if the root Element contains the given class.
   * @param {string} className
   * @return {boolean}
   */


  MDCDrawerAdapter.prototype.hasClass = function hasClass(className) {};

  /**
   * @param {!Element} element target element to verify class name
   * @param {string} className class name
   */


  MDCDrawerAdapter.prototype.elementHasClass = function elementHasClass(element, className) {};

  /** @return {!ClientRect} */


  MDCDrawerAdapter.prototype.computeBoundingRect = function computeBoundingRect() {};

  /**
   * Saves the focus of currently active element.
   */


  MDCDrawerAdapter.prototype.saveFocus = function saveFocus() {};

  /**
   * Restores focus to element previously saved with 'saveFocus'.
   */


  MDCDrawerAdapter.prototype.restoreFocus = function restoreFocus() {};

  /**
   * Focuses the active / selected navigation item.
   */


  MDCDrawerAdapter.prototype.focusActiveNavigationItem = function focusActiveNavigationItem() {};

  /**
   * Emits a custom event "MDCDrawer:closed" denoting the drawer has closed.
   */


  MDCDrawerAdapter.prototype.notifyClose = function notifyClose() {};

  /**
   * Emits a custom event "MDCDrawer:opened" denoting the drawer has opened.
   */


  MDCDrawerAdapter.prototype.notifyOpen = function notifyOpen() {};

  /**
   * Traps focus on root element and focuses the active navigation element.
   */


  MDCDrawerAdapter.prototype.trapFocus = function trapFocus() {};

  /**
   * Releases focus trap from root element which was set by `trapFocus`
   * and restores focus to where it was prior to calling `trapFocus`.
   */


  MDCDrawerAdapter.prototype.releaseFocus = function releaseFocus() {};

  return MDCDrawerAdapter;
}();

/* harmony default export */ var drawer_adapter = (MDCDrawerAdapter);
// EXTERNAL MODULE: ../node_modules/@material/base/foundation.js
var foundation = __webpack_require__("uJAj");

// CONCATENATED MODULE: ../node_modules/@material/drawer/constants.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/** @enum {string} */
var cssClasses = {
  ROOT: 'mdc-drawer',
  DISMISSIBLE: 'mdc-drawer--dismissible',
  MODAL: 'mdc-drawer--modal',
  OPEN: 'mdc-drawer--open',
  ANIMATE: 'mdc-drawer--animate',
  OPENING: 'mdc-drawer--opening',
  CLOSING: 'mdc-drawer--closing'
};

/** @enum {string} */
var strings = {
  APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
  SCRIM_SELECTOR: '.mdc-drawer-scrim',
  CLOSE_EVENT: 'MDCDrawer:closed',
  OPEN_EVENT: 'MDCDrawer:opened'
};


// CONCATENATED MODULE: ../node_modules/@material/drawer/dismissible/foundation.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





/**
 * @extends {MDCFoundation<!MDCDrawerAdapter>}
 */

var foundation_MDCDismissibleDrawerFoundation = function (_MDCFoundation) {
  _inherits(MDCDismissibleDrawerFoundation, _MDCFoundation);

  function MDCDismissibleDrawerFoundation() {
    foundation__classCallCheck(this, MDCDismissibleDrawerFoundation);

    return _possibleConstructorReturn(this, _MDCFoundation.apply(this, arguments));
  }

  /**
   * Function to open the drawer.
   */
  MDCDismissibleDrawerFoundation.prototype.open = function open() {
    if (this.isOpen() || this.isOpening() || this.isClosing()) {
      return;
    }

    this.adapter_.addClass(cssClasses.OPEN);
    this.adapter_.addClass(cssClasses.ANIMATE);
    this.adapter_.computeBoundingRect(); // Force reflow.
    this.adapter_.addClass(cssClasses.OPENING);

    this.adapter_.saveFocus();
  };

  /**
   * Function to close the drawer.
   */


  MDCDismissibleDrawerFoundation.prototype.close = function close() {
    if (!this.isOpen() || this.isOpening() || this.isClosing()) {
      return;
    }

    this.adapter_.addClass(cssClasses.CLOSING);
  };

  /**
   * Extension point for when drawer finishes open animation.
   * @protected
   */


  MDCDismissibleDrawerFoundation.prototype.opened = function opened() {};

  /**
   * Extension point for when drawer finishes close animation.
   * @protected
   */


  MDCDismissibleDrawerFoundation.prototype.closed = function closed() {};

  /**
   * Returns true if drawer is in open state.
   * @return {boolean}
   */


  MDCDismissibleDrawerFoundation.prototype.isOpen = function isOpen() {
    return this.adapter_.hasClass(cssClasses.OPEN);
  };

  /**
   * Returns true if drawer is animating open.
   * @return {boolean}
   */


  MDCDismissibleDrawerFoundation.prototype.isOpening = function isOpening() {
    return this.adapter_.hasClass(cssClasses.OPENING);
  };

  /**
   * Returns true if drawer is animating closed.
   * @return {boolean}
   */


  MDCDismissibleDrawerFoundation.prototype.isClosing = function isClosing() {
    return this.adapter_.hasClass(cssClasses.CLOSING);
  };

  /**
   * Keydown handler to close drawer when key is escape.
   * @param evt
   */


  MDCDismissibleDrawerFoundation.prototype.handleKeydown = function handleKeydown(evt) {
    var keyCode = evt.keyCode,
        key = evt.key;


    var isEscape = key === 'Escape' || keyCode === 27;
    if (isEscape) {
      this.close();
    }
  };

  /**
   * Handles a transition end event on the root element.
   * @param {!Event} evt
   */


  MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function handleTransitionEnd(evt) {
    var OPENING = cssClasses.OPENING,
        CLOSING = cssClasses.CLOSING,
        OPEN = cssClasses.OPEN,
        ANIMATE = cssClasses.ANIMATE,
        ROOT = cssClasses.ROOT;

    // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.

    var isElement = evt.target instanceof Element;
    if (!isElement || !this.adapter_.elementHasClass( /** @type {!Element} */evt.target, ROOT)) {
      return;
    }

    if (this.isClosing()) {
      this.adapter_.removeClass(OPEN);
      this.adapter_.restoreFocus();
      this.closed();
      this.adapter_.notifyClose();
    } else {
      this.adapter_.focusActiveNavigationItem();
      this.opened();
      this.adapter_.notifyOpen();
    }

    this.adapter_.removeClass(ANIMATE);
    this.adapter_.removeClass(OPENING);
    this.adapter_.removeClass(CLOSING);
  };

  _createClass(MDCDismissibleDrawerFoundation, null, [{
    key: 'strings',

    /** @return enum {string} */
    get: function get() {
      return strings;
    }

    /** @return enum {string} */

  }, {
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCDrawerAdapter} */{
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          hasClass: function hasClass() /* className: string */{},
          elementHasClass: function elementHasClass() /* element: !Element, className: string */{},
          computeBoundingRect: function computeBoundingRect() {},
          notifyClose: function notifyClose() {},
          notifyOpen: function notifyOpen() {},
          saveFocus: function saveFocus() {},
          restoreFocus: function restoreFocus() {},
          focusActiveNavigationItem: function focusActiveNavigationItem() {},
          trapFocus: function trapFocus() {},
          releaseFocus: function releaseFocus() {}
        }
      );
    }
  }]);

  return MDCDismissibleDrawerFoundation;
}(foundation["a" /* default */]);

/* harmony default export */ var dismissible_foundation = (foundation_MDCDismissibleDrawerFoundation);
// CONCATENATED MODULE: ../node_modules/@material/drawer/modal/foundation.js
function modal_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */




/**
 * @extends {MDCDismissibleDrawerFoundation<!MDCDrawerAdapter>}
 */

var MDCModalDrawerFoundation = function (_MDCDismissibleDrawer) {
  foundation__inherits(MDCModalDrawerFoundation, _MDCDismissibleDrawer);

  function MDCModalDrawerFoundation() {
    modal_foundation__classCallCheck(this, MDCModalDrawerFoundation);

    return foundation__possibleConstructorReturn(this, _MDCDismissibleDrawer.apply(this, arguments));
  }

  /**
   * Called when drawer finishes open animation.
   * @override
   */
  MDCModalDrawerFoundation.prototype.opened = function opened() {
    this.adapter_.trapFocus();
  };

  /**
   * Called when drawer finishes close animation.
   * @override
   */


  MDCModalDrawerFoundation.prototype.closed = function closed() {
    this.adapter_.releaseFocus();
  };

  /**
   * Handles click event on scrim.
   */


  MDCModalDrawerFoundation.prototype.handleScrimClick = function handleScrimClick() {
    this.close();
  };

  return MDCModalDrawerFoundation;
}(dismissible_foundation);

/* harmony default export */ var modal_foundation = (MDCModalDrawerFoundation);
// EXTERNAL MODULE: ../node_modules/@material/base/component.js
var component = __webpack_require__("EQDb");

// CONCATENATED MODULE: ../node_modules/@material/list/adapter.js
function adapter__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC List. Provides an interface for managing focus.
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
var MDCListAdapter = function () {
  function MDCListAdapter() {
    adapter__classCallCheck(this, MDCListAdapter);
  }

  /** @return {number} */
  MDCListAdapter.prototype.getListItemCount = function getListItemCount() {};

  /**
   * @return {number} */


  MDCListAdapter.prototype.getFocusedElementIndex = function getFocusedElementIndex() {};

  /**
   * @param {number} index
   * @param {string} attribute
   * @param {string} value
   */


  MDCListAdapter.prototype.setAttributeForElementIndex = function setAttributeForElementIndex(index, attribute, value) {};

  /**
   * @param {number} index
   * @param {string} attribute
   */


  MDCListAdapter.prototype.removeAttributeForElementIndex = function removeAttributeForElementIndex(index, attribute) {};

  /**
   * @param {number} index
   * @param {string} className
   */


  MDCListAdapter.prototype.addClassForElementIndex = function addClassForElementIndex(index, className) {};

  /**
   * @param {number} index
   * @param {string} className
   */


  MDCListAdapter.prototype.removeClassForElementIndex = function removeClassForElementIndex(index, className) {};

  /**
   * Focuses list item at the index specified.
   * @param {number} index
   */


  MDCListAdapter.prototype.focusItemAtIndex = function focusItemAtIndex(index) {};

  /**
   * Sets the tabindex to the value specified for all button/a element children of
   * the list item at the index specified.
   * @param {number} listItemIndex
   * @param {number} tabIndexValue
   */


  MDCListAdapter.prototype.setTabIndexForListItemChildren = function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {};

  /**
   * If the given element has an href, follows the link.
   * @param {!Element} ele
   */


  MDCListAdapter.prototype.followHref = function followHref(ele) {};

  return MDCListAdapter;
}();

/* harmony default export */ var list_adapter = (MDCListAdapter);
// CONCATENATED MODULE: ../node_modules/@material/list/constants.js
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @enum {string} */
var constants_cssClasses = {
  ROOT: 'mdc-list',
  LIST_ITEM_CLASS: 'mdc-list-item',
  LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
  LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated'
};

/** @enum {string} */
var constants_strings = {
  ARIA_ORIENTATION: 'aria-orientation',
  ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
  ARIA_SELECTED: 'aria-selected',
  FOCUSABLE_CHILD_ELEMENTS: '.' + constants_cssClasses.LIST_ITEM_CLASS + ' button:not(:disabled), .' + constants_cssClasses.LIST_ITEM_CLASS + ' a',
  ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)'
};


// CONCATENATED MODULE: ../node_modules/@material/list/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var foundation__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function list_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function list_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function list_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];

var foundation_MDCListFoundation = function (_MDCFoundation) {
  list_foundation__inherits(MDCListFoundation, _MDCFoundation);

  foundation__createClass(MDCListFoundation, null, [{
    key: 'strings',

    /** @return enum {string} */
    get: function get() {
      return constants_strings;
    }

    /** @return enum {string} */

  }, {
    key: 'cssClasses',
    get: function get() {
      return constants_cssClasses;
    }

    /**
     * {@see MDCListAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCListAdapter}
     */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCListAdapter} */{
          getListItemCount: function getListItemCount() {},
          getFocusedElementIndex: function getFocusedElementIndex() {},
          setAttributeForElementIndex: function setAttributeForElementIndex() {},
          removeAttributeForElementIndex: function removeAttributeForElementIndex() {},
          addClassForElementIndex: function addClassForElementIndex() {},
          removeClassForElementIndex: function removeClassForElementIndex() {},
          focusItemAtIndex: function focusItemAtIndex() {},
          setTabIndexForListItemChildren: function setTabIndexForListItemChildren() {},
          followHref: function followHref() {}
        }
      );
    }

    /**
     * @param {!MDCListAdapter=} adapter
     */

  }]);

  function MDCListFoundation(adapter) {
    list_foundation__classCallCheck(this, MDCListFoundation);

    /** {boolean} */
    var _this = list_foundation__possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCListFoundation.defaultAdapter, adapter)));

    _this.wrapFocus_ = false;
    /** {boolean} */
    _this.isVertical_ = true;
    /** {boolean} */
    _this.isSingleSelectionList_ = false;
    /** {number} */
    _this.selectedIndex_ = -1;
    /** {boolean} */
    _this.useActivatedClass_ = false;
    return _this;
  }

  /**
   * Sets the private wrapFocus_ variable.
   * @param {boolean} value
   */


  MDCListFoundation.prototype.setWrapFocus = function setWrapFocus(value) {
    this.wrapFocus_ = value;
  };

  /**
   * Sets the isVertical_ private variable.
   * @param {boolean} value
   */


  MDCListFoundation.prototype.setVerticalOrientation = function setVerticalOrientation(value) {
    this.isVertical_ = value;
  };

  /**
   * Sets the isSingleSelectionList_ private variable.
   * @param {boolean} value
   */


  MDCListFoundation.prototype.setSingleSelection = function setSingleSelection(value) {
    this.isSingleSelectionList_ = value;
  };

  /**
   * Sets the useActivatedClass_ private variable.
   * @param {boolean} useActivated
   */


  MDCListFoundation.prototype.setUseActivatedClass = function setUseActivatedClass(useActivated) {
    this.useActivatedClass_ = useActivated;
  };

  /** @param {number} index */


  MDCListFoundation.prototype.setSelectedIndex = function setSelectedIndex(index) {
    if (index === this.selectedIndex_) {
      return;
    }

    var className = this.useActivatedClass_ ? constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS : constants_cssClasses.LIST_ITEM_SELECTED_CLASS;

    if (this.selectedIndex_ >= 0) {
      this.adapter_.removeAttributeForElementIndex(this.selectedIndex_, constants_strings.ARIA_SELECTED);
      this.adapter_.removeClassForElementIndex(this.selectedIndex_, className);
      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, 'tabindex', -1);
    }

    if (index >= 0 && this.adapter_.getListItemCount() > index) {
      this.selectedIndex_ = index;
      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, constants_strings.ARIA_SELECTED, true);
      this.adapter_.addClassForElementIndex(this.selectedIndex_, className);
      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, 'tabindex', 0);

      if (this.selectedIndex_ !== 0) {
        this.adapter_.setAttributeForElementIndex(0, 'tabindex', -1);
      }
    }
  };

  /**
   * Focus in handler for the list items.
   * @param evt
   * @param {number} listItemIndex
   */


  MDCListFoundation.prototype.handleFocusIn = function handleFocusIn(evt, listItemIndex) {
    if (listItemIndex >= 0) {
      this.adapter_.setTabIndexForListItemChildren(listItemIndex, 0);
    }
  };

  /**
   * Focus out handler for the list items.
   * @param {Event} evt
   * @param {number} listItemIndex
   */


  MDCListFoundation.prototype.handleFocusOut = function handleFocusOut(evt, listItemIndex) {
    if (listItemIndex >= 0) {
      this.adapter_.setTabIndexForListItemChildren(listItemIndex, -1);
    }
  };

  /**
   * Key handler for the list.
   * @param {Event} evt
   * @param {boolean} isRootListItem
   * @param {number} listItemIndex
   */


  MDCListFoundation.prototype.handleKeydown = function handleKeydown(evt, isRootListItem, listItemIndex) {
    var arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;
    var arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;
    var arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;
    var arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;
    var isHome = evt.key === 'Home' || evt.keyCode === 36;
    var isEnd = evt.key === 'End' || evt.keyCode === 35;
    var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
    var isSpace = evt.key === 'Space' || evt.keyCode === 32;

    var currentIndex = this.adapter_.getFocusedElementIndex();
    if (currentIndex === -1) {
      currentIndex = listItemIndex;
      if (currentIndex < 0) {
        // If this event doesn't have a mdc-list-item ancestor from the
        // current list (not from a sublist), return early.
        return;
      }
    }

    if (this.isVertical_ && arrowDown || !this.isVertical_ && arrowRight) {
      this.preventDefaultEvent_(evt);
      this.focusNextElement(currentIndex);
    } else if (this.isVertical_ && arrowUp || !this.isVertical_ && arrowLeft) {
      this.preventDefaultEvent_(evt);
      this.focusPrevElement(currentIndex);
    } else if (isHome) {
      this.preventDefaultEvent_(evt);
      this.focusFirstElement();
    } else if (isEnd) {
      this.preventDefaultEvent_(evt);
      this.focusLastElement();
    } else if (this.isSingleSelectionList_ && (isEnter || isSpace)) {
      this.preventDefaultEvent_(evt);
      // Check if the space key was pressed on the list item or a child element.
      if (isRootListItem) {
        this.setSelectedIndex(currentIndex);

        // Explicitly activate links, since we're preventing default on Enter, and Space doesn't activate them.
        this.adapter_.followHref(currentIndex);
      }
    }
  };

  /**
   * Click handler for the list.
   */


  MDCListFoundation.prototype.handleClick = function handleClick() {
    var currentIndex = this.adapter_.getFocusedElementIndex();

    if (currentIndex === -1) return;

    this.setSelectedIndex(currentIndex);
  };

  /**
   * Ensures that preventDefault is only called if the containing element doesn't
   * consume the event, and it will cause an unintended scroll.
   * @param {Event} evt
   * @private
   */


  MDCListFoundation.prototype.preventDefaultEvent_ = function preventDefaultEvent_(evt) {
    var tagName = ('' + evt.target.tagName).toLowerCase();
    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
      evt.preventDefault();
    }
  };

  /**
   * Focuses the next element on the list.
   * @param {number} index
   */


  MDCListFoundation.prototype.focusNextElement = function focusNextElement(index) {
    var count = this.adapter_.getListItemCount();
    var nextIndex = index + 1;
    if (nextIndex >= count) {
      if (this.wrapFocus_) {
        nextIndex = 0;
      } else {
        // Return early because last item is already focused.
        return;
      }
    }
    this.adapter_.focusItemAtIndex(nextIndex);
  };

  /**
   * Focuses the previous element on the list.
   * @param {number} index
   */


  MDCListFoundation.prototype.focusPrevElement = function focusPrevElement(index) {
    var prevIndex = index - 1;
    if (prevIndex < 0) {
      if (this.wrapFocus_) {
        prevIndex = this.adapter_.getListItemCount() - 1;
      } else {
        // Return early because first item is already focused.
        return;
      }
    }
    this.adapter_.focusItemAtIndex(prevIndex);
  };

  MDCListFoundation.prototype.focusFirstElement = function focusFirstElement() {
    if (this.adapter_.getListItemCount() > 0) {
      this.adapter_.focusItemAtIndex(0);
    }
  };

  MDCListFoundation.prototype.focusLastElement = function focusLastElement() {
    var lastIndex = this.adapter_.getListItemCount() - 1;
    if (lastIndex >= 0) {
      this.adapter_.focusItemAtIndex(lastIndex);
    }
  };

  return MDCListFoundation;
}(foundation["a" /* default */]);

/* harmony default export */ var list_foundation = (foundation_MDCListFoundation);
// CONCATENATED MODULE: ../node_modules/@material/list/index.js
var list__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var list__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function list__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function list__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function list__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






/**
 * @extends MDCComponent<!MDCListFoundation>
 */

var list_MDCList = function (_MDCComponent) {
  list__inherits(MDCList, _MDCComponent);

  /** @param {...?} args */
  function MDCList() {
    list__classCallCheck(this, MDCList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!Function} */
    var _this = list__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.handleKeydown_;
    /** @private {!Function} */
    _this.handleClick_;
    /** @private {!Function} */
    _this.focusInEventListener_;
    /** @private {!Function} */
    _this.focusOutEventListener_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @return {!MDCList}
   */


  MDCList.attachTo = function attachTo(root) {
    return new MDCList(root);
  };

  MDCList.prototype.destroy = function destroy() {
    this.root_.removeEventListener('keydown', this.handleKeydown_);
    this.root_.removeEventListener('click', this.handleClick_);
    this.root_.removeEventListener('focusin', this.focusInEventListener_);
    this.root_.removeEventListener('focusout', this.focusOutEventListener_);
  };

  MDCList.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    this.handleClick_ = this.foundation_.handleClick.bind(this.foundation_);
    this.handleKeydown_ = this.handleKeydownEvent_.bind(this);
    this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);
    this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);
    this.root_.addEventListener('keydown', this.handleKeydown_);
    this.root_.addEventListener('focusin', this.focusInEventListener_);
    this.root_.addEventListener('focusout', this.focusOutEventListener_);
    this.layout();
    this.initializeListType();
  };

  MDCList.prototype.layout = function layout() {
    var direction = this.root_.getAttribute(constants_strings.ARIA_ORIENTATION);
    this.vertical = direction !== constants_strings.ARIA_ORIENTATION_HORIZONTAL;

    // List items need to have at least tabindex=-1 to be focusable.
    [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (ele) {
      ele.setAttribute('tabindex', -1);
    });

    // Child button/a elements are not tabbable until the list item is focused.
    [].slice.call(this.root_.querySelectorAll(constants_strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (ele) {
      return ele.setAttribute('tabindex', -1);
    });
  };

  /**
   * Used to figure out which list item this event is targetting. Or returns -1 if
   * there is no list item
   * @param {Event} evt
   * @private
   */


  MDCList.prototype.getListItemIndex_ = function getListItemIndex_(evt) {
    var eventTarget = /** @type {HTMLElement} */evt.target;
    var index = -1;

    // Find the first ancestor that is a list item or the list.
    while (!eventTarget.classList.contains(constants_cssClasses.LIST_ITEM_CLASS) && !eventTarget.classList.contains(constants_cssClasses.ROOT)) {
      eventTarget = eventTarget.parentElement;
    }

    // Get the index of the element if it is a list item.
    if (eventTarget.classList.contains(constants_cssClasses.LIST_ITEM_CLASS)) {
      index = this.listElements.indexOf(eventTarget);
    }

    return index;
  };

  /**
   * Used to figure out which element was clicked before sending the event to the foundation.
   * @param {Event} evt
   * @private
   */


  MDCList.prototype.handleFocusInEvent_ = function handleFocusInEvent_(evt) {
    var index = this.getListItemIndex_(evt);
    this.foundation_.handleFocusIn(evt, index);
  };

  /**
   * Used to figure out which element was clicked before sending the event to the foundation.
   * @param {Event} evt
   * @private
   */


  MDCList.prototype.handleFocusOutEvent_ = function handleFocusOutEvent_(evt) {
    var index = this.getListItemIndex_(evt);
    this.foundation_.handleFocusOut(evt, index);
  };

  /**
   * Used to figure out which element was clicked before sending the event to the foundation.
   * @param {Event} evt
   * @private
   */


  MDCList.prototype.handleKeydownEvent_ = function handleKeydownEvent_(evt) {
    var index = this.getListItemIndex_(evt);

    if (index >= 0) {
      this.foundation_.handleKeydown(evt, evt.target.classList.contains(constants_cssClasses.LIST_ITEM_CLASS), index);
    }
  };

  MDCList.prototype.initializeListType = function initializeListType() {
    // Automatically set single selection if selected/activated classes are present.
    var preselectedElement = this.root_.querySelector('.' + constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS + ', .' + constants_cssClasses.LIST_ITEM_SELECTED_CLASS);

    if (preselectedElement) {
      if (preselectedElement.classList.contains(constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {
        this.foundation_.setUseActivatedClass(true);
      }

      this.singleSelection = true;
      this.selectedIndex = this.listElements.indexOf(preselectedElement);
    }
  };

  /** @param {boolean} value */


  /** @return {!MDCListFoundation} */
  MDCList.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    return new list_foundation( /** @type {!MDCListAdapter} */list__extends({
      getListItemCount: function getListItemCount() {
        return _this2.listElements.length;
      },
      getFocusedElementIndex: function getFocusedElementIndex() {
        return _this2.listElements.indexOf(document.activeElement);
      },
      setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
        var element = _this2.listElements[index];
        if (element) {
          element.setAttribute(attr, value);
        }
      },
      removeAttributeForElementIndex: function removeAttributeForElementIndex(index, attr) {
        var element = _this2.listElements[index];
        if (element) {
          element.removeAttribute(attr);
        }
      },
      addClassForElementIndex: function addClassForElementIndex(index, className) {
        var element = _this2.listElements[index];
        if (element) {
          element.classList.add(className);
        }
      },
      removeClassForElementIndex: function removeClassForElementIndex(index, className) {
        var element = _this2.listElements[index];
        if (element) {
          element.classList.remove(className);
        }
      },
      focusItemAtIndex: function focusItemAtIndex(index) {
        var element = _this2.listElements[index];
        if (element) {
          element.focus();
        }
      },
      setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
        var element = _this2.listElements[listItemIndex];
        var listItemChildren = [].slice.call(element.querySelectorAll(constants_strings.FOCUSABLE_CHILD_ELEMENTS));
        listItemChildren.forEach(function (ele) {
          return ele.setAttribute('tabindex', tabIndexValue);
        });
      },
      followHref: function followHref(index) {
        var listItem = _this2.listElements[index];
        if (listItem && listItem.href) {
          listItem.click();
        }
      }
    }));
  };

  list__createClass(MDCList, [{
    key: 'vertical',
    set: function set(value) {
      this.foundation_.setVerticalOrientation(value);
    }

    /** @return Array<!Element>*/

  }, {
    key: 'listElements',
    get: function get() {
      return [].slice.call(this.root_.querySelectorAll(constants_strings.ENABLED_ITEMS_SELECTOR));
    }

    /** @param {boolean} value */

  }, {
    key: 'wrapFocus',
    set: function set(value) {
      this.foundation_.setWrapFocus(value);
    }

    /** @param {boolean} isSingleSelectionList */

  }, {
    key: 'singleSelection',
    set: function set(isSingleSelectionList) {
      if (isSingleSelectionList) {
        this.root_.addEventListener('click', this.handleClick_);
      } else {
        this.root_.removeEventListener('click', this.handleClick_);
      }

      this.foundation_.setSingleSelection(isSingleSelectionList);
    }

    /** @param {number} index */

  }, {
    key: 'selectedIndex',
    set: function set(index) {
      this.foundation_.setSelectedIndex(index);
    }
  }]);

  return MDCList;
}(component["a" /* default */]);


// EXTERNAL MODULE: ../node_modules/@material/drawer/node_modules/focus-trap/index.js
var focus_trap = __webpack_require__("TC0Z");
var focus_trap_default = /*#__PURE__*/__webpack_require__.n(focus_trap);

// CONCATENATED MODULE: ../node_modules/@material/drawer/util.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



/**
 * @param {!Element} surfaceEl
 * @param {!Function} focusTrapFactory
 * @return {!FocusTrapInstance}
 */
function createFocusTrapInstance(surfaceEl) {
  var focusTrapFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : focus_trap_default.a;

  return focusTrapFactory(surfaceEl, {
    clickOutsideDeactivates: true,
    initialFocus: false, // Navigation drawer handles focusing on active nav item.
    escapeDeactivates: false, // Navigation drawer handles ESC.
    returnFocusOnDeactivate: false // Navigation drawer handles restore focus.
  });
}


// CONCATENATED MODULE: ../node_modules/@material/drawer/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCDrawer", function() { return drawer_MDCDrawer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCDismissibleDrawerFoundation", function() { return dismissible_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCModalDrawerFoundation", function() { return modal_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "util", function() { return util_namespaceObject; });
var drawer__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var drawer__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function drawer__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function drawer__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function drawer__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */










/**
 * @extends {MDCComponent<!MDCDismissibleDrawerFoundation>}
 * @final
 */

var drawer_MDCDrawer = function (_MDCComponent) {
  drawer__inherits(MDCDrawer, _MDCComponent);

  /**
   * @param {...?} args
   */
  function MDCDrawer() {
    drawer__classCallCheck(this, MDCDrawer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!Element} */
    var _this = drawer__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.previousFocus_;

    /** @private {!Function} */
    _this.handleKeydown_;

    /** @private {!Function} */
    _this.handleTransitionEnd_;

    /** @private {!Function} */
    _this.focusTrapFactory_;

    /** @private {!FocusTrapInstance} */
    _this.focusTrap_;

    /** @private {?Element} */
    _this.scrim_;

    /** @private {?Function} */
    _this.handleScrimClick_;

    /** @private {?MDCList} */
    _this.list_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @return {!MDCDrawer}
   */


  MDCDrawer.attachTo = function attachTo(root) {
    return new MDCDrawer(root);
  };

  /**
   * Returns true if drawer is in the open position.
   * @return {boolean}
   */


  MDCDrawer.prototype.initialize = function initialize() {
    var focusTrapFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : focus_trap_default.a;
    var listFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (el) {
      return new list_MDCList(el);
    };

    var listEl = /** @type {!Element} */this.root_.querySelector('.' + list_foundation.cssClasses.ROOT);
    if (listEl) {
      this.list_ = listFactory(listEl);
      this.list_.wrapFocus = true;
    }
    this.focusTrapFactory_ = focusTrapFactory;
  };

  MDCDrawer.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    var _this2 = this;

    var MODAL = dismissible_foundation.cssClasses.MODAL;


    if (this.root_.classList.contains(MODAL)) {
      var SCRIM_SELECTOR = dismissible_foundation.strings.SCRIM_SELECTOR;

      this.scrim_ = /** @type {!Element} */this.root_.parentElement.querySelector(SCRIM_SELECTOR);
      this.handleScrimClick_ = function () {
        return (/** @type {!MDCModalDrawerFoundation} */_this2.foundation_.handleScrimClick()
        );
      };
      this.scrim_.addEventListener('click', this.handleScrimClick_);
      this.focusTrap_ = createFocusTrapInstance(this.root_, this.focusTrapFactory_);
    }

    this.handleKeydown_ = function (evt) {
      return _this2.foundation_.handleKeydown(evt);
    };
    this.handleTransitionEnd_ = function (evt) {
      return _this2.foundation_.handleTransitionEnd(evt);
    };

    this.root_.addEventListener('keydown', this.handleKeydown_);
    this.root_.addEventListener('transitionend', this.handleTransitionEnd_);
  };

  MDCDrawer.prototype.destroy = function destroy() {
    this.root_.removeEventListener('keydown', this.handleKeydown_);
    this.root_.removeEventListener('transitionend', this.handleTransitionEnd_);

    if (this.list_) {
      this.list_.destroy();
    }

    var MODAL = dismissible_foundation.cssClasses.MODAL;

    if (this.root_.classList.contains(MODAL)) {
      this.scrim_.removeEventListener('click', /** @type {!Function} */this.handleScrimClick_);
      // Ensure drawer is closed to hide scrim and release focus
      this.open = false;
    }
  };

  MDCDrawer.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this3 = this;

    /** @type {!MDCDrawerAdapter} */
    var adapter = /** @type {!MDCDrawerAdapter} */drawer__extends({
      addClass: function addClass(className) {
        return _this3.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this3.root_.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return _this3.root_.classList.contains(className);
      },
      elementHasClass: function elementHasClass(element, className) {
        return element.classList.contains(className);
      },
      computeBoundingRect: function computeBoundingRect() {
        return _this3.root_.getBoundingClientRect();
      },
      saveFocus: function saveFocus() {
        _this3.previousFocus_ = document.activeElement;
      },
      restoreFocus: function restoreFocus() {
        var previousFocus = _this3.previousFocus_ && _this3.previousFocus_.focus;
        if (_this3.root_.contains(document.activeElement) && previousFocus) {
          _this3.previousFocus_.focus();
        }
      },
      focusActiveNavigationItem: function focusActiveNavigationItem() {
        var activeNavItemEl = _this3.root_.querySelector('.' + list_foundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
        if (activeNavItemEl) {
          activeNavItemEl.focus();
        }
      },
      notifyClose: function notifyClose() {
        return _this3.emit(strings.CLOSE_EVENT, {}, true /* shouldBubble */);
      },
      notifyOpen: function notifyOpen() {
        return _this3.emit(strings.OPEN_EVENT, {}, true /* shouldBubble */);
      },
      trapFocus: function trapFocus() {
        return _this3.focusTrap_.activate();
      },
      releaseFocus: function releaseFocus() {
        return _this3.focusTrap_.deactivate();
      }
    });

    var _MDCDismissibleDrawer = dismissible_foundation.cssClasses,
        DISMISSIBLE = _MDCDismissibleDrawer.DISMISSIBLE,
        MODAL = _MDCDismissibleDrawer.MODAL;

    if (this.root_.classList.contains(DISMISSIBLE)) {
      return new dismissible_foundation(adapter);
    } else if (this.root_.classList.contains(MODAL)) {
      return new modal_foundation(adapter);
    } else {
      throw new Error('MDCDrawer: Failed to instantiate component. Supported variants are ' + DISMISSIBLE + ' and ' + MODAL + '.');
    }
  };

  drawer__createClass(MDCDrawer, [{
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    }

    /**
     * Toggles the drawer open and closed.
     * @param {boolean} isOpen
     */
    ,
    set: function set(isOpen) {
      if (isOpen) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }
  }]);

  return MDCDrawer;
}(base["a" /* MDCComponent */]);



/***/ }),

/***/ "FnKr":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "IpTH":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "J5U+":
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__("UJE0");

var superPropBase = __webpack_require__("/aYh");

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;

/***/ }),

/***/ "JkW7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./style/index.css
var style = __webpack_require__("rq4c");
var style_default = /*#__PURE__*/__webpack_require__.n(style);

// EXTERNAL MODULE: ../node_modules/preact/dist/preact.min.js
var preact_min = __webpack_require__("KM04");
var preact_min_default = /*#__PURE__*/__webpack_require__.n(preact_min);

// EXTERNAL MODULE: ../node_modules/preact-router/dist/preact-router.es.js
var preact_router_es = __webpack_require__("/QC5");

// EXTERNAL MODULE: ../node_modules/preact-router/match.js
var match = __webpack_require__("sw5u");
var match_default = /*#__PURE__*/__webpack_require__.n(match);

// EXTERNAL MODULE: ../node_modules/preact-material-components/Drawer/index.js
var Drawer = __webpack_require__("ynRT");
var Drawer_default = /*#__PURE__*/__webpack_require__.n(Drawer);

// EXTERNAL MODULE: ../node_modules/preact-material-components/TopAppBar/index.js
var TopAppBar = __webpack_require__("fHKL");
var TopAppBar_default = /*#__PURE__*/__webpack_require__.n(TopAppBar);

// EXTERNAL MODULE: ../node_modules/preact-material-components/Dialog/style.css
var Dialog_style = __webpack_require__("sEh6");
var Dialog_style_default = /*#__PURE__*/__webpack_require__.n(Dialog_style);

// EXTERNAL MODULE: ../node_modules/preact-material-components/TopAppBar/style.css
var TopAppBar_style = __webpack_require__("FnKr");
var TopAppBar_style_default = /*#__PURE__*/__webpack_require__.n(TopAppBar_style);

// EXTERNAL MODULE: ../node_modules/preact-material-components/Drawer/style.css
var Drawer_style = __webpack_require__("RYBc");
var Drawer_style_default = /*#__PURE__*/__webpack_require__.n(Drawer_style);

// EXTERNAL MODULE: ../node_modules/preact-material-components/List/style.css
var List_style = __webpack_require__("u+vq");
var List_style_default = /*#__PURE__*/__webpack_require__.n(List_style);

// EXTERNAL MODULE: ./components/io_logo/style.css
var io_logo_style = __webpack_require__("QK/6");
var io_logo_style_default = /*#__PURE__*/__webpack_require__.n(io_logo_style);

// CONCATENATED MODULE: ./components/io_logo/index.js


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var io_logo__ref2 = Object(preact_min["h"])(
  'svg',
  {
    xmlns: 'http://www.w3.org/2000/svg',
    xmlnsXlink: 'http://www.w3.org/1999/xlink',
    width: '1200',
    height: '324.316',
    viewBox: '0 0 1200 324.316'
  },
  Object(preact_min["h"])(
    'defs',
    null,
    Object(preact_min["h"])(
      'clipPath',
      { id: 'b' },
      Object(preact_min["h"])('rect', { width: '1200', height: '324.316' })
    )
  ),
  Object(preact_min["h"])(
    'g',
    { id: 'a', 'clip-path': 'url(#b)' },
    Object(preact_min["h"])('rect', { width: '1200', height: '324.316', fill: '#fff' }),
    Object(preact_min["h"])(
      'g',
      { transform: 'translate(-605.589 -399.278)' },
      Object(preact_min["h"])(
        'text',
        {
          transform: 'translate(1088.741 549.223)',
          fill: '#5f6368',
          'font-size': '168',
          'font-family': 'GoogleSans-Regular, Google Sans'
        },
        Object(preact_min["h"])(
          'tspan',
          { x: '0', y: '0' },
          'Extended'
        )
      ),
      Object(preact_min["h"])(
        'text',
        {
          transform: 'translate(1099.975 669.411)',
          fill: '#5f6368',
          'font-size': '114',
          'font-family': 'GoogleSans-Regular, Google Sans'
        },
        Object(preact_min["h"])(
          'tspan',
          { x: '0', y: '0' },
          'Seoul'
        )
      ),
      Object(preact_min["h"])(
        'g',
        { transform: 'translate(605.589 408.094)' },
        Object(preact_min["h"])('rect', {
          width: '108.357',
          height: '216.713',
          transform: 'translate(0 40.007)',
          fill: '#d3e3f9'
        }),
        Object(preact_min["h"])('path', {
          d: 'M776.661,422.874a101.279,101.279,0,1,1-101.28,101.279,101.393,101.393,0,0,1,101.28-101.279m0-10.947A112.227,112.227,0,1,0,888.888,524.154,112.226,112.226,0,0,0,776.661,411.927Z',
          transform: 'translate(-467.07 -375.791)',
          fill: '#4285f4'
        }),
        Object(preact_min["h"])('rect', {
          width: '308.486',
          height: '11.858',
          transform: 'translate(122.452 300.884) rotate(-77.254)',
          fill: '#5bb974'
        })
      )
    )
  )
);

var io_logo_IoLogo = function (_Component) {
  _inherits(IoLogo, _Component);

  function IoLogo() {
    _classCallCheck(this, IoLogo);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  IoLogo.prototype.render = function render(_ref) {
    var rootPath = _ref.rootPath;

    return Object(preact_min["h"])(
      'div',
      { 'class': io_logo_style_default.a.logo_container },
      io_logo__ref2
    );
  };

  return IoLogo;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/SVG/Icons/menu.js


var menu__ref = Object(preact_min["h"])(
	"g",
	null,
	Object(preact_min["h"])("path", { d: "M4,18h16c0.55,0,1-0.45,1-1v0c0-0.55-0.45-1-1-1H4c-0.55,0-1,0.45-1,1v0C3,17.55,3.45,18,4,18z M4,13h16c0.55,0,1-0.45,1-1 v0c0-0.55-0.45-1-1-1H4c-0.55,0-1,0.45-1,1v0C3,12.55,3.45,13,4,13z M3,7L3,7c0,0.55,0.45,1,1,1h16c0.55,0,1-0.45,1-1v0 c0-0.55-0.45-1-1-1H4C3.45,6,3,6.45,3,7z" })
);

var menu_MenuIcon = function MenuIcon(props) {
	return Object(preact_min["h"])(
		"svg",
		props,
		menu__ref
	);
};

/* harmony default export */ var menu = (menu_MenuIcon);
// CONCATENATED MODULE: ./components/SVG/Icons/home.js


var home__ref = Object(preact_min["h"])(
	"div",
	null,
	Object(preact_min["h"])(
		"svg",
		null,
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { d: "M12 5.69l5 4.5V18h-2v-6H9v6H7v-7.81l5-4.5M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3z" })
	),
	Object(preact_min["h"])(
		"svg",
		{ active: true },
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { d: "M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3zm5 15h-2v-6H9v6H7v-7.81l5-4.5 5 4.5V18z" }),
		Object(preact_min["h"])("path", { opacity: ".3", d: "M7 10.19V18h2v-6h6v6h2v-7.81l-5-4.5z" })
	)
);

var HomeIcon = function HomeIcon() {
	return home__ref;
};

/* harmony default export */ var home = (HomeIcon);
// CONCATENATED MODULE: ./components/SVG/Icons/registration.js


var registration__ref = Object(preact_min["h"])(
	"div",
	null,
	Object(preact_min["h"])(
		"svg",
		null,
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { d: "M22 10V6c0-1.1-.9-2-2-2H4c-1.1 0-1.99.9-1.99 2v4c1.1 0 1.99.9 1.99 2s-.89 2-2 2v4c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-4c-1.1 0-2-.9-2-2s.9-2 2-2zm-2-1.46c-1.19.69-2 1.99-2 3.46s.81 2.77 2 3.46V18H4v-2.54c1.19-.69 2-1.99 2-3.46 0-1.48-.8-2.77-1.99-3.46L4 6h16v2.54zM9.07 16L12 14.12 14.93 16l-.89-3.36 2.69-2.2-3.47-.21L12 7l-1.27 3.22-3.47.21 2.69 2.2z" })
	),
	Object(preact_min["h"])(
		"svg",
		{ active: true },
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { opacity: ".3", d: "M4.01 8.54C5.2 9.23 6 10.52 6 12s-.81 2.77-2 3.46V18h16v-2.54c-1.19-.69-2-1.99-2-3.46s.81-2.77 2-3.46V6H4l.01 2.54zm6.72 1.68L12 7l1.26 3.23 3.47.2-2.69 2.2.89 3.37L12 14.12 9.07 16l.88-3.37-2.69-2.2 3.47-.21z" }),
		Object(preact_min["h"])("path", { d: "M20 4H4c-1.1 0-1.99.9-1.99 2v4c1.1 0 1.99.9 1.99 2s-.89 2-2 2v4c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-4c-1.1 0-2-.9-2-2s.9-2 2-2V6c0-1.1-.9-2-2-2zm0 4.54c-1.19.69-2 1.99-2 3.46s.81 2.77 2 3.46V18H4v-2.54c1.19-.69 2-1.99 2-3.46 0-1.48-.8-2.77-1.99-3.46L4 6h16v2.54zM9.07 16L12 14.12 14.93 16l-.89-3.36 2.69-2.2-3.47-.21L12 7l-1.27 3.22-3.47.21 2.69 2.2z" })
	)
);

var RegistrationIcon = function RegistrationIcon() {
	return registration__ref;
};

/* harmony default export */ var registration = (RegistrationIcon);
// CONCATENATED MODULE: ./components/SVG/Icons/faq.js


var faq__ref = Object(preact_min["h"])(
	"div",
	null,
	Object(preact_min["h"])(
		"svg",
		null,
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { d: "M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" })
	),
	Object(preact_min["h"])(
		"svg",
		{ active: true },
		Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
		Object(preact_min["h"])("path", { opacity: ".3", d: "M12 4c-4.41 0-8 3.59-8 8s3.59 8 8 8 8-3.59 8-8-3.59-8-8-8zm1 13h-2v-6h2v6zm0-8h-2V7h2v2z" }),
		Object(preact_min["h"])("path", { d: "M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z" })
	)
);

var FaqIcon = function FaqIcon() {
	return faq__ref;
};

/* harmony default export */ var faq = (FaqIcon);
// CONCATENATED MODULE: ./components/SVG/Icons/cpf.js


var cpf__ref = Object(preact_min["h"])(
    "div",
    null,
    Object(preact_min["h"])(
        "svg",
        null,
        Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
        Object(preact_min["h"])("path", { d: "M9 13c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0-6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm0 8c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm-6 4c.22-.72 3.31-2 6-2 2.7 0 5.8 1.29 6 2H3zM15.08 7.05c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27l-1.68 1.69zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z" })
    ),
    Object(preact_min["h"])(
        "svg",
        { active: true },
        Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
        Object(preact_min["h"])(
            "g",
            { opacity: ".3" },
            Object(preact_min["h"])("circle", { cx: "9", cy: "9", r: "2" }),
            Object(preact_min["h"])("path", { d: "M9 17c-2.69 0-5.77 1.28-6 2h12c-.2-.71-3.3-2-6-2z" })
        ),
        Object(preact_min["h"])("path", { d: "M9 13c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0-6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm0 8c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm-6 4c.22-.72 3.31-2 6-2 2.7 0 5.8 1.29 6 2H3zM16.76 5.36l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z" })
    )
);

var CFPIcon = function CFPIcon() {
    return cpf__ref;
};

/* harmony default export */ var cpf = (CFPIcon);
// CONCATENATED MODULE: ./components/SVG/Icons/schedule.js


var schedule__ref = Object(preact_min["h"])(
  "div",
  null,
  Object(preact_min["h"])(
    "svg",
    null,
    Object(preact_min["h"])(
      "g",
      null,
      Object(preact_min["h"])("path", { d: "M19,3h-1V2c0-0.55-0.45-1-1-1h0c-0.55,0-1,0.45-1,1v1H8V2c0-0.55-0.45-1-1-1h0C6.45,1,6,1.45,6,2v1H5 C3.89,3,3.01,3.9,3.01,5L3,19c0,1.1,0.89,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M18,19H6c-0.55,0-1-0.45-1-1V8h14v10 C19,18.55,18.55,19,18,19z M8,10h3c0.55,0,1,0.45,1,1v3c0,0.55-0.45,1-1,1H8c-0.55,0-1-0.45-1-1v-3C7,10.45,7.45,10,8,10z" })
    )
  ),
  Object(preact_min["h"])(
    "svg",
    { active: true },
    Object(preact_min["h"])("path", { fill: "none", d: "M0 0h24v24H0V0z" }),
    Object(preact_min["h"])("path", {
      opacity: ".3",
      d: "M19,3h-1V2c0-0.55-0.45-1-1-1h0c-0.55,0-1,0.45-1,1v1H8V2c0-0.55-0.45-1-1-1h0C6.45,1,6,1.45,6,2v1H5 C3.89,3,3.01,3.9,3.01,5L3,19c0,1.1,0.89,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M18,19H6c-0.55,0-1-0.45-1-1V8h14v10 C19,18.55,18.55,19,18,19z M8,10h3c0.55,0,1,0.45,1,1v3c0,0.55-0.45,1-1,1H8c-0.55,0-1-0.45-1-1v-3C7,10.45,7.45,10,8,10z"
    }),
    Object(preact_min["h"])("path", { d: "M19,3h-1V2c0-0.55-0.45-1-1-1h0c-0.55,0-1,0.45-1,1v1H8V2c0-0.55-0.45-1-1-1h0C6.45,1,6,1.45,6,2v1H5 C3.89,3,3.01,3.9,3.01,5L3,19c0,1.1,0.89,2,2,2h14c1.1,0,2-0.9,2-2V5C21,3.9,20.1,3,19,3z M18,19H6c-0.55,0-1-0.45-1-1V8h14v10 C19,18.55,18.55,19,18,19z M8,10h3c0.55,0,1,0.45,1,1v3c0,0.55-0.45,1-1,1H8c-0.55,0-1-0.45-1-1v-3C7,10.45,7.45,10,8,10z" })
  )
);

var schedule_Schedule = function Schedule() {
  return schedule__ref;
};

/* harmony default export */ var Icons_schedule = (schedule_Schedule);
// EXTERNAL MODULE: ./components/navbar/style.css
var navbar_style = __webpack_require__("XUTr");
var navbar_style_default = /*#__PURE__*/__webpack_require__.n(navbar_style);

// CONCATENATED MODULE: ./components/navbar/index.js


function navbar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function navbar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function navbar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }


















var _ref3 = Object(preact_min["h"])(
  'span',
  null,
  'Schedule'
);

var _ref5 = Object(preact_min["h"])(
  'span',
  null,
  'Code of Conduct'
);

var _ref7 = Object(preact_min["h"])(
  'span',
  null,
  'FAQ'
);

var _ref8 = Object(preact_min["h"])(io_logo_IoLogo, null);

var _ref9 = Object(preact_min["h"])(
  'h2',
  null,
  '2019 August 3'
);

var _ref10 = Object(preact_min["h"])(
  'p',
  null,
  'Kolkata, IN'
);

var _ref11 = Object(preact_min["h"])(
  'a',
  { href: 'https://festa.io/events/299', target: '_blank' },
  'Tickets'
);

var _ref14 = Object(preact_min["h"])(home, null);

var _ref15 = Object(preact_min["h"])(
  'span',
  null,
  'Home'
);

var _ref16 = Object(preact_min["h"])(registration, null);

var _ref17 = Object(preact_min["h"])(
  'span',
  null,
  'Tickets'
);

var _ref19 = Object(preact_min["h"])(Icons_schedule, null);

var _ref20 = Object(preact_min["h"])(
  'span',
  null,
  'Schedule'
);

var _ref22 = Object(preact_min["h"])(faq, null);

var _ref23 = Object(preact_min["h"])(
  'span',
  null,
  'FAQ'
);

var navbar_NavBar = function (_Component) {
  navbar__inherits(NavBar, _Component);

  function NavBar() {
    var _temp, _this, _ret;

    navbar__classCallCheck(this, NavBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = navbar__possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.closeDrawer = function () {
      _this.setState({ drawerOpened: false });
    }, _this.openDrawer = function () {
      _this.setState({ drawerOpened: !_this.state.drawerOpened });
    }, _temp), navbar__possibleConstructorReturn(_this, _ret);
  }

  NavBar.prototype.render = function render(_ref) {
    var _this2 = this;

    var rootPath = _ref.rootPath;

    return Object(preact_min["h"])(
      'div',
      null,
      Object(preact_min["h"])(
        'div',
        { 'class': navbar_style_default.a.toolbar },
        Object(preact_min["h"])(
          TopAppBar_default.a,
          { className: 'topappbar' },
          Object(preact_min["h"])(
            TopAppBar_default.a.Row,
            null,
            Object(preact_min["h"])(
              TopAppBar_default.a.Section,
              { 'align-start': true },
              Object(preact_min["h"])(menu, { 'class': navbar_style_default.a.menu_icon, onClick: this.openDrawer })
            ),
            Object(preact_min["h"])(
              'div',
              { 'class': navbar_style_default.a.mobile_title },
              Object(preact_min["h"])(
                match["Match"],
                { path: rootPath + 'schedule' },
                function (_ref2) {
                  var path = _ref2.path;
                  return path.startsWith(rootPath + 'schedule') && _ref3;
                }
              ),
              Object(preact_min["h"])(
                match["Match"],
                { path: rootPath + 'code-of-conduct' },
                function (_ref4) {
                  var path = _ref4.path;
                  return path.startsWith(rootPath + 'code-of-conduct') && _ref5;
                }
              ),
              Object(preact_min["h"])(
                match["Match"],
                { path: rootPath + 'faq' },
                function (_ref6) {
                  var path = _ref6.path;
                  return path.startsWith(rootPath + 'faq') && _ref7;
                }
              )
            )
          )
        )
      ),
      Object(preact_min["h"])(
        Drawer_default.a,
        { modal: true, open: this.state.drawerOpened, onClose: this.closeDrawer },
        Object(preact_min["h"])(
          Drawer_default.a.DrawerContent,
          null,
          Object(preact_min["h"])(
            'div',
            { 'class': navbar_style_default.a.drawer_toolbar },
            _ref8,
            _ref9,
            _ref10
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': navbar_style_default.a.drawer_nav },
            Object(preact_min["h"])(
              match["Link"],
              { activeClassName: navbar_style_default.a.active, href: rootPath, onClick: this.closeDrawer },
              'Home'
            ),
            _ref11,
            Object(preact_min["h"])(
              match["Match"],
              { path: '/schedule' },
              function (_ref12) {
                var path = _ref12.path,
                    url = _ref12.url;
                return Object(preact_min["h"])(
                  match["Link"],
                  {
                    activeClassName: navbar_style_default.a.active,
                    href: rootPath + 'schedule',
                    onClick: _this2.closeDrawer,
                    path: path.startsWith(rootPath + 'schedule/') ? url : undefined
                  },
                  'Schedule'
                );
              }
            ),
            Object(preact_min["h"])(
              match["Match"],
              { path: '/faq' },
              function (_ref13) {
                var path = _ref13.path,
                    url = _ref13.url;
                return Object(preact_min["h"])(
                  match["Link"],
                  {
                    activeClassName: navbar_style_default.a.active,
                    href: rootPath + 'faq',
                    onClick: _this2.closeDrawer,
                    path: path.startsWith(rootPath + 'faq/') ? url : undefined
                  },
                  'FAQ'
                );
              }
            )
          )
        )
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': navbar_style_default.a.navbar },
        Object(preact_min["h"])(
          'div',
          { 'class': navbar_style_default.a.hamburger },
          Object(preact_min["h"])(menu, { 'class': navbar_style_default.a.menu_icon, onClick: this.openDrawer })
        ),
        Object(preact_min["h"])(
          'nav',
          null,
          Object(preact_min["h"])(
            match["Link"],
            { activeClassName: navbar_style_default.a.active, 'class': navbar_style_default.a.nav_item, href: rootPath },
            _ref14,
            _ref15
          ),
          Object(preact_min["h"])(
            'a',
            { 'class': navbar_style_default.a.nav_item, href: 'https://festa.io/events/299', target: '_blank' },
            _ref16,
            _ref17
          ),
          Object(preact_min["h"])(
            match["Match"],
            { path: '/schedule' },
            function (_ref18) {
              var path = _ref18.path,
                  url = _ref18.url;
              return Object(preact_min["h"])(
                match["Link"],
                {
                  activeClassName: navbar_style_default.a.active,
                  'class': navbar_style_default.a.nav_item,
                  href: rootPath + 'schedule',
                  path: path.startsWith(rootPath + 'schedule/') ? url : undefined
                },
                _ref19,
                _ref20
              );
            }
          ),
          Object(preact_min["h"])(
            match["Match"],
            { path: '/faq' },
            function (_ref21) {
              var path = _ref21.path,
                  url = _ref21.url;
              return Object(preact_min["h"])(
                match["Link"],
                {
                  activeClassName: navbar_style_default.a.active,
                  'class': navbar_style_default.a.nav_item,
                  href: rootPath + 'faq',
                  path: path.startsWith(rootPath + 'faq/') ? url : undefined
                },
                _ref22,
                _ref23
              );
            }
          ),
          Object(preact_min["h"])('div', { 'class': navbar_style_default.a.line })
        )
      )
    );
  };

  return NavBar;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./components/social_footer/style.css
var social_footer_style = __webpack_require__("7LhK");
var social_footer_style_default = /*#__PURE__*/__webpack_require__.n(social_footer_style);

// CONCATENATED MODULE: ./components/social_footer/index.js


function social_footer__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function social_footer__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function social_footer__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var social_footer__ref2 = Object(preact_min["h"])(
  'p',
  null,
  '\uC628\uB77C\uC778\uC5D0\uC11C GDG\uB97C \uB9CC\uB098\uBCF4\uC138\uC694!'
);

var social_footer__ref3 = Object(preact_min["h"])(
  'div',
  null,
  Object(preact_min["h"])(
    'a',
    {
      href: 'https://www.facebook.com/groups/gdgseoul/',
      target: '_blank',
      rel: 'noopener noreferrer'
    },
    Object(preact_min["h"])(
      'svg',
      { width: '40', height: '40', viewBox: '0 0 40 40', xmlns: 'http://www.w3.org/2000/svg' },
      Object(preact_min["h"])(
        'title',
        null,
        'GDG Seoul Facebook Group'
      ),
      Object(preact_min["h"])(
        'g',
        { fill: 'none', 'fill-rule': 'evenodd', transform: 'translate(-52)' },
        Object(preact_min["h"])(
          'g',
          { transform: 'translate(52)', fill: '#1a73e8' },
          Object(preact_min["h"])('path', { d: 'M17.1766667,30.88 L21.6726667,30.88 L21.6726667,19.9986667 L24.672,19.9986667 L25.0693333,16.2493333 L21.6726667,16.2493333 L21.6773333,14.372 C21.6773333,13.3946667 21.7706667,12.87 23.1733333,12.87 L25.048,12.87 L25.048,9.12 L22.048,9.12 C18.4446667,9.12 17.1766667,10.9393333 17.1766667,13.998 L17.1766667,16.2493333 L14.9306667,16.2493333 L14.9306667,19.9993333 L17.1766667,19.9993333 L17.1766667,30.88 L17.1766667,30.88 Z M20,40 C8.95466667,40 0,31.0453333 0,20 C0,8.954 8.95466667,0 20,0 C31.0453333,0 40,8.954 40,20 C40,31.0453333 31.0453333,40 20,40 Z' })
        )
      )
    )
  ),
  Object(preact_min["h"])(
    'a',
    {
      href: 'https://www.meetup.com/ko-KR/GDG-Seoul/',
      target: '_blank',
      rel: 'noopener noreferrer'
    },
    Object(preact_min["h"])(
      'svg',
      { xmlns: 'http://www.w3.org/2000/svg', width: '40', height: '40', viewBox: '0 0 40 40' },
      Object(preact_min["h"])(
        'title',
        null,
        'GDG Seoul Meetup'
      ),
      Object(preact_min["h"])('circle', { fill: '#1a73e8', cx: '20', cy: '20', r: '20' }),
      Object(preact_min["h"])('path', {
        fill: '#fff',
        d: 'M32,28.24c-.31-1.93-3.88-.45-4.1-2.56-.31-3,4.15-9.46,3.8-12A2.92,2.92,0,0,0,28.51,11a3.09,3.09,0,0,0-2.05.44.79.79,0,0,1-1.12,0,11.49,11.49,0,0,0-.9-.82,1.84,1.84,0,0,0-1-.4A3.09,3.09,0,0,0,22,10.3a3.89,3.89,0,0,0-1,.75c-.33.28-1.15,1.2-1.92.86-.33-.15-1.45-.71-2.27-1.06-1.56-.68-3.82.42-4.63,1.87-1.22,2.15-3.6,10.6-4,11.71a3.32,3.32,0,0,0,3.51,4.43,2.61,2.61,0,0,0,2.41-1.64c.39-.69,4-10.09,4.25-10.54a1.17,1.17,0,0,1,1.39-.48,1.27,1.27,0,0,1,.58,1.42c-.13.9-2.67,6.63-2.77,7.28-.16,1.1.36,1.71,1.51,1.77a2.2,2.2,0,0,0,2.18-1.41c.35-.65,4.35-8.67,4.7-9.2s.71-.78,1.11-.76.8.1.68,1-3.35,6.78-3.68,8.22a4.26,4.26,0,0,0,2.34,4.73C27.51,29.81,32.37,30.74,32,28.24Z'
      })
    )
  ),
  Object(preact_min["h"])(
    'a',
    { href: 'https://gdgkr.slack.com/', target: '_blank', rel: 'noopener noreferrer' },
    Object(preact_min["h"])(
      'svg',
      { xmlns: 'http://www.w3.org/2000/svg', width: '40', height: '40', viewBox: '0 0 24 24' },
      Object(preact_min["h"])(
        'title',
        null,
        'GDG Korea Slack'
      ),
      Object(preact_min["h"])('circle', { fill: '#1a73e8', cx: '12', cy: '12', r: '12' }),
      Object(preact_min["h"])('path', {
        fill: '#fff',
        d: 'M18.82,14.06l-1.55.52.54,1.61A1.24,1.24,0,0,1,17,17.76,1.24,1.24,0,0,1,15.43,17l-.54-1.61-3.21,1.07.54,1.61a1.25,1.25,0,0,1-.79,1.58,1.34,1.34,0,0,1-.44.06,1.25,1.25,0,0,1-1.15-.85L9.3,17.22l-1.56.53a1.67,1.67,0,0,1-.44.06A1.28,1.28,0,0,1,6.15,17a1.22,1.22,0,0,1,.78-1.57l1.56-.53-1-3.09L6,12.29a1.07,1.07,0,0,1-.43.06,1.24,1.24,0,0,1-1.14-.84,1.26,1.26,0,0,1,.8-1.58l1.56-.52L6.2,7.81A1.25,1.25,0,0,1,8.57,7l.54,1.61L12.3,7.55l-.54-1.61a1.26,1.26,0,0,1,.79-1.57,1.24,1.24,0,0,1,1.57.79l.54,1.62,1.56-.51A1.24,1.24,0,0,1,17,8.63l-1.56.52,1,3.09L18,11.72a1.25,1.25,0,0,1,.8,2.37Z'
      }),
      Object(preact_min["h"])('path', { fill: '#1a73e8', d: 'M9.88,11l1,3.08L14.12,13l-1-3.07L9.88,11Z' })
    )
  )
);

var _ref4 = Object(preact_min["h"])('img', {
  crossorigin: 'anonymous',
  alt: 'I/O 2019 Hashtag',
  src: 'https://res.cloudinary.com/limhenry/image/upload/v1555595550/ioxkl19_pwa/io19_hashtag.gif'
});

var social_footer_SocialFooter = function (_Component) {
  social_footer__inherits(SocialFooter, _Component);

  function SocialFooter() {
    social_footer__classCallCheck(this, SocialFooter);

    return social_footer__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  SocialFooter.prototype.render = function render(_ref) {
    var rootPath = _ref.rootPath;

    return Object(preact_min["h"])(
      'div',
      { 'class': social_footer_style_default.a.social_footer },
      Object(preact_min["h"])(
        'div',
        { 'class': social_footer_style_default.a.social_body },
        social_footer__ref2,
        social_footer__ref3
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': social_footer_style_default.a.social_gif },
        _ref4
      )
    );
  };

  return SocialFooter;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./components/footer/style.css
var footer_style = __webpack_require__("ZMjw");
var footer_style_default = /*#__PURE__*/__webpack_require__.n(footer_style);

// CONCATENATED MODULE: ./components/footer/index.js


function footer__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function footer__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function footer__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var footer__ref2 = Object(preact_min["h"])('img', { alt: 'GDG Seoul Logo', src: '/assets/images/gdg-seoul-logo.png' });

var footer__ref3 = Object(preact_min["h"])(
  'a',
  { href: 'https://festa.io/events/299', target: '_blank' },
  '\uCC38\uAC00\uD558\uAE30'
);

var footer__ref4 = Object(preact_min["h"])(
  'a',
  { href: 'https://io-extended-seoul-18.firebaseapp.com/', target: '_blank' },
  'I/O Extended Seoul 2018'
);

var footer_Footer = function (_Component) {
  footer__inherits(Footer, _Component);

  function Footer() {
    footer__classCallCheck(this, Footer);

    return footer__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Footer.prototype.render = function render(_ref) {
    var rootPath = _ref.rootPath;

    return Object(preact_min["h"])(
      'div',
      { 'class': footer_style_default.a.footer },
      Object(preact_min["h"])(
        'div',
        { 'class': footer_style_default.a.footer_logo },
        footer__ref2
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': footer_style_default.a.footer_links },
        Object(preact_min["h"])(
          'div',
          { 'class': footer_style_default.a.footer_link },
          footer__ref3,
          Object(preact_min["h"])(
            'a',
            { href: rootPath + 'scehdule' },
            '\uD589\uC0AC\uC77C\uC815'
          ),
          footer__ref4
        )
      )
    );
  };

  return Footer;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./components/gallery_block/style.css
var gallery_block_style = __webpack_require__("Ci/U");
var gallery_block_style_default = /*#__PURE__*/__webpack_require__.n(gallery_block_style);

// CONCATENATED MODULE: ./components/gallery_block/index.js


function gallery_block__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function gallery_block__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function gallery_block__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Oleh Zasadnyy, GDG Lviv
 * Source: https://github.com/gdg-x/hoverboard
 */




var gallery_block__ref = Object(preact_min["h"])(
  'div',
  null,
  Object(preact_min["h"])(
    'h2',
    null,
    'I/O Extended 2018 Seoul \uD604\uC7A5 \uC2A4\uCF00\uCE58'
  ),
  Object(preact_min["h"])(
    'p',
    null,
    '\uC791\uB144 \uB728\uAC70\uC6E0\uB358 I/O Extended 2018 Seoul \uD604\uC7A5\uC758 \uC5F4\uAE30\uB97C \uC0AC\uC9C4\uC73C\uB85C \uD655\uC778\uD574\uBCF4\uC138\uC694.'
  )
);

var gallery_block_GalleryBlock = function (_Component) {
  gallery_block__inherits(GalleryBlock, _Component);

  function GalleryBlock() {
    gallery_block__classCallCheck(this, GalleryBlock);

    return gallery_block__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  GalleryBlock.prototype.render = function render() {
    return Object(preact_min["h"])(
      'div',
      { 'class': gallery_block_style_default.a.photos_grid },
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-1.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-2.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-3.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-4.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-5.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-6.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-7.jpg' }),
      Object(preact_min["h"])('img', { 'class': gallery_block_style_default.a.grid_item, src: '/assets/images/highlight-8.jpg' }),
      Object(preact_min["h"])(
        'div',
        { 'class': gallery_block_style_default.a.gallery_info },
        gallery_block__ref
      )
    );
  };

  return GalleryBlock;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/Countdown/bodymovinAnimationData.js
var ANIMATIONS = {
	nine: {
		v: '5.4.3',
		fr: 30,
		ip: 0,
		op: 300,
		w: 135,
		h: 195,
		nm: '.9-0',
		ddd: 0,
		assets: [{
			id: 'comp_0',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-61, 97, 0],
							e: [69, 97, 0],
							to: [21.6666660308838, 0, 0],
							ti: [-21.6666660308838, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [-61, 97, 0],
							to: [-21.6666660308838, 0, 0],
							ti: [21.6666660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 31.5, 0],
							e: [69, 97, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, {
							i: { x: 0.629, y: 0.629 },
							o: { x: 0.912, y: 0.912 },
							n: '0p629_0p629_0p912_0p912',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [69, 31.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-0 .lightstroke',
				cl: 'number-0 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -34.875], [-3.939, -93.875], [57.51, -34.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_1',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-1',
				cl: 'number-1',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-1 .darkfill',
				cl: 'number-1 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [34.5, 162, 0],
							e: [34.5, 96.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [34.5, 96.5, 0],
							e: [34.5, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [34.5, 96.5, 0],
							e: [34.5, 162, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [-9.065, -74.875], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-1 .lightstroke',
				cl: 'number-1 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.85, 93.625], [-1.85, -29.375], [57.15, -29.375], [57.15, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.996078431373, 0.937254901961, 0.764705882353, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 6, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_2',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.833, y: 0.833 },
							o: { x: 0.167, y: 0.167 },
							n: '0p833_0p833_0p167_0p167',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, { t: 30 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-2 .darkfill',
				cl: 'number-2 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.271, y: 0.895 },
							o: { x: 0.912, y: 0 },
							n: '0p271_0p895_0p912_0',
							t: 0,
							s: [69, 29, 0],
							e: [69, 94.843, 0],
							to: [0, 10.7926044464111, 0],
							ti: [0, -11.9904975891113, 0]
						}, {
							i: { x: 0.629, y: 1 },
							o: { x: 0.138, y: 1 },
							n: '0p629_1_0p138_1',
							t: 13,
							s: [69, 94.843, 0],
							e: [69, 95, 0],
							to: [0, 0.23041497170925, 0],
							ti: [0, -0.20739570260048, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 95, 0],
							e: [69, 29, 0],
							to: [0, -11, 0],
							ti: [0, 11, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-2 .lightfill',
				cl: 'number-2 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-58.5, 94, 0],
							e: [70, 94, 0],
							to: [21.4166660308838, 0, 0],
							ti: [-21.4166660308838, 0, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [70, 94, 0],
							e: [70, 94, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [70, 94, 0],
							e: [-58.5, 94, 0],
							to: [-21.4166660308838, 0, 0],
							ti: [21.4166660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-2 .darkstroke',
				cl: 'number-2 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-63.429, 30.125], [-26.554, -28.875], [-6.439, -28.875], [-6.439, 30.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-2 .lightstroke',
				cl: 'number-2 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -33.875], [-3.939, -92.875], [57.51, -33.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_3',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-3 .darkstroke',
				cl: 'number-3 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [73.5, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.439, 30.125], [-1.439, -28.875], [57.561, -28.875], [57.561, 30.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.658823549747, 0.854901969433, 0.709803938866, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-3',
				cl: 'number-3',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [73.5, 32, 0],
							e: [73.5, 97, 0],
							to: [0, 10.8333330154419, 0],
							ti: [0, -10.8333330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [73.5, 97, 0],
							e: [73.5, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [73.5, 97, 0],
							e: [73.5, 32, 0],
							to: [0, -10.8333330154419, 0],
							ti: [0, 10.8333330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 96.625], [60.061, 32.625], [-67.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-3 .lightfill',
				cl: 'number-3 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [74, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 96.625], [60.061, 32.625], [-67.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-3',
				cl: 'number-3',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [74, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [-17.673, 0], [0, 0]],
								o: [[0, 17.673], [0, 0], [-17.673, 0]],
								v: [[-35.939, 0.625], [-3.939, 32.625], [-3.939, -31.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-3 .darkfill',
				cl: 'number-3 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [108.5, 97, 0],
							e: [73.5, 97, 0],
							to: [-5.83333349227905, 0, 0],
							ti: [5.83333349227905, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [73.5, 97, 0],
							e: [73.5, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [73.5, 97, 0],
							e: [108.5, 97, 0],
							to: [5.83333349227905, 0, 0],
							ti: [-5.83333349227905, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [-17.673, 0], [0, 0]],
								o: [[0, 17.673], [0, 0], [-17.673, 0]],
								v: [[-35.939, 0.625], [-3.939, 32.625], [-3.939, -31.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-3 .lightstroke',
				cl: 'number-3 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [73.5, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -33.875], [-3.939, -92.875], [57.51, -33.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_4',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-4',
				cl: 'number-4',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-4 .darkfill',
				cl: 'number-4 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [3, 96.5, 0],
							e: [68, 96.5, 0],
							to: [10.8333330154419, 0, 0],
							ti: [-10.8333330154419, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [68, 96.5, 0],
							e: [68, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [68, 96.5, 0],
							e: [3, 96.5, 0],
							to: [-10.8333330154419, 0, 0],
							ti: [10.8333330154419, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-4 .lightstroke',
				cl: 'number-4 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-65.439, 29.625], [-65.439, -54.489], [-6.439, -91.364], [-6.439, 29.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.980392158031, 0.823529422283, 0.811764717102, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-4 .darkstroke',
				cl: 'number-4 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.439, 93.625], [-1.439, 34.625], [57.561, 34.625], [57.561, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.980392158031, 0.823529422283, 0.811764717102, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-4 .darkfill',
				cl: 'number-4 darkfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 32.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-4 .lightfill',
				cl: 'number-4 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [68, 160, 0],
							e: [68, 96.5, 0],
							to: [0, -10.5833330154419, 0],
							ti: [0, 10.5833330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [68, 96.5, 0],
							e: [68, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [68, 96.5, 0],
							e: [68, 160, 0],
							to: [0, 10.5833330154419, 0],
							ti: [0, -10.5833330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [17.673, 0], [0, 17.673], [-17.673, 0]],
								o: [[0, 17.673], [-17.673, 0], [0, -17.673], [17.673, 0]],
								v: [[60.061, -63.875], [28.061, -31.875], [-3.939, -63.875], [28.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.988235294819, 0.909803926945, 0.901960790157, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_5',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-5 .lightstroke',
				cl: 'number-5 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[16.266, 0], [0, 16.266], [-16.266, 0], [0, -16.266]],
								o: [[-16.266, 0], [0, -16.266], [16.266, 0], [0, 16.266]],
								v: [[-35.939, 93.625], [-65.439, 64.125], [-35.939, 34.625], [-6.439, 64.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-5',
				cl: 'number-5',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [65.061, 34.125, 0], ix: 2 },
					a: { a: 0, k: [-3.939, -63.875, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-5 .lightfill',
				cl: 'number-5 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-61, 97.5, 0],
							e: [69, 97.5, 0],
							to: [21.6666660308838, 0, 0],
							ti: [-21.6666660308838, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [-61, 97.5, 0],
							to: [-21.6666660308838, 0, 0],
							ti: [21.6666660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-5 .darkstroke',
				cl: 'number-5 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, -33.073], [32.755, -1.317]],
								o: [[32.755, 1.317], [0, 33.073], [0, 0]],
								v: [[-1.439, -29.325], [57.561, 32.125], [-1.439, 93.575]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-5',
				cl: 'number-5',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.833, y: 0.833 },
							o: { x: 0.167, y: 0.167 },
							n: '0p833_0p833_0p167_0p167',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, { t: 30 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [-67.939, -7.875], [-67.939, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-5 .darkfill',
				cl: 'number-5 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 32.5, 0],
							e: [69, 97.5, 0],
							to: [0, 10.8333330154419, 0],
							ti: [0, -10.8333330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [69, 32.5, 0],
							to: [0, -10.8333330154419, 0],
							ti: [0, 10.8333330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [-67.939, -7.875], [-67.939, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_6',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-6',
				cl: 'number-6',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.688, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[35.346, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, -35.346]],
								v: [[-3.939, -32.375], [-3.939, 31.625], [60.061, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-6 .darkfill',
				cl: 'number-6 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [2, 97.75, 0],
							e: [69, 97.75, 0],
							to: [11.1666669845581, 0, 0],
							ti: [-11.1666669845581, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.75, 0],
							e: [69, 97.75, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.75, 0],
							e: [2, 97.75, 0],
							to: [-11.1666669845581, 0, 0],
							ti: [11.1666669845581, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[35.346, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, -35.346]],
								v: [[-3.939, -32.375], [-3.939, 31.625], [60.061, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-6',
				cl: 'number-6',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-6 .lightfill',
				cl: 'number-6 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 31.5, 0],
							e: [69, 97.5, 0],
							to: [0, 11, 0],
							ti: [0, -11, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [69, 31.5, 0],
							to: [0, -11, 0],
							ti: [0, 11, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-6 .darkstroke',
				cl: 'number-6 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [-32.755, 1.317], [0, 0]],
								o: [[0, 0], [0, -33.073], [0, 0], [0, 0]],
								v: [[-65.439, 29.125], [-65.439, -32.375], [-6.439, -93.825], [-6.439, 29.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.658823549747, 0.854901969433, 0.709803938866, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-6 .lightstroke',
				cl: 'number-6 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[16.266, 0], [0, 16.266], [-16.266, 0], [0, -16.266]],
								o: [[-16.266, 0], [0, -16.266], [16.266, 0], [0, 16.266]],
								v: [[28.061, -34.875], [-1.439, -64.375], [28.061, -93.875], [57.561, -64.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_7',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-7 .lightstroke',
				cl: 'number-7 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69.5, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-65.439, 93.625], [-65.439, 9.511], [-6.439, -27.364], [-6.439, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.980392158031, 0.823529422283, 0.811764717102, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-7',
				cl: 'number-7',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.875], [-3.939, -31.875], [-3.939, 32.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-7 .darkfill',
				cl: 'number-7 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [4, 97, 0],
							e: [69, 97, 0],
							to: [10.8333330154419, 0, 0],
							ti: [-10.8333330154419, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [4, 97, 0],
							to: [-10.8333330154419, 0, 0],
							ti: [10.8333330154419, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.875], [-3.939, -31.875], [-3.939, 32.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-7',
				cl: 'number-7',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.988235294819, 0.909803926945, 0.901960790157, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-7 .lightfill',
				cl: 'number-7 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [200, 97, 0],
							e: [69, 97, 0],
							to: [-21.8333339691162, 0, 0],
							ti: [21.8333339691162, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [200, 97, 0],
							to: [21.8333339691162, 0, 0],
							ti: [-21.8333339691162, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.988235294819, 0.909803926945, 0.901960790157, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_8',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-8',
				cl: 'number-8',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 94.875], [60.061, 30.875], [-67.939, 30.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-8 .darkfill',
				cl: 'number-8 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 31.5, 0],
							e: [69, 97.5, 0],
							to: [0, 11, 0],
							ti: [0, -11, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [69, 31.5, 0],
							to: [0, -11, 0],
							ti: [0, 11, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 94.875], [60.061, 30.875], [-67.939, 30.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-8 .darkstroke',
				cl: 'number-8 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, 28.375], [-3.939, -30.625], [57.51, 28.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-8',
				cl: 'number-8',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[35.346, 0], [0, -35.346], [0, 0]],
								o: [[-35.346, 0], [0, 0], [0, -35.346]],
								v: [[-3.939, -97.125], [-67.939, -33.125], [60.061, -33.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-8 .lightfill',
				cl: 'number-8 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 167.5, 0],
							e: [69, 97.5, 0],
							to: [0, -11.6666669845581, 0],
							ti: [0, 11.6666669845581, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [69, 167.5, 0],
							to: [0, 11.6666669845581, 0],
							ti: [0, -11.6666669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[35.346, 0], [0, -35.346], [0, 0]],
								o: [[-35.346, 0], [0, 0], [0, -35.346]],
								v: [[-3.939, -97.125], [-67.939, -33.125], [60.061, -33.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_9',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-9 .lightstroke',
				cl: 'number-9 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68.5, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.939, 93.625], [-1.939, -91.364], [57.061, -54.489], [57.061, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.992156863213, 0.929411768913, 0.772549033165, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 6, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-9',
				cl: 'number-9',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69.5, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -35.346], [-35.346, 0], [0, 0]],
								o: [[0, 35.346], [0, 0], [-35.346, 0]],
								v: [[-68.44, -31.875], [-4.44, 32.125], [-4.44, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.972549021244, 0.721568644047, 0.223529413342, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-9 .darkfill',
				cl: 'number-9 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [138.5, 97.5, 0],
							e: [68.5, 97.5, 0],
							to: [-11.6666669845581, 0, 0],
							ti: [11.6666669845581, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [68.5, 97.5, 0],
							e: [68.5, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [68.5, 97.5, 0],
							e: [138.5, 97.5, 0],
							to: [11.6666669845581, 0, 0],
							ti: [-11.6666669845581, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -35.346], [-35.346, 0], [0, 0]],
								o: [[0, 35.346], [0, 0], [-35.346, 0]],
								v: [[-68.44, -31.875], [-4.44, 32.125], [-4.44, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.972549021244, 0.721568644047, 0.223529413342, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}],
		layers: [{
			ddd: 0,
			ind: 1,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 285,
			op: 330,
			st: 285,
			bm: 0
		}, {
			ddd: 0,
			ind: 2,
			ty: 0,
			nm: '01',
			refId: 'comp_1',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97, 0], ix: 2 },
				a: { a: 0, k: [47.5, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 95,
			h: 193,
			ip: 255,
			op: 300,
			st: 255,
			bm: 0
		}, {
			ddd: 0,
			ind: 3,
			ty: 0,
			nm: '02',
			refId: 'comp_2',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 99, 0], ix: 2 },
				a: { a: 0, k: [65, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 193,
			ip: 225,
			op: 270,
			st: 225,
			bm: 0
		}, {
			ddd: 0,
			ind: 4,
			ty: 0,
			nm: '03',
			refId: 'comp_3',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [70, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 140,
			h: 194,
			ip: 195,
			op: 240,
			st: 195,
			bm: 0
		}, {
			ddd: 0,
			ind: 5,
			ty: 0,
			nm: '04',
			refId: 'comp_4',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 193,
			ip: 165,
			op: 210,
			st: 165,
			bm: 0
		}, {
			ddd: 0,
			ind: 6,
			ty: 0,
			nm: '05',
			refId: 'comp_5',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 195,
			ip: 135,
			op: 180,
			st: 135,
			bm: 0
		}, {
			ddd: 0,
			ind: 7,
			ty: 0,
			nm: '06',
			refId: 'comp_6',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 195,
			ip: 105,
			op: 150,
			st: 105,
			bm: 0
		}, {
			ddd: 0,
			ind: 8,
			ty: 0,
			nm: '07',
			refId: 'comp_7',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 75,
			op: 120,
			st: 75,
			bm: 0
		}, {
			ddd: 0,
			ind: 9,
			ty: 0,
			nm: '08',
			refId: 'comp_8',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 195,
			ip: 45,
			op: 90,
			st: 45,
			bm: 0
		}, {
			ddd: 0,
			ind: 10,
			ty: 0,
			nm: '09',
			refId: 'comp_9',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 195,
			ip: 15,
			op: 60,
			st: 15,
			bm: 0
		}, {
			ddd: 0,
			ind: 11,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: -15,
			op: 30,
			st: -15,
			bm: 0
		}],
		markers: [{ tm: 15, cm: '1', dr: 0 }, { tm: 30, cm: '2', dr: 0 }]
	},
	five: {
		v: '5.4.3',
		fr: 30,
		ip: 0,
		op: 180,
		w: 135,
		h: 195,
		nm: '.5-0',
		ddd: 0,
		assets: [{
			id: 'comp_0',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-61, 97, 0],
							e: [69, 97, 0],
							to: [21.6666660308838, 0, 0],
							ti: [-21.6666660308838, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [-61, 97, 0],
							to: [-21.6666660308838, 0, 0],
							ti: [21.6666660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 31.5, 0],
							e: [69, 97, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, {
							i: { x: 0.629, y: 0.629 },
							o: { x: 0.912, y: 0.912 },
							n: '0p629_0p629_0p912_0p912',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [69, 31.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-0 .lightstroke',
				cl: 'number-0 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -34.875], [-3.939, -93.875], [57.51, -34.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_1',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-1',
				cl: 'number-1',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-1 .darkfill',
				cl: 'number-1 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [34.5, 162, 0],
							e: [34.5, 96.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [34.5, 96.5, 0],
							e: [34.5, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [34.5, 96.5, 0],
							e: [34.5, 162, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [-9.065, -74.875], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-1 .lightstroke',
				cl: 'number-1 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.85, 93.625], [-1.85, -29.375], [57.15, -29.375], [57.15, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.996078431373, 0.937254901961, 0.764705882353, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 6, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_2',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.833, y: 0.833 },
							o: { x: 0.167, y: 0.167 },
							n: '0p833_0p833_0p167_0p167',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, { t: 30 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-2 .darkfill',
				cl: 'number-2 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.271, y: 0.895 },
							o: { x: 0.912, y: 0 },
							n: '0p271_0p895_0p912_0',
							t: 0,
							s: [69, 29, 0],
							e: [69, 94.843, 0],
							to: [0, 10.7926044464111, 0],
							ti: [0, -11.9904975891113, 0]
						}, {
							i: { x: 0.629, y: 1 },
							o: { x: 0.138, y: 1 },
							n: '0p629_1_0p138_1',
							t: 13,
							s: [69, 94.843, 0],
							e: [69, 95, 0],
							to: [0, 0.23041497170925, 0],
							ti: [0, -0.20739570260048, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 95, 0],
							e: [69, 29, 0],
							to: [0, -11, 0],
							ti: [0, 11, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-2 .lightfill',
				cl: 'number-2 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-58.5, 94, 0],
							e: [70, 94, 0],
							to: [21.4166660308838, 0, 0],
							ti: [-21.4166660308838, 0, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [70, 94, 0],
							e: [70, 94, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [70, 94, 0],
							e: [-58.5, 94, 0],
							to: [-21.4166660308838, 0, 0],
							ti: [21.4166660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-2 .darkstroke',
				cl: 'number-2 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-63.429, 30.125], [-26.554, -28.875], [-6.439, -28.875], [-6.439, 30.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-2 .lightstroke',
				cl: 'number-2 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -33.875], [-3.939, -92.875], [57.51, -33.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_3',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-3 .darkstroke',
				cl: 'number-3 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [73.5, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.439, 30.125], [-1.439, -28.875], [57.561, -28.875], [57.561, 30.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.658823549747, 0.854901969433, 0.709803938866, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-3',
				cl: 'number-3',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [73.5, 32, 0],
							e: [73.5, 97, 0],
							to: [0, 10.8333330154419, 0],
							ti: [0, -10.8333330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [73.5, 97, 0],
							e: [73.5, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [73.5, 97, 0],
							e: [73.5, 32, 0],
							to: [0, -10.8333330154419, 0],
							ti: [0, 10.8333330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 96.625], [60.061, 32.625], [-67.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-3 .lightfill',
				cl: 'number-3 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [74, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 96.625], [60.061, 32.625], [-67.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-3',
				cl: 'number-3',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [74, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [-17.673, 0], [0, 0]],
								o: [[0, 17.673], [0, 0], [-17.673, 0]],
								v: [[-35.939, 0.625], [-3.939, 32.625], [-3.939, -31.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-3 .darkfill',
				cl: 'number-3 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [108.5, 97, 0],
							e: [73.5, 97, 0],
							to: [-5.83333349227905, 0, 0],
							ti: [5.83333349227905, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [73.5, 97, 0],
							e: [73.5, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [73.5, 97, 0],
							e: [108.5, 97, 0],
							to: [5.83333349227905, 0, 0],
							ti: [-5.83333349227905, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [-17.673, 0], [0, 0]],
								o: [[0, 17.673], [0, 0], [-17.673, 0]],
								v: [[-35.939, 0.625], [-3.939, 32.625], [-3.939, -31.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-3 .lightstroke',
				cl: 'number-3 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [73.5, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -33.875], [-3.939, -92.875], [57.51, -33.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_4',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-4',
				cl: 'number-4',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-4 .darkfill',
				cl: 'number-4 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [3, 96.5, 0],
							e: [68, 96.5, 0],
							to: [10.8333330154419, 0, 0],
							ti: [-10.8333330154419, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [68, 96.5, 0],
							e: [68, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [68, 96.5, 0],
							e: [3, 96.5, 0],
							to: [-10.8333330154419, 0, 0],
							ti: [10.8333330154419, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-4 .lightstroke',
				cl: 'number-4 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-65.439, 29.625], [-65.439, -54.489], [-6.439, -91.364], [-6.439, 29.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.980392158031, 0.823529422283, 0.811764717102, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-4 .darkstroke',
				cl: 'number-4 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.439, 93.625], [-1.439, 34.625], [57.561, 34.625], [57.561, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.980392158031, 0.823529422283, 0.811764717102, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-4 .darkfill',
				cl: 'number-4 darkfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [68, 32.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [60.061, 32.125], [60.061, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.898039221764, 0.266666680574, 0.247058823705, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-4 .lightfill',
				cl: 'number-4 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [68, 160, 0],
							e: [68, 96.5, 0],
							to: [0, -10.5833330154419, 0],
							ti: [0, 10.5833330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [68, 96.5, 0],
							e: [68, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [68, 96.5, 0],
							e: [68, 160, 0],
							to: [0, 10.5833330154419, 0],
							ti: [0, -10.5833330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, -17.673], [17.673, 0], [0, 17.673], [-17.673, 0]],
								o: [[0, 17.673], [-17.673, 0], [0, -17.673], [17.673, 0]],
								v: [[60.061, -63.875], [28.061, -31.875], [-3.939, -63.875], [28.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.988235294819, 0.909803926945, 0.901960790157, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_5',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-5 .lightstroke',
				cl: 'number-5 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[16.266, 0], [0, 16.266], [-16.266, 0], [0, -16.266]],
								o: [[-16.266, 0], [0, -16.266], [16.266, 0], [0, 16.266]],
								v: [[-35.939, 93.625], [-65.439, 64.125], [-35.939, 34.625], [-6.439, 64.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-5',
				cl: 'number-5',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [65.061, 34.125, 0], ix: 2 },
					a: { a: 0, k: [-3.939, -63.875, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-5 .lightfill',
				cl: 'number-5 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-61, 97.5, 0],
							e: [69, 97.5, 0],
							to: [21.6666660308838, 0, 0],
							ti: [-21.6666660308838, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [-61, 97.5, 0],
							to: [-21.6666660308838, 0, 0],
							ti: [21.6666660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, -31.875], [-67.939, -31.875], [-67.939, -95.875], [60.061, -95.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-5 .darkstroke',
				cl: 'number-5 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, -33.073], [32.755, -1.317]],
								o: [[32.755, 1.317], [0, 33.073], [0, 0]],
								v: [[-1.439, -29.325], [57.561, 32.125], [-1.439, 93.575]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-5',
				cl: 'number-5',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.833, y: 0.833 },
							o: { x: 0.167, y: 0.167 },
							n: '0p833_0p833_0p167_0p167',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, { t: 30 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [-67.939, -7.875], [-67.939, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-5 .darkfill',
				cl: 'number-5 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 32.5, 0],
							e: [69, 97.5, 0],
							to: [0, 10.8333330154419, 0],
							ti: [0, -10.8333330154419, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97.5, 0],
							e: [69, 97.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97.5, 0],
							e: [69, 32.5, 0],
							to: [0, -10.8333330154419, 0],
							ti: [0, 10.8333330154419, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-3.939, 32.125], [-67.939, -7.875], [-67.939, -31.875], [-3.939, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}],
		layers: [{
			ddd: 0,
			ind: 1,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 165,
			op: 180,
			st: 165,
			bm: 0
		}, {
			ddd: 0,
			ind: 2,
			ty: 0,
			nm: '01',
			refId: 'comp_1',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [47.5, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 95,
			h: 193,
			ip: 135,
			op: 180,
			st: 135,
			bm: 0
		}, {
			ddd: 0,
			ind: 3,
			ty: 0,
			nm: '02',
			refId: 'comp_2',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 193,
			ip: 105,
			op: 150,
			st: 105,
			bm: 0
		}, {
			ddd: 0,
			ind: 4,
			ty: 0,
			nm: '03',
			refId: 'comp_3',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [70, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 140,
			h: 194,
			ip: 75,
			op: 120,
			st: 75,
			bm: 0
		}, {
			ddd: 0,
			ind: 5,
			ty: 0,
			nm: '04',
			refId: 'comp_4',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 193,
			ip: 45,
			op: 90,
			st: 45,
			bm: 0
		}, {
			ddd: 0,
			ind: 6,
			ty: 0,
			nm: '05',
			refId: 'comp_5',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 195,
			ip: 15,
			op: 60,
			st: 15,
			bm: 0
		}, {
			ddd: 0,
			ind: 7,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 0,
			op: 30,
			st: -15,
			bm: 0
		}],
		markers: [{ tm: 15, cm: '1', dr: 0 }, { tm: 30, cm: '2', dr: 0 }]
	},
	two: {
		v: '5.4.3',
		fr: 30,
		ip: 0,
		op: 90,
		w: 135,
		h: 195,
		nm: '.2-0',
		ddd: 0,
		assets: [{
			id: 'comp_0',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-0 .darkfill',
				cl: 'number-0 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-61, 97, 0],
							e: [69, 97, 0],
							to: [21.6666660308838, 0, 0],
							ti: [-21.6666660308838, 0, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [-61, 97, 0],
							to: [-21.6666660308838, 0, 0],
							ti: [21.6666660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 31.625], [-67.939, 31.625], [-67.939, -32.375], [60.061, -32.375]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.203921571374, 0.658823549747, 0.32549020648, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-0 .lightfill',
				cl: 'number-0 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [69, 31.5, 0],
							e: [69, 97, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, {
							i: { x: 0.629, y: 0.629 },
							o: { x: 0.912, y: 0.912 },
							n: '0p629_0p629_0p912_0p912',
							t: 15,
							s: [69, 97, 0],
							e: [69, 97, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 97, 0],
							e: [69, 31.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-35.346, 0], [0, 35.346], [0, 0]],
								o: [[35.346, 0], [0, 0], [0, 35.346]],
								v: [[-3.939, 95.625], [60.061, 31.625], [-67.939, 31.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-0 .lightstroke',
				cl: 'number-0 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 97, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -34.875], [-3.939, -93.875], [57.51, -34.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.807843148708, 0.917647063732, 0.839215695858, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_1',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-1',
				cl: 'number-1',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-1 .darkfill',
				cl: 'number-1 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [34.5, 162, 0],
							e: [34.5, 96.5, 0],
							to: [0, -10.9166669845581, 0],
							ti: [0, 10.9166669845581, 0]
						}, {
							i: { x: 0.16, y: 0.16 },
							o: { x: 0.84, y: 0.84 },
							n: '0p16_0p16_0p84_0p84',
							t: 15,
							s: [34.5, 96.5, 0],
							e: [34.5, 96.5, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [34.5, 96.5, 0],
							e: [34.5, 162, 0],
							to: [0, 10.9166669845581, 0],
							ti: [0, -10.9166669845581, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[-0.833, 1.332], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-1.571, 0]],
								v: [[-34.027, -34.935], [-9.065, -74.875], [4.061, -95.875], [60.061, -95.875], [60.061, -31.875], [-32.331, -31.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.984313726425, 0.737254917622, 0.015686275437, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-1 .lightstroke',
				cl: 'number-1 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [34.5, 96.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-1.85, 93.625], [-1.85, -29.375], [57.15, -29.375], [57.15, 93.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.996078431373, 0.937254901961, 0.764705882353, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 6, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}, {
			id: 'comp_2',
			layers: [{
				ddd: 0,
				ind: 1,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.833, y: 0.833 },
							o: { x: 0.167, y: 0.167 },
							n: '0p833_0p833_0p167_0p167',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, { t: 30 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 2,
				ty: 4,
				nm: '.number-2 .darkfill',
				cl: 'number-2 darkfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.271, y: 0.895 },
							o: { x: 0.912, y: 0 },
							n: '0p271_0p895_0p912_0',
							t: 0,
							s: [69, 29, 0],
							e: [69, 94.843, 0],
							to: [0, 10.7926044464111, 0],
							ti: [0, -11.9904975891113, 0]
						}, {
							i: { x: 0.629, y: 1 },
							o: { x: 0.138, y: 1 },
							n: '0p629_1_0p138_1',
							t: 13,
							s: [69, 94.843, 0],
							e: [69, 95, 0],
							to: [0, 0.23041497170925, 0],
							ti: [0, -0.20739570260048, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [69, 95, 0],
							e: [69, 95, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [69, 95, 0],
							e: [69, 29, 0],
							to: [0, -11, 0],
							ti: [0, 11, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 35.346], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [35.346, 0]],
								v: [[60.061, -31.375], [-3.939, -31.375], [-3.939, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.258823543787, 0.521568655968, 0.956862747669, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 3,
				ty: 4,
				nm: '.number-2',
				cl: 'number-2',
				td: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: 'Group 1',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 4,
				ty: 4,
				nm: '.number-2 .lightfill',
				cl: 'number-2 lightfill',
				tt: 1,
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: {
						a: 1,
						k: [{
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 0,
							s: [-58.5, 94, 0],
							e: [70, 94, 0],
							to: [21.4166660308838, 0, 0],
							ti: [-21.4166660308838, 0, 0]
						}, {
							i: { x: -0.037, y: -0.037 },
							o: { x: 0.545, y: 0.545 },
							n: '-0p037_-0p037_0p545_0p545',
							t: 15,
							s: [70, 94, 0],
							e: [70, 94, 0],
							to: [0, 0, 0],
							ti: [0, 0, 0]
						}, {
							i: { x: 0.16, y: 1 },
							o: { x: 0.84, y: 0 },
							n: '0p16_1_0p84_0',
							t: 30,
							s: [70, 94, 0],
							e: [-58.5, 94, 0],
							to: [-21.4166660308838, 0, 0],
							ti: [21.4166660308838, 0, 0]
						}, { t: 44 }],
						ix: 2
					},
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[60.061, 96.625], [-67.939, 96.625], [-67.939, 32.625], [60.061, 32.625]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'fl',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 4
						},
						o: { a: 0, k: 100, ix: 5 },
						r: 1,
						bm: 0,
						nm: 'Fill 1',
						mn: 'ADBE Vector Graphic - Fill',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightfill',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightfill'
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 5,
				ty: 4,
				nm: '.number-2 .darkstroke',
				cl: 'number-2 darkstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [0, 0], [0, 0], [0, 0]],
								o: [[0, 0], [0, 0], [0, 0], [0, 0]],
								v: [[-63.429, 30.125], [-26.554, -28.875], [-6.439, -28.875], [-6.439, 30.125]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.68235296011, 0.796078443527, 0.96862745285, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.darkstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'darkstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}, {
				ddd: 0,
				ind: 6,
				ty: 4,
				nm: '.number-2 .lightstroke',
				cl: 'number-2 lightstroke',
				sr: 1,
				ks: {
					o: { a: 0, k: 100, ix: 11 },
					r: { a: 0, k: 0, ix: 10 },
					p: { a: 0, k: [69, 95.5, 0], ix: 2 },
					a: { a: 0, k: [0, 0, 0], ix: 1 },
					s: { a: 0, k: [100, 100, 100], ix: 6 }
				},
				ao: 0,
				shapes: [{
					ty: 'gr',
					it: [{
						ind: 0,
						ty: 'sh',
						ix: 1,
						ks: {
							a: 0,
							k: {
								i: [[0, 0], [-33.073, 0], [-1.317, -32.755]],
								o: [[1.317, -32.755], [33.073, 0], [0, 0]],
								v: [[-65.389, -33.875], [-3.939, -92.875], [57.51, -33.875]],
								c: true
							},
							ix: 2
						},
						nm: 'Path 1',
						mn: 'ADBE Vector Shape - Group',
						hd: false
					}, {
						ty: 'st',
						c: {
							a: 0,
							k: [0.823529422283, 0.890196084976, 0.988235294819, 1],
							ix: 3
						},
						o: { a: 0, k: 100, ix: 4 },
						w: { a: 0, k: 5, ix: 5 },
						lc: 1,
						lj: 1,
						ml: 10,
						ml2: { a: 0, k: 10, ix: 8 },
						bm: 0,
						nm: 'Stroke 1',
						mn: 'ADBE Vector Graphic - Stroke',
						hd: false
					}, {
						ty: 'tr',
						p: { a: 0, k: [0, 0], ix: 2 },
						a: { a: 0, k: [0, 0], ix: 1 },
						s: { a: 0, k: [100, 100], ix: 3 },
						r: { a: 0, k: 0, ix: 6 },
						o: { a: 0, k: 100, ix: 7 },
						sk: { a: 0, k: 0, ix: 4 },
						sa: { a: 0, k: 0, ix: 5 },
						nm: 'Transform'
					}],
					nm: '.lightstroke',
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: 'ADBE Vector Group',
					hd: false,
					cl: 'lightstroke'
				}, {
					ty: 'tm',
					s: {
						a: 1,
						k: [{
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 0,
							s: [100],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 15,
							s: [0],
							e: [0]
						}, {
							i: { x: [0.16], y: [1] },
							o: { x: [0.84], y: [0] },
							n: ['0p16_1_0p84_0'],
							t: 30,
							s: [0],
							e: [100]
						}, { t: 44 }],
						ix: 1
					},
					e: { a: 0, k: 100, ix: 2 },
					o: { a: 0, k: 0, ix: 3 },
					m: 1,
					ix: 2,
					nm: 'Trim Paths 1',
					mn: 'ADBE Vector Filter - Trim',
					hd: false
				}],
				ip: 0,
				op: 45,
				st: 0,
				bm: 0
			}]
		}],
		layers: [{
			ddd: 0,
			ind: 1,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 75,
			op: 90,
			st: 75,
			bm: 0
		}, {
			ddd: 0,
			ind: 2,
			ty: 0,
			nm: '01',
			refId: 'comp_1',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [47.5, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 95,
			h: 193,
			ip: 45,
			op: 90,
			st: 45,
			bm: 0
		}, {
			ddd: 0,
			ind: 3,
			ty: 0,
			nm: '02',
			refId: 'comp_2',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 96.5, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 193,
			ip: 15,
			op: 60,
			st: 15,
			bm: 0
		}, {
			ddd: 0,
			ind: 4,
			ty: 0,
			nm: '00',
			refId: 'comp_0',
			sr: 1,
			ks: {
				o: { a: 0, k: 100, ix: 11 },
				r: { a: 0, k: 0, ix: 10 },
				p: { a: 0, k: [67.5, 97.5, 0], ix: 2 },
				a: { a: 0, k: [65, 97, 0], ix: 1 },
				s: { a: 0, k: [100, 100, 100], ix: 6 }
			},
			ao: 0,
			w: 130,
			h: 194,
			ip: 0,
			op: 30,
			st: -15,
			bm: 0
		}],
		markers: [{ tm: 15, cm: '1', dr: 0 }, { tm: 30, cm: '2', dr: 0 }]
	}
};
// EXTERNAL MODULE: ../node_modules/lodash/lodash.js
var lodash = __webpack_require__("B1iE");
var lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);

// EXTERNAL MODULE: ../node_modules/lottie-web/build/player/lottie_light_html.js
var lottie_light_html = __webpack_require__("UtcG");
var lottie_light_html_default = /*#__PURE__*/__webpack_require__.n(lottie_light_html);

// CONCATENATED MODULE: ./components/Countdown/Countdown.js
function Countdown__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





// Google I/O 2019 start time
var EVENT_DATE = new Date('August 3, 2019 10:00 GMT+9');

var FRAME_RANGES = {
  nine: {
    0: [285, 307],
    1: [255, 277],
    2: [225, 247],
    3: [195, 217],
    4: [165, 187],
    5: [135, 157],
    6: [105, 127],
    7: [75, 97],
    8: [45, 67],
    9: [15, 37]
  },

  five: {
    0: [165, 180],
    1: [135, 157],
    2: [105, 127],
    3: [75, 97],
    4: [45, 67],
    5: [15, 37]
  },

  two: {
    0: [75, 90],
    1: [45, 67],
    2: [15, 37]
  }
};

var COLORS = ['blue', 'red', 'yellow', 'green'];

var Countdown_Countdown = function () {
  function Countdown(style, container, isReset) {
    Countdown__classCallCheck(this, Countdown);

    this.countdownContainer = container;
    this.style = style;
    this.endTime = Date.parse(EVENT_DATE.toString()) / 1000;
    this.daysCounter = null;
    this.hoursCounter = null;
    this.isReset = isReset;
    this.minutesCounter = null;
    this.secondsCounter = null;
    this.render = this.render.bind(this);
    this.getRandomColorNotMatchingSiblings = this.getRandomColorNotMatchingSiblings.bind(this);
    this.assignRandomColor = this.assignRandomColor.bind(this);
    this.digitObjects = [];
    this.currentDigits = {
      seconds: {
        firstDigit: null,
        secondDigit: null
      },
      minutes: {
        firstDigit: null,
        secondDigit: null
      },
      hours: {
        firstDigit: null,
        secondDigit: null
      },
      days: {
        firstDigit: null,
        secondDigit: null
      }
    };
  }

  Countdown.prototype.init = function init() {
    var _this = this;

    var digitsElements = Array.from(this.countdownContainer.querySelectorAll('.js-digit'));
    var numDigits = digitsElements.length;
    var numRows = 2;
    var numDigitsPerRow = numDigits / numRows;

    this.digitObjects = digitsElements.map(function (digit, index) {
      var maxNumber = digit.dataset.maxNumber;
      var isDigitInFirstRow = void 0;
      var color = void 0;

      if (index < numDigitsPerRow) {
        isDigitInFirstRow = true;
        color = COLORS[index];
      } else {
        isDigitInFirstRow = false;
        color = null;
      }

      return {
        element: digit,
        animation: lottie_light_html_default.a.loadAnimation({
          container: digit,
          renderer: 'svg',
          loop: false,
          autoplay: false,
          animationData: ANIMATIONS[maxNumber]
        }),
        frameRanges: FRAME_RANGES[maxNumber],
        lastColor: null,
        currentColor: color,
        currentNumber: null,
        lastNumber: null,
        prevDigitObject: null,
        nextDigitObject: null,
        firstRowDigit: isDigitInFirstRow
      };
    });

    this.digitObjects.forEach(function (digitObject, index) {
      for (var i = 0; i < numRows; i++) {
        if (numDigitsPerRow * (i + 1) - numDigitsPerRow === index) {
          digitObject.prevDigitObject = null;
          digitObject.nextDigitObject = _this.digitObjects[index + 1];
        } else if (numDigitsPerRow * (i + 1) - 1 === index) {
          digitObject.prevDigitObject = _this.digitObjects[index - 1];
          digitObject.nextDigitObject = null;
        } else {
          digitObject.prevDigitObject = _this.digitObjects[index - 1];
          digitObject.nextDigitObject = _this.digitObjects[index + 1];
        }
      }

      digitObject.animation.addEventListener('enterFrame', function (event) {
        if (event.currentTime === 21) {
          if (digitObject.lastNumber) {
            digitObject.element.querySelectorAll('.number-' + digitObject.lastNumber).forEach(function (el) {
              el.classList.remove(_this.style[digitObject.lastColor]);
            });
          }
        }
      });
    });

    this.patchBodymovinClasses(['lightfill', 'darkfill', 'lightstroke', 'darkstroke']);

    this.checkAndSetTime();
    this.render();
  };

  Countdown.prototype.reset = function reset(isReset) {
    this.digitObjects.forEach(function (digitObject) {
      while (digitObject.element.firstChild) {
        digitObject.element.removeChild(digitObject.element.firstChild);
      }
    });
    this.digitObjects = null;
    this.isReset = isReset;
  };

  Countdown.prototype.patchBodymovinClasses = function patchBodymovinClasses(classNames) {
    var _this2 = this;

    classNames.forEach(function (className) {
      _this2.countdownContainer.querySelectorAll('.' + className).forEach(function (el) {
        el.classList.add(_this2.style[className]);
      });
    });
  };

  Countdown.prototype.getFormattedLabel = function getFormattedLabel(num) {
    var numberString = num.toString();
    return num < 10 ? '0' + numberString : numberString;
  };

  Countdown.prototype.getFormattedFirstDigit = function getFormattedFirstDigit(num) {
    return Object(lodash["padStart"])(num.toString(), 2, '0')[0];
  };

  Countdown.prototype.getFormattedSecondDigit = function getFormattedSecondDigit(num) {
    return Object(lodash["padStart"])(num.toString(), 2, '0')[1];
  };

  Countdown.prototype.getRandomColorNotMatchingSiblings = function getRandomColorNotMatchingSiblings(siblingColors) {
    var colorSet = new Set(COLORS);

    if (siblingColors) {
      siblingColors.forEach(function (color) {
        colorSet.delete(color);
      });
    }

    var colorArray = Array.from(colorSet);
    var randomIndex = Math.floor(Math.random() * colorArray.length);

    return colorArray[randomIndex];
  };

  Countdown.prototype.assignRandomColor = function assignRandomColor(digit, leftDigit, rightDigit) {
    var _this3 = this;

    var color = void 0;

    if (digit.firstRowDigit && this.onInitialLoadout) {
      color = digit.currentColor;
    } else if (leftDigit && rightDigit) {
      color = this.getRandomColorNotMatchingSiblings([leftDigit.currentColor, rightDigit.currentColor]);
    } else if (leftDigit) {
      color = this.getRandomColorNotMatchingSiblings([leftDigit.currentColor]);
    } else if (rightDigit) {
      color = this.getRandomColorNotMatchingSiblings([rightDigit.currentColor]);
    }

    digit.element.querySelectorAll('.number-' + digit.currentNumber).forEach(function (el) {
      el.classList.add(_this3.style[color]);
    });

    digit.lastColor = digit.currentColor;
    digit.currentColor = color;
  };

  Countdown.prototype.compareDigits = function compareDigits(firstDigitObj, secondDigitObj, label, currentDigits) {
    var currentFirstDigit = this.getFormattedFirstDigit(label);
    var currentSecondDigit = this.getFormattedSecondDigit(label);

    if (currentFirstDigit !== currentDigits.firstDigit) {
      firstDigitObj.lastNumber = currentDigits.firstDigit;
      firstDigitObj.currentNumber = parseInt(currentFirstDigit, 10);

      this.assignRandomColor(firstDigitObj, firstDigitObj.prevDigitObject, firstDigitObj.nextDigitObject);

      firstDigitObj.animation.playSegments([firstDigitObj.frameRanges[currentFirstDigit]], true);

      currentDigits.firstDigit = currentFirstDigit;
    }

    if (currentSecondDigit !== currentDigits.secondDigit) {
      secondDigitObj.lastNumber = currentDigits.secondDigit;
      secondDigitObj.currentNumber = parseInt(currentSecondDigit, 10);

      this.assignRandomColor(secondDigitObj, secondDigitObj.prevDigitObject, secondDigitObj.nextDigitObject);

      secondDigitObj.animation.playSegments([secondDigitObj.frameRanges[currentSecondDigit]], true);

      currentDigits.secondDigit = currentSecondDigit;
    }
  };

  Countdown.prototype.getTime = function getTime() {
    var now = Date.now() / 1000;
    var timeLeft = Math.max(this.endTime - now, 0);
    var daysLeft = Math.floor(timeLeft / 86400);
    var hoursLeft = Math.floor((timeLeft - daysLeft * 86400) / 3600);
    var minutesLeft = Math.floor((timeLeft - daysLeft * 86400 - hoursLeft * 3600) / 60);
    var secondsLeft = Math.floor(timeLeft - daysLeft * 86400 - hoursLeft * 3600 - minutesLeft * 60);

    return {
      now: now,
      timeLeft: timeLeft,
      daysLeft: daysLeft,
      hoursLeft: hoursLeft,
      minutesLeft: minutesLeft,
      secondsLeft: secondsLeft
    };
  };

  Countdown.prototype.checkAndSetTime = function checkAndSetTime() {
    var time = this.getTime();

    if (this.secondsCounter !== time.secondsLeft) {
      this.setSeconds(time);
    }

    if (this.minutesCounter !== time.minutesLeft) {
      this.setMinutes(time);
    }

    if (this.hoursCounter !== time.hoursLeft) {
      this.setHours(time);
    }

    if (this.daysCounter !== time.daysLeft) {
      this.setDays(time);
      this.setAriaLabel(time.daysLeft);
    }
  };

  /**
   * Sets aria label for the countdown container
   * @param {number} daysLeft the number of days left
   */

  Countdown.prototype.setAriaLabel = function setAriaLabel(daysLeft) {
    this.countdownContainer.setAttribute('aria-label', 'Countdown to I/O: ' + daysLeft + ' days left');
  };

  Countdown.prototype.setDays = function setDays(time) {
    var daysLabel = this.getFormattedLabel(time.daysLeft);
    var currentDigits = this.currentDigits.days;

    this.compareDigits(this.digitObjects[0], this.digitObjects[1], daysLabel, currentDigits);

    this.daysCounter = time.daysLeft;
  };

  Countdown.prototype.setHours = function setHours(time) {
    var hoursLabel = this.getFormattedLabel(time.hoursLeft);
    var currentDigits = this.currentDigits.hours;

    this.compareDigits(this.digitObjects[2], this.digitObjects[3], hoursLabel, currentDigits);

    this.hoursCounter = time.hoursLeft;
  };

  Countdown.prototype.setMinutes = function setMinutes(time) {
    var minutesLabel = this.getFormattedLabel(time.minutesLeft);
    var currentDigits = this.currentDigits.minutes;

    this.compareDigits(this.digitObjects[4], this.digitObjects[5], minutesLabel, currentDigits);

    this.minutesCounter = time.minutesLeft;
  };

  Countdown.prototype.setSeconds = function setSeconds(time) {
    var secondsLabel = this.getFormattedLabel(time.secondsLeft);
    var currentDigits = this.currentDigits.seconds;

    this.compareDigits(this.digitObjects[6], this.digitObjects[7], secondsLabel, currentDigits);

    this.secondsCounter = time.secondsLeft;
  };

  Countdown.prototype.render = function render() {
    if (this.isReset) {
      return false;
    }

    this.onInitialLoadout = false;
    this.checkAndSetTime();

    requestAnimationFrame(this.render);
  };

  return Countdown;
}();
// CONCATENATED MODULE: ./components/Countdown/index.js


function components_Countdown__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Countdown__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function Countdown__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Countdown_style = __webpack_require__("mTzT");



var components_Countdown_Countdown = function (_Component) {
	Countdown__inherits(Countdown, _Component);

	function Countdown() {
		var _temp, _this, _ret;

		components_Countdown__classCallCheck(this, Countdown);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = Countdown__possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
			isReset: false
		}, _temp), Countdown__possibleConstructorReturn(_this, _ret);
	}

	Countdown.prototype.componentDidMount = function componentDidMount() {
		if (!this.controller) {
			this.controller = new Countdown_Countdown(Countdown_style, this.countdownContainer, this.state.isReset);
			this.controller.reset(this.state.isReset);
			this.controller.init();
		}
	};

	Countdown.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
		return !this.controller.isReset;
	};

	Countdown.prototype.componentWillUnmount = function componentWillUnmount() {
		this.setState({
			isReset: true
		});

		this.controller.reset(this.state.isReset);
	};

	Countdown.prototype.render = function render() {
		var _this2 = this;

		return Object(preact_min["h"])(
			'div',
			{ 'class': Countdown_style.countdownContainer, ref: function ref(div) {
					return _this2.countdownContainer = div;
				} },
			Object(preact_min["h"])(
				'div',
				{
					'class': '' + Countdown_style.countdown,
					'aria-hidden': 'true',
					role: 'presentation'
				},
				Object(preact_min["h"])(
					'div',
					{ 'class': '' + Countdown_style.unitWrapper },
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'days',
						'data-max-number': 'nine'
					}),
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'days',
						'data-max-number': 'nine'
					}),
					Object(preact_min["h"])(
						'span',
						{ 'class': '' + Countdown_style.unitLabel },
						'D'
					)
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': '' + Countdown_style.unitWrapper },
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'hours',
						'data-max-number': 'two'
					}),
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'hours',
						'data-max-number': 'nine'
					}),
					Object(preact_min["h"])(
						'span',
						{ 'class': '' + Countdown_style.unitLabel },
						'H'
					)
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': '' + Countdown_style.unitWrapper },
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'minutes',
						'data-max-number': 'five'
					}),
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'minutes',
						'data-max-number': 'nine'
					}),
					Object(preact_min["h"])(
						'span',
						{ 'class': '' + Countdown_style.unitLabel },
						'M'
					)
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': '' + Countdown_style.unitWrapper },
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'seconds',
						'data-max-number': 'five'
					}),
					Object(preact_min["h"])('div', {
						'class': Countdown_style.digit + ' js-digit',
						'data-unit': 'seconds',
						'data-max-number': 'nine'
					}),
					Object(preact_min["h"])(
						'span',
						{ 'class': '' + Countdown_style.unitLabel },
						'S'
					)
				)
			)
		);
	};

	return Countdown;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/home/style.css
var home_style = __webpack_require__("ZAL5");
var home_style_default = /*#__PURE__*/__webpack_require__.n(home_style);

// CONCATENATED MODULE: ./routes/home/index.js


function home__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function home__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function home__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }









var home__ref2 = Object(preact_min["h"])(
  'h2',
  null,
  'I/O Extended\uB294 \uC804\uC138\uACC4 \uAC01 \uC9C0\uC5ED\uC5D0\uC11C Google I/O\uC758 \uACBD\uD5D8\uACFC \uC0C8\uB85C \uACF5\uAC1C\uB41C \uC815\uBCF4\uB4E4\uC744 \uACF5\uC720\uD558\uB294 \uD589\uC0AC\uC785\uB2C8\uB2E4.',
  Object(preact_min["h"])('br', null),
  'I/O Extended 2019 Seoul\uC5D0 \uCC38\uAC00\uD574 \uB728\uAC70\uC6E0\uB358 \uD604\uC7A5\uC758 \uC5F4\uAE30\uB97C \uB2E4\uC2DC \uB290\uAEF4\uBCF4\uC138\uC694.'
);

var home__ref3 = Object(preact_min["h"])('br', null);

var home__ref4 = Object(preact_min["h"])(
  'a',
  {
    'class': 'ctaButton',
    href: 'https://festa.io/events/299',
    target: '_blank',
    rel: 'noopener noreferrer'
  },
  '\uB4F1\uB85D\uD558\uAE30'
);

var home__ref5 = Object(preact_min["h"])(components_Countdown_Countdown, null);

var _ref6 = Object(preact_min["h"])('img', { src: '/assets/images/intro.jpg', alt: 'I/O Extended 2018 Seoul \uD0A4\uB178\uD2B8' });

var home__ref7 = Object(preact_min["h"])(
  'h3',
  null,
  '\uC9C1\uC811 \uCCB4\uD5D8\uD558\uC138\uC694.'
);

var home__ref8 = Object(preact_min["h"])(
  'p',
  null,
  'I/O Extended 2019 Seoul\uC5D0\uC11C\uB294 Google I/O 2019\uC5D0\uC11C \uBC1C\uD45C\uB41C \uB0B4\uC6A9 \uC911 \uD575\uC2EC\uB9CC \uC120\uBCC4\uD558\uC5EC \uC5EC\uB7EC\uBD84\uACFC \uB098\uB204\uB294 \uC2DC\uAC04\uC744 \uAC00\uC9C0\uB824 \uD569\uB2C8\uB2E4. Android \uBD80\uD130 AI/ML, Web, Cloud, Flutter, Design\uAE4C\uC9C0 \uB2E4\uC591\uD55C \uC8FC\uC81C\uC758 \uC138\uC158\uC774 \uC900\uBE44\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4.'
);

var home__ref9 = Object(preact_min["h"])(gallery_block_GalleryBlock, null);

var home__ref10 = Object(preact_min["h"])(
  'h3',
  null,
  'Partners'
);

var home__ref11 = Object(preact_min["h"])(
  'h4',
  null,
  '\uD6C4\uC6D0'
);

var home__ref12 = Object(preact_min["h"])('img', { src: '/assets/images/google-developers.png', alt: 'Google Developers' });

var home__ref13 = Object(preact_min["h"])('img', { src: '/assets/images/cracker9.png', alt: 'Cracker 9' });

var home__ref14 = Object(preact_min["h"])('img', { src: '/assets/images/bitberry.png', alt: '\uBE44\uD2B8\uBCA0\uB9AC' });

var home__ref15 = Object(preact_min["h"])('img', { src: '/assets/images/myrealtrip.png', alt: '\uB9C8\uC774\uB9AC\uC5BC\uD2B8\uB9BD' });

var home__ref16 = Object(preact_min["h"])(
  'h4',
  null,
  '\uC8FC\uCD5C'
);

var home__ref17 = Object(preact_min["h"])('img', { src: '/assets/images/gdg-seoul-logo.png', alt: 'GDG Seoul' });

var home_Home = function (_Component) {
  home__inherits(Home, _Component);

  function Home() {
    home__classCallCheck(this, Home);

    return home__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Home.prototype.handleScroll = function handleScroll() {
    var ele = document.querySelector('.topappbar.mdc-top-app-bar');
    if (document.documentElement.scrollTop < 56) {
      ele.setAttribute('top', true);
    } else {
      ele.removeAttribute('top');
    }
  };

  Home.prototype.componentDidMount = function componentDidMount() {
    document.title = 'I/O Extended 2019 Seoul';
    window.addEventListener('scroll', this.handleScroll, { passive: true });
    this.handleScroll();
  };

  Home.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('scroll', this.handleScroll);
    document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
  };

  Home.prototype.render = function render(_ref) {
    var rootPath = _ref.rootPath,
        partners = _ref.partners;

    return Object(preact_min["h"])(
      'div',
      null,
      Object(preact_min["h"])(
        'div',
        { 'class': home_style_default.a.hero + ' hero' },
        Object(preact_min["h"])(
          'div',
          { 'class': home_style_default.a.hero_title },
          Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
          home__ref2,
          home__ref3,
          Object(preact_min["h"])(
            'h4',
            { style: { marginBottom: '12px' } },
            '2019\uB144 6\uC6D4 30\uC77C \xB7 \uC138\uC885\uB300\uD559\uAD50 \uAD11\uAC1C\uD1A0\uAD00'
          ),
          home__ref4
        ),
        home__ref5
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': home_style_default.a.belt + ' belt' },
        _ref6
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': home_style_default.a.home_info },
        Object(preact_min["h"])(
          'div',
          { 'class': home_style_default.a.text },
          home__ref7,
          home__ref8
        ),
        Object(preact_min["h"])(
          'div',
          { 'class': home_style_default.a.stats },
          Object(preact_min["h"])(
            'div',
            { 'class': home_style_default.a.stat },
            Object(preact_min["h"])(
              'div',
              { 'class': home_style_default.a.number },
              '1000+'
            ),
            Object(preact_min["h"])(
              'div',
              { 'class': home_style_default.a.label },
              'Attendees'
            )
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': home_style_default.a.stat },
            Object(preact_min["h"])(
              'div',
              { 'class': home_style_default.a.number },
              '1'
            ),
            Object(preact_min["h"])(
              'div',
              { 'class': home_style_default.a.label },
              'Day'
            )
          )
        )
      ),
      home__ref9,
      Object(preact_min["h"])(
        'div',
        { 'class': home_style_default.a.partners },
        home__ref10,
        Object(preact_min["h"])(
          'div',
          null,
          home__ref11,
          Object(preact_min["h"])(
            'div',
            { 'class': home_style_default.a.sponsors },
            Object(preact_min["h"])(
              'a',
              {
                'class': home_style_default.a.item,
                href: 'https://developers.google.com',
                target: '_blank',
                rel: 'noopener noreferrer'
              },
              home__ref12
            ),
            Object(preact_min["h"])(
              'a',
              {
                'class': home_style_default.a.item,
                href: 'http://cracker9.io/',
                target: '_blank',
                rel: 'noopener noreferrer'
              },
              home__ref13
            ),
            Object(preact_min["h"])(
              'a',
              {
                'class': home_style_default.a.item,
                href: 'https://bitberry.app/',
                target: '_blank',
                rel: 'noopener noreferrer'
              },
              home__ref14
            ),
            Object(preact_min["h"])(
              'a',
              {
                'class': home_style_default.a.item,
                href: 'https://www.myrealtrip.com/',
                target: '_blank',
                rel: 'noopener noreferrer'
              },
              home__ref15
            )
          )
        ),
        Object(preact_min["h"])(
          'div',
          null,
          home__ref16,
          Object(preact_min["h"])(
            'div',
            { 'class': home_style_default.a.sponsors },
            Object(preact_min["h"])(
              'a',
              {
                'class': home_style_default.a.item,
                href: 'https://www.facebook.com/groups/gdgseoul/',
                target: '_blank',
                rel: 'noopener noreferrer'
              },
              home__ref17
            )
          )
        )
      ),
      Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
      Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
    );
  };

  return Home;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/attending/style.css
var attending_style = __webpack_require__("yH7v");
var attending_style_default = /*#__PURE__*/__webpack_require__.n(attending_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/attending/index.js


function attending__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function attending__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function attending__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var attending__ref3 = Object(preact_min["h"])(
	'h2',
	null,
	'Attending'
);

var attending__ref4 = Object(preact_min["h"])(
	'p',
	null,
	'Join us at Sunway University as we celebrate product and platform innovations at Google.'
);

var attending__ref5 = Object(preact_min["h"])(
	'b',
	null,
	'Wi-Fi Network:'
);

var attending__ref6 = Object(preact_min["h"])(
	'b',
	null,
	'Username:'
);

var attending__ref7 = Object(preact_min["h"])(
	'b',
	null,
	'Password:'
);

var attending__ref8 = Object(preact_min["h"])(
	'p',
	null,
	'I/O Extended 2019 Kuala Lumpur features hands-on learning, Google\'s latest developer products, and technical talks given by the engineers who are developing our latest APIs and tools\u2013plus a few surprises along the way.'
);

var attending__ref9 = Object(preact_min["h"])('br', null);

var attending__ref10 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'b',
		null,
		'Sessions'
	)
);

var attending__ref11 = Object(preact_min["h"])(
	'p',
	null,
	'Learn Google\'s latest developer products from Googlers, Google Developer Experts and more.'
);

var attending__ref12 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'b',
		null,
		'Sandbox'
	)
);

var attending__ref13 = Object(preact_min["h"])(
	'p',
	null,
	'Dedicated spaces to explore, learn, and play with our latest products and platforms via interactive demos, physical installations, and more.'
);

var attending__ref14 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'b',
		null,
		'Meals'
	)
);

var attending__ref15 = Object(preact_min["h"])(
	'p',
	null,
	'Attendees are offered complimentary breakfast, lunch, and tea-break.'
);

var attending__ref16 = Object(preact_min["h"])(
	'p',
	null,
	'Plan ahead, expect traffic delays, be patient, and consider carpooling.'
);

var attending__ref17 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'b',
		null,
		'Get transportation directions: '
	)
);

var attending__ref18 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'a',
		{ href: 'https://goo.gl/maps/vok9mgz1nB62', target: '_blank', rel: 'noopener noreferrer' },
		'Google Maps'
	)
);

var attending__ref19 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'a',
		{ href: 'https://mobile-web.world.waze.com/en_US/meetup/location?h=w2832n3w7snh', target: '_blank', rel: 'noopener noreferrer' },
		'Waze'
	)
);

var attending__ref20 = Object(preact_min["h"])(
	'p',
	null,
	'Public transportation to the area is accessible via:'
);

var attending__ref21 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'a',
		{ href: 'https://www.myrapid.com.my/traveling-with-us/how-to-travel-with-us/rapid-kl/brt-sunway-line', target: '_blank', rel: 'noopener noreferrer' },
		'BRT Sunway Line'
	)
);

var attending__ref22 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'b',
		null,
		'Grab'
	)
);

var attending__ref23 = Object(preact_min["h"])(
	'p',
	null,
	'Download the Grab app from ',
	Object(preact_min["h"])(
		'a',
		{ href: 'https://play.google.com/store/apps/details?id=com.grabtaxi.passenger', target: '_blank', rel: 'noopener noreferrer' },
		'Google Play'
	),
	' or the ',
	Object(preact_min["h"])(
		'a',
		{ href: 'https://itunes.apple.com/MY/app/id647268330', target: '_blank', rel: 'noopener noreferrer' },
		'App Store'
	),
	'.'
);

var attending_Attending = function (_Component) {
	attending__inherits(Attending, _Component);

	Attending.prototype.handleScroll = function handleScroll() {
		var ele = document.querySelector('.topappbar.mdc-top-app-bar');
		if (document.documentElement.scrollTop < 56) {
			ele.setAttribute('top', true);
		} else {
			ele.removeAttribute('top');
		}
	};

	Attending.prototype.checkResize = function checkResize() {
		if (this.windowWidth !== window.innerWidth) {
			this.resize();
		}
	};

	Attending.prototype.resize = function resize() {
		if (window.innerWidth > 768 && this.state.isMobile) {
			this.setState({ isMobile: false, showTravel: true, showEvent: true });
		}
		if (window.innerWidth <= 768 && !this.state.isMobile) {
			this.setState({ isMobile: true, showTravel: false, showEvent: true });
		}
	};

	function Attending(props) {
		attending__classCallCheck(this, Attending);

		var _this = attending__possibleConstructorReturn(this, _Component.call(this, props));

		_this.state = {
			isMobile: false,
			showTravel: true,
			showEvent: true
		};

		_this.showTravel = function (state) {
			return function (e) {
				_this.setState({ showTravel: state, showEvent: !state });
			};
		};

		_this.checkResize = _this.checkResize.bind(_this);
		return _this;
	}

	Attending.prototype.componentDidMount = function componentDidMount() {
		document.title = 'Attending - I/O Extended 2019 Kuala Lumpur';
		this.windowWidth = window.innerWidth;
		window.addEventListener('scroll', this.handleScroll, { passive: true });
		window.addEventListener('resize', this.checkResize);
		this.resize();
		this.handleScroll();
	};

	Attending.prototype.componentWillUnmount = function componentWillUnmount() {
		window.removeEventListener('scroll', this.handleScroll);
		window.removeEventListener('resize', this.checkResize);
		document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
	};

	Attending.prototype.render = function render(_ref, _ref2) {
		var rootPath = _ref.rootPath,
		    info = _ref.info;
		var showTravel = _ref2.showTravel,
		    showEvent = _ref2.showEvent;

		return Object(preact_min["h"])(
			'div',
			null,
			Object(preact_min["h"])(
				'div',
				{ 'class': attending_style_default.a.hero + ' hero' },
				Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
				attending__ref3,
				attending__ref4
			),
			Object(preact_min["h"])(
				'div',
				{ 'class': attending_style_default.a.tabs },
				Object(preact_min["h"])(
					'div',
					{ 'class': attending_style_default.a.tab, onClick: this.showTravel(false), active: !showTravel },
					'Event'
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': attending_style_default.a.tab, onClick: this.showTravel(true), active: showTravel },
					'Travel'
				),
				Object(preact_min["h"])('div', { 'class': attending_style_default.a.line })
			),
			Object(preact_min["h"])('div', { 'class': attending_style_default.a.belt + ' belt',
				style: "background-image: url('" + rootPath + "assets/sunway_auditorium.jpg')"
			}),
			Object(preact_min["h"])(
				'div',
				{ 'class': attending_style_default.a.attending },
				showEvent && Object(preact_min["h"])(
					'div',
					{ 'class': attending_style_default.a.event, id: 'event' },
					info && info.show_wifi && Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'Wi-Fi'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							Object(preact_min["h"])(
								'p',
								null,
								attending__ref5,
								'\u2003',
								Object(preact_min["h"])(
									'a',
									null,
									info.wifi_ssid
								)
							),
							Object(preact_min["h"])(
								'p',
								null,
								attending__ref6,
								'\u2003',
								Object(preact_min["h"])(
									'a',
									null,
									info.wifi_username
								)
							),
							Object(preact_min["h"])(
								'p',
								null,
								attending__ref7,
								'\u2003',
								Object(preact_min["h"])(
									'a',
									null,
									info.wifi_password
								)
							)
						)
					),
					Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'What to expect and explore'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							attending__ref8,
							attending__ref9,
							attending__ref10,
							attending__ref11,
							attending__ref12,
							attending__ref13,
							attending__ref14,
							attending__ref15
						)
					)
				),
				showTravel && Object(preact_min["h"])(
					'div',
					{ 'class': attending_style_default.a.travel, id: 'travel' },
					Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'Getting to Sunway University'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							attending__ref16,
							attending__ref17,
							Object(preact_min["h"])(
								'div',
								{ 'class': attending_style_default.a.attending_list },
								attending__ref18,
								attending__ref19
							)
						)
					),
					Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'Public Transportation'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							attending__ref20,
							Object(preact_min["h"])(
								'div',
								{ 'class': attending_style_default.a.attending_list },
								attending__ref21
							)
						)
					),
					Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'Ridesharing'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							attending__ref22,
							attending__ref23
						)
					),
					Object(preact_min["h"])(
						'div',
						{ 'class': attending_style_default.a.attending_item },
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_title },
							'Parking'
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': attending_style_default.a.attending_content },
							'Limited parking is available at Sunway University. The parking rate is RM5.00 per entry.'
						)
					)
				)
			),
			Object(preact_min["h"])(
				'div',
				{ 'class': attending_style_default.a.footer },
				Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
				Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
			)
		);
	};

	return Attending;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./components/ticket_icon/style.css
var ticket_icon_style = __webpack_require__("9HV9");
var ticket_icon_style_default = /*#__PURE__*/__webpack_require__.n(ticket_icon_style);

// CONCATENATED MODULE: ./components/ticket_icon/index.js


function ticket_icon__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ticket_icon__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function ticket_icon__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var ticket_icon__ref = Object(preact_min["h"])(
	'g',
	{ fill: 'none', 'fill-rule': 'evenodd' },
	Object(preact_min["h"])('path', { fill: '#D2E3FC', d: 'M.115 30.496V60.98h49.686V47.528H37.623v-4.98H27.19v-6.3H15.172v-5.752z' }),
	Object(preact_min["h"])('path', { fill: '#4285F4', d: 'M.115 30.496h49.686V17.043H37.623v-4.979H27.189V5.763H15.172V.01H.115z' })
);

var ticket_icon_TicketIcon = function (_Component) {
	ticket_icon__inherits(TicketIcon, _Component);

	function TicketIcon() {
		ticket_icon__classCallCheck(this, TicketIcon);

		return ticket_icon__possibleConstructorReturn(this, _Component.apply(this, arguments));
	}

	TicketIcon.prototype.render = function render() {
		return Object(preact_min["h"])(
			'svg',
			{ 'class': ticket_icon_style_default.a.ticket_icon, 'aria-hidden': 'true', width: '50', height: '61', viewBox: '0 0 50 61', xmlns: 'http://www.w3.org/2000/svg' },
			ticket_icon__ref
		);
	};

	return TicketIcon;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/SVG/Shape/RegistrationShape.js


var RegistrationShape__ref = Object(preact_min["h"])(
	"svg",
	{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 649.4 395.1" },
	Object(preact_min["h"])("path", { d: "M10 351L298.6 9.4c.5-.6.9-.5.9.3V352h-289c-.8.1-1-.4-.5-1z", "fill-rule": "evenodd", "clip-rule": "evenodd", fill: "#fce8e6", stroke: "#fce8e6", "stroke-width": "16.103" }),
	Object(preact_min["h"])("path", { d: "M21.8 285.1h290v101h-290v-101z", fill: "none", stroke: "#fbbc04", "stroke-width": "10" }),
	Object(preact_min["h"])("path", { d: "M527.5 9.2l-186.8-.1v377h196.4c2.5 0 4.1-2.6 3.1-4.9l-47.8-102.4h99.4c2.6 0 4.3-2.9 2.9-5.1l-55.1-93.4h96.6c2.7 0 4.4-3.1 2.8-5.3L527.5 9.2z", fill: "none", stroke: "#5bb974", "stroke-width": "10" })
);

var RegistrationShape = function RegistrationShape() {
	return RegistrationShape__ref;
};

/* harmony default export */ var Shape_RegistrationShape = (RegistrationShape);
// CONCATENATED MODULE: ./components/SVG/Shape/RegistrationShapeMobile.js


var RegistrationShapeMobile__ref = Object(preact_min["h"])(
	"svg",
	{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 697 424.5" },
	Object(preact_min["h"])("path", { d: "M92 245.9l201.1-238c.4-.4.6-.3.6.2v238.5H92.4c-.6 0-.7-.3-.4-.7z", "fill-rule": "evenodd", "clip-rule": "evenodd", fill: "#fce8e6", stroke: "#fce8e6", "stroke-width": "11.218" }),
	Object(preact_min["h"])("path", { d: "M8 315.8h290v101H8v-101z", fill: "none", stroke: "#fbbc04", "stroke-width": "10" }),
	Object(preact_min["h"])("path", { d: "M566.9 7.8l-202.7-.1.1 409.1h213.1c2.7 0 4.5-2.8 3.3-5.3l-51.8-111.2h107.9c2.9 0 4.6-3.1 3.2-5.6l-59.8-101.3H685c3 0 4.7-3.3 3.1-5.8L566.9 7.8z", fill: "none", stroke: "#5bb974", "stroke-width": "10.852" })
);

var RegistrationShapeMobile = function RegistrationShapeMobile() {
	return RegistrationShapeMobile__ref;
};

/* harmony default export */ var Shape_RegistrationShapeMobile = (RegistrationShapeMobile);
// EXTERNAL MODULE: ./routes/registration/style.css
var registration_style = __webpack_require__("2n+x");
var registration_style_default = /*#__PURE__*/__webpack_require__.n(registration_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/registration/index.js


function registration__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function registration__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function registration__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }










var registration__ref3 = Object(preact_min["h"])('br', null);

var registration__ref4 = Object(preact_min["h"])(Shape_RegistrationShape, null);

var registration__ref5 = Object(preact_min["h"])(Shape_RegistrationShapeMobile, null);

var registration__ref6 = Object(preact_min["h"])(
	'h3',
	null,
	'Ticket type'
);

var registration__ref7 = Object(preact_min["h"])(ticket_icon_TicketIcon, null);

var registration_Registration = function (_Component) {
	registration__inherits(Registration, _Component);

	Registration.prototype.handleScroll = function handleScroll() {
		var ele = document.querySelector('.topappbar.mdc-top-app-bar');
		if (document.documentElement.scrollTop < 56) {
			ele.setAttribute('top', true);
		} else {
			ele.removeAttribute('top');
		}
	};

	Registration.prototype.changeRegistrationStatusText = function changeRegistrationStatusText(status) {
		if (status === 'opening_soon') {
			this.setState({ registrationStatusText: 'Opening Soon' });
		}
		if (status === 'closed') {
			this.setState({ registrationStatusText: 'Closed' });
		}
		if (status === 'open') {
			this.setState({ registrationStatusText: 'Open' });
		}
	};

	function Registration(props) {
		registration__classCallCheck(this, Registration);

		var _this = registration__possibleConstructorReturn(this, _Component.call(this, props));

		_this.state = {
			registrationStatus: 'opening_soon',
			registrationStatusText: 'Loading ...',
			registrationUrl: 'https://ioxkl19.peatix.com/'
		};

		_this.props = props;

		if (props.info) {
			var status = props.info.registration_status;
			_this.setState({ registrationStatus: status });
			_this.changeRegistrationStatusText(status);
		}
		return _this;
	}

	Registration.prototype.componentDidMount = function componentDidMount() {
		document.title = 'Registration - I/O Extended 2019 Kuala Lumpur';
		window.addEventListener('scroll', this.handleScroll, { passive: true });
		this.handleScroll();
	};

	Registration.prototype.componentWillUnmount = function componentWillUnmount() {
		window.removeEventListener('scroll', this.handleScroll);
		document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
	};

	Registration.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		if (nextProps.info !== this.props.info) {
			if (nextProps.info) {
				var status = nextProps.info.registration_status;
				this.setState({ registrationStatus: status });
				this.changeRegistrationStatusText(status);
			}
		}
	};

	Registration.prototype.render = function render(_ref, _ref2) {
		var rootPath = _ref.rootPath,
		    info = _ref.info;
		var registrationStatus = _ref2.registrationStatus,
		    registrationStatusText = _ref2.registrationStatusText,
		    registrationUrl = _ref2.registrationUrl;

		return Object(preact_min["h"])(
			'div',
			null,
			Object(preact_min["h"])(
				'div',
				{ 'class': registration_style_default.a.hero + ' hero' },
				Object(preact_min["h"])(
					'div',
					{ 'class': registration_style_default.a.heroText },
					Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
					info && Object(preact_min["h"])(
						'h2',
						null,
						info.registration_text,
						' ',
						registration__ref3,
						Object(preact_min["h"])(
							'span',
							null,
							info.registration_text_highlight
						)
					),
					registrationStatus === 'open' && Object(preact_min["h"])(
						'a',
						{
							'class': registration_style_default.a.ticket_btn,
							href: registrationUrl,
							target: '_blank',
							rel: 'noopener noreferrer'
						},
						info.registration_btn_text
					)
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': registration_style_default.a.heroShape },
					Object(preact_min["h"])(
						'div',
						{ 'class': registration_style_default.a.registrationShape },
						registration__ref4
					),
					Object(preact_min["h"])(
						'div',
						{ 'class': registration_style_default.a.registrationShapeMobile },
						registration__ref5
					)
				)
			),
			Object(preact_min["h"])(
				'div',
				{ 'class': registration_style_default.a.ticket_types },
				registration__ref6,
				Object(preact_min["h"])(
					'div',
					{ 'class': registration_style_default.a.ticket_types_container },
					Object(preact_min["h"])(
						'div',
						{ 'class': registration_style_default.a.ticket_type, id: registration_style_default.a.general },
						registration__ref7,
						Object(preact_min["h"])(
							'div',
							{ 'class': registration_style_default.a.ticket_content },
							Object(preact_min["h"])(
								'div',
								{ 'class': registration_style_default.a.ticket_title },
								'General admission'
							),
							Object(preact_min["h"])(
								'div',
								{ 'class': registration_style_default.a.ticket_body },
								'I/O welcomes anyone who pursues development and tech as a career, side occupation, or hobby.'
							)
						)
					)
				)
			),
			Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
			Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
		);
	};

	return Registration;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/communityguidelines/style.css
var communityguidelines_style = __webpack_require__("Pt3o");
var communityguidelines_style_default = /*#__PURE__*/__webpack_require__.n(communityguidelines_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/communityguidelines/index.js


function communityguidelines__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function communityguidelines__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function communityguidelines__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var communityguidelines__ref2 = Object(preact_min["h"])(
	'h2',
	null,
	'Community Guidelines'
);

var communityguidelines__ref3 = Object(preact_min["h"])(
	'p',
	null,
	'Google Developer Group Kuala Lumpur (GDGKL) and Google is dedicated to providing a harassment-free and inclusive event experience for everyone regardless of gender identity and expression, sexual orientation, disabilities, neurodiversity, physical appearance, body size, ethnicity, nationality, race, age, religion, or other protected category. We do not tolerate harassment of event participants in any form. Google takes violations of our policy seriously and will respond appropriately.'
);

var communityguidelines__ref4 = Object(preact_min["h"])(
	'p',
	null,
	'All participants of Google-supported events must abide by the following policy:'
);

var communityguidelines__ref5 = Object(preact_min["h"])(
	'h4',
	null,
	'Be excellent to each other.'
);

var communityguidelines__ref6 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'span',
		null,
		'Treat everyone with respect. Participate while acknowledging that everyone deserves to be here \u2014 and each of us has the right to enjoy our experience without fear of harassment, discrimination, or condescension, whether blatant or via micro-aggressions. Jokes shouldn\u2019t demean others. Consider what you are saying and how it would feel if it were said to or about you.'
	)
);

var communityguidelines__ref7 = Object(preact_min["h"])(
	'h4',
	null,
	'Speak up if you see or hear something.'
);

var communityguidelines__ref8 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'span',
		null,
		'Harassment is not tolerated, and you are empowered to politely engage when you or others are disrespected. The person making you feel uncomfortable may not be aware of what they are doing, and politely bringing their behavior to their attention is encouraged.'
	)
);

var communityguidelines__ref9 = Object(preact_min["h"])(
	'h4',
	null,
	'Practice saying "Yes and" to each other.'
);

var communityguidelines__ref10 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'span',
		null,
		'It\u2019s a theatre improv technique to build on each other\u2019s ideas. We all benefit when we create together.'
	)
);

var communityguidelines__ref11 = Object(preact_min["h"])(
	'h4',
	null,
	'We have a ZERO TOLERANCE POLICY for harassment of any kind, including but not limited to:'
);

var communityguidelines__ref12 = Object(preact_min["h"])(
	'ul',
	null,
	Object(preact_min["h"])(
		'li',
		null,
		'Stalking/following'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Deliberate intimidation'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Harassing photography or recording'
	),
	Object(preact_min["h"])(
		'li',
		null,
		Object(preact_min["h"])(
			'span',
			null,
			'Sustained disruption of talks or other events'
		)
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Offensive verbal language'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Verbal language that reinforces social structures of domination'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Sexual imagery and language in public spaces'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Inappropriate physical contact'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Unwelcome sexual or physical attention'
	)
);

var communityguidelines__ref13 = Object(preact_min["h"])(
	'p',
	null,
	Object(preact_min["h"])(
		'span',
		null,
		'In relation to, but not limited to:'
	)
);

var communityguidelines__ref14 = Object(preact_min["h"])(
	'ul',
	null,
	Object(preact_min["h"])(
		'li',
		null,
		'Neurodiversity'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Race'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Color'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'National origin'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Gender identity'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Gender expression'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Sexual orientation'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Age'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Body size'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Disabilities'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Appearance'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Religion'
	),
	Object(preact_min["h"])(
		'li',
		null,
		'Pregnancy'
	)
);

var communityguidelines__ref15 = Object(preact_min["h"])('br', null);

var communityguidelines__ref16 = Object(preact_min["h"])(
	'p',
	null,
	'Participants asked to stop any harassing behavior are expected to comply immediately. Our zero tolerance policy means that we will look into and review every allegation of violation of our Event Community Guidelines and Anti-Harassment Policy and respond appropriately. We empower and encourage you to report any behavior that makes you or others feel uncomfortable by finding a GDGKL organizer or volunteer or by emailing ',
	Object(preact_min["h"])(
		'a',
		{ href: 'mailto:events@gdgkl.org' },
		'events@gdgkl.org'
	),
	'.'
);

var communityguidelines__ref17 = Object(preact_min["h"])('br', null);

var communityguidelines__ref18 = Object(preact_min["h"])(
	'p',
	null,
	'Event staff will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing discomfort or harassment to feel safe for the duration of the event. We value your attendance.'
);

var communityguidelines__ref19 = Object(preact_min["h"])('br', null);

var communityguidelines__ref20 = Object(preact_min["h"])(
	'p',
	null,
	'This policy extends to talks, forums, workshops, codelabs, social media, parties, hallway conversations, all attendees, partners, sponsors, volunteers, event staff, etc. You catch our drift. GDGKL reserves the right to refuse admittance to, or remove any person from, any GDGKL hosted event (including future GDGKL events) at any time in its sole discretion. This includes, but is not limited to, attendees behaving in a disorderly manner or failing to comply with this policy, and the terms and conditions herein. If a participant engages in harassing or uncomfortable behavior, the conference organizers may take any action they deem appropriate, including warning or expelling the offender from the conference with no refund.'
);

var communityguidelines_Register = function (_Component) {
	communityguidelines__inherits(Register, _Component);

	function Register() {
		communityguidelines__classCallCheck(this, Register);

		return communityguidelines__possibleConstructorReturn(this, _Component.apply(this, arguments));
	}

	Register.prototype.handleScroll = function handleScroll() {
		var ele = document.querySelector('.topappbar.mdc-top-app-bar');
		if (document.documentElement.scrollTop < 56) {
			ele.setAttribute('top', true);
		} else {
			ele.removeAttribute('top');
		}
	};

	Register.prototype.componentDidMount = function componentDidMount() {
		document.title = 'Community Guidelines - I/O Extended 2019 Kuala Lumpur';
		window.addEventListener('scroll', this.handleScroll, { passive: true });
		this.handleScroll();
	};

	Register.prototype.componentWillUnmount = function componentWillUnmount() {
		window.removeEventListener('scroll', this.handleScroll);
		document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
	};

	Register.prototype.render = function render(_ref) {
		var rootPath = _ref.rootPath;

		return Object(preact_min["h"])(
			'div',
			null,
			Object(preact_min["h"])(
				'div',
				{ 'class': 'hero' },
				Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
				communityguidelines__ref2
			),
			Object(preact_min["h"])(
				'div',
				{ 'class': communityguidelines_style_default.a.container },
				communityguidelines__ref3,
				communityguidelines__ref4,
				communityguidelines__ref5,
				communityguidelines__ref6,
				communityguidelines__ref7,
				communityguidelines__ref8,
				communityguidelines__ref9,
				communityguidelines__ref10,
				communityguidelines__ref11,
				communityguidelines__ref12,
				communityguidelines__ref13,
				communityguidelines__ref14,
				communityguidelines__ref15,
				communityguidelines__ref16,
				communityguidelines__ref17,
				communityguidelines__ref18,
				communityguidelines__ref19,
				communityguidelines__ref20
			),
			Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
			Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
		);
	};

	return Register;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./components/SVG/404.js


var _04__ref = Object(preact_min["h"])(
	"svg",
	{ "aria-hidden": "true", width: "332", height: "156", viewBox: "0 0 332 156", xmlns: "http://www.w3.org/2000/svg" },
	Object(preact_min["h"])(
		"g",
		{ fill: "none", "fill-rule": "evenodd" },
		Object(preact_min["h"])("path", { d: "M169 0c-28.72 0-52 23.281-52 52h104c0-28.719-23.281-52-52-52m0 4.063c25.065 0 45.698 19.335 47.767 43.874h-95.534C123.302 23.398 143.935 4.063 169 4.063", fill: "#DADCE0" }),
		Object(preact_min["h"])("path", { d: "M169 156c28.72 0 52-23.281 52-52H117c0 28.719 23.28 52 52 52", fill: "#F1F3F4" }),
		Object(preact_min["h"])("path", { fill: "#9AA0A6", d: "M117 104h104V52H117z" }),
		Object(preact_min["h"])("path", { d: "M104 26c0 14.36-11.64 26-26 26S52 40.36 52 26 63.64 0 78 0s26 11.64 26 26", fill: "#F1F3F4" }),
		Object(preact_min["h"])("path", { d: "M52 156h52v-52H52v52zm4.063-4.063h43.874v-43.875H56.063v43.876zM52 0L0 32.5V104h52V0zm-4.063 7.33v92.608H4.063V34.75L47.937 7.33z", fill: "#DADCE0" }),
		Object(preact_min["h"])("path", { fill: "#9AA0A6", d: "M52 104h52V52H52z" }),
		Object(preact_min["h"])("path", { d: "M331.5 26c0 14.36-11.64 26-26 26s-26-11.64-26-26 11.64-26 26-26 26 11.64 26 26", fill: "#F1F3F4" }),
		Object(preact_min["h"])("path", { d: "M279.5 156h52v-52h-52v52zm4.875-4.875h42.25v-42.25h-42.25v42.25zM279.5 0l-52 32.5V104h52V0zm-4.875 8.795v90.33h-42.25V35.202l42.25-26.407z", fill: "#DADCE0" }),
		Object(preact_min["h"])("path", { fill: "#9AA0A6", d: "M279.5 104h52V52h-52z" })
	)
);

var Svg404 = function Svg404() {
	return _04__ref;
};

/* harmony default export */ var _04 = (Svg404);
// EXTERNAL MODULE: ./routes/404/style.css
var _04_style = __webpack_require__("xxi1");
var _04_style_default = /*#__PURE__*/__webpack_require__.n(_04_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/404/index.js






var _04__ref2 = Object(preact_min["h"])(_04, null);

var _04_NotFoundPage = function NotFoundPage(_ref) {
	var rootPath = _ref.rootPath;
	return Object(preact_min["h"])(
		'div',
		null,
		Object(preact_min["h"])(
			'main',
			{ 'class': _04_style_default.a.main, style: 'min-height: 60vh;' },
			_04__ref2,
			Object(preact_min["h"])(
				'h6',
				{ 'class': _04_style_default.a.errorMessage },
				'Error: The URL you requested could not be found.'
			)
		),
		Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
		Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
	);
};

/* harmony default export */ var dummy_loader_js_routes_404 = (_04_NotFoundPage);
// EXTERNAL MODULE: ./routes/faq/style.css
var faq_style = __webpack_require__("kvG9");
var faq_style_default = /*#__PURE__*/__webpack_require__.n(faq_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/faq/index.js


function faq__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function faq__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function faq__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








var faq__ref2 = Object(preact_min["h"])(
  'h2',
  null,
  'FAQ'
);

var faq__ref3 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Session Schedule'
  )
);

var faq__ref4 = Object(preact_min["h"])('br', null);

var faq__ref5 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Community Guidelines'
  )
);

var faq__ref6 = Object(preact_min["h"])('br', null);

var faq__ref7 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Date and location'
  )
);

var faq__ref8 = Object(preact_min["h"])(
  'p',
  null,
  'I/O Extended 2019 Kuala Lumpur will take place on the 16th June 2019 at Sunway University, Bandar Sunway.'
);

var faq__ref9 = Object(preact_min["h"])('br', null);

var faq__ref10 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Stay Informed'
  )
);

var faq__ref11 = Object(preact_min["h"])(
  'p',
  null,
  'To stay up to date on the latest information on sessions, speakers, and activities, be sure to visit the I/O Extended 2019 Kuala Lumpur website, and follow us on ',
  Object(preact_min["h"])(
    'a',
    { href: 'https://www.facebook.com/GDGKualaLumpur/', target: '_blank', rel: 'noopener noreferrer' },
    'Facebook Page'
  ),
  '. You can also follow and join the social conversation about I/O Extended 2019 Kuala Lumpur via official hashtags ',
  Object(preact_min["h"])(
    'b',
    null,
    '#ioxkl19'
  ),
  '. In addition, we\'ll be emailing important information to all registered attendees, along with check-in instructions prior to the conference.'
);

var faq__ref12 = Object(preact_min["h"])('br', null);

var faq__ref13 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Content Formats'
  )
);

var faq__ref14 = Object(preact_min["h"])(
  'p',
  null,
  'During the conference, attendees will be able to attend sessions and hands-on workshops, chat with experts and attendees.'
);

var faq__ref15 = Object(preact_min["h"])('br', null);

var faq__ref16 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Language'
  )
);

var faq__ref17 = Object(preact_min["h"])(
  'p',
  null,
  'All presentations at I/O Extended 2019 Kuala Lumpur will be in English.'
);

var faq__ref18 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Internet Access'
  )
);

var faq__ref19 = Object(preact_min["h"])(
  'p',
  null,
  'Attendees can connect to the WiFi network ',
  Object(preact_min["h"])(
    'span',
    { style: 'color:#d84315' },
    'Radius'
  ),
  ' for the duration of the event.'
);

var faq__ref20 = Object(preact_min["h"])('br', null);

var faq__ref21 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Washroom'
  )
);

var faq__ref22 = Object(preact_min["h"])(
  'p',
  null,
  'Washrooms can be found on either side (East and West) of the Sunway University building, located behind the elevator lobbies.'
);

var faq__ref23 = Object(preact_min["h"])('br', null);

var _ref24 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Drinking Fountain'
  )
);

var _ref25 = Object(preact_min["h"])(
  'p',
  null,
  'Drinking fountain/bottle filling stations can be found next to all washroom entrances.'
);

var _ref26 = Object(preact_min["h"])('br', null);

var _ref27 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Surau/Prayer Room'
  )
);

var _ref28 = Object(preact_min["h"])(
  'p',
  null,
  'The Surau/Prayer Room can be found on the ',
  Object(preact_min["h"])(
    'strong',
    null,
    'East wing'
  ),
  ' of the Sunway University building, on the ',
  Object(preact_min["h"])(
    'strong',
    null,
    'Mezzanine Floor'
  ),
  ', next to the Lunch Box.'
);

var _ref29 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Registration terms & conditions'
  )
);

var _ref30 = Object(preact_min["h"])(
  'ul',
  null,
  Object(preact_min["h"])(
    'li',
    null,
    'Each individual may purchase only one ticket.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'You may not register on behalf of anyone else.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'By registering and accepting any discounts, gifts, or items of value related to I/O Extended 2019 Kuala Lumpur, you certify that you are able to do so in compliance with applicable laws and the internal rules of your organization.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'Tickets may not be sold, bartered, or auctioned in any way, and doing so may result in GDG Kuala Lumpur rendering the ticket null and void without any responsibility to GDG Kuala Lumpur.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'Attendees aren\u2019t permitted to bring guests to I/O Extended 2019 Kuala Lumpur. If you have someone traveling with you, they\u2019ll need to register themselves and purchase an attendee ticket.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'Photographs and/or video taken at I/O Extended 2019 Kuala Lumpur by GDG Kuala Lumpur, or others on behalf of GDG Kuala Lumpur, may include your image or likeness. You agree that GDG Kuala Lumpur may use such photographs and/or video for any purpose without compensation to you.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'All information entered into the registration form must be correct and accurate to the best of your knowledge.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'All registered attendees agree to allow GDG Kuala Lumpur to contact them regarding their registration and attendance at the event. By registering for a ticket, you agree to allow GDG Kuala Lumpur to communicate with you via email with information regarding the event.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'You agree to be solely responsible for your own safety, belongings, and well-being while participating in I/O Extended 2019 Kuala Lumpur. GDG Kuala Lumpur won\'t be liable for your participation in I/O Extended 2019 Kuala Lumpur.'
  ),
  Object(preact_min["h"])(
    'li',
    null,
    'No solicitation or selling of items or services is allowed at I/O Extended 2019 Kuala Lumpur. Any attendee conducting these activities may be removed from the conference.'
  )
);

var _ref31 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Event Attire'
  )
);

var _ref32 = Object(preact_min["h"])(
  'p',
  null,
  'I/O Extended 2019 Kuala Lumpur is a developer event, so please be comfortable and casual. There is no enforced dress code.'
);

var _ref33 = Object(preact_min["h"])('br', null);

var _ref34 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Onsite food & beverages'
  )
);

var _ref35 = Object(preact_min["h"])(
  'p',
  null,
  'Attendees are offered complimentary breakfast, lunch, and tea break.'
);

var _ref36 = Object(preact_min["h"])('br', null);

var _ref37 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Smoking'
  )
);

var _ref38 = Object(preact_min["h"])(
  'p',
  null,
  'Smoking is strictly prohibited in the venue.'
);

var _ref39 = Object(preact_min["h"])('br', null);

var _ref40 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'No Soliciting'
  )
);

var _ref41 = Object(preact_min["h"])(
  'p',
  null,
  'No solicitation or selling of items or services is allowed at I/O Extended 2019 Kuala Lumpur. Any attendee conducting these activities may be removed from the conference.'
);

var _ref42 = Object(preact_min["h"])('br', null);

var _ref43 = Object(preact_min["h"])(
  'p',
  null,
  Object(preact_min["h"])(
    'b',
    null,
    'Community Guidelines'
  )
);

var faq_Faq = function (_Component) {
  faq__inherits(Faq, _Component);

  function Faq() {
    faq__classCallCheck(this, Faq);

    return faq__possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Faq.prototype.handleScroll = function handleScroll() {
    var ele = document.querySelector('.topappbar.mdc-top-app-bar');
    if (document.documentElement.scrollTop < 56) {
      ele.setAttribute('top', true);
    } else {
      ele.removeAttribute('top');
    }
  };

  Faq.prototype.componentDidMount = function componentDidMount() {
    document.title = 'FAQ - I/O Extended 2019 Seoul';
    window.addEventListener('scroll', this.handleScroll, { passive: true });
    this.handleScroll();
  };

  Faq.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('scroll', this.handleScroll);
    document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
  };

  Faq.prototype.render = function render(_ref) {
    var rootPath = _ref.rootPath;

    return Object(preact_min["h"])(
      'div',
      null,
      Object(preact_min["h"])(
        'div',
        { 'class': 'hero' },
        Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
        faq__ref2
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': faq_style_default.a.faq },
        Object(preact_min["h"])(
          'div',
          { 'class': faq_style_default.a.faq_item },
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_title },
            'General'
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_content },
            faq__ref3,
            Object(preact_min["h"])(
              'p',
              null,
              'The schedule can be found ',
              Object(preact_min["h"])(
                'a',
                { href: rootPath + 'schedule' },
                'here'
              ),
              '.'
            ),
            faq__ref4,
            faq__ref5,
            Object(preact_min["h"])(
              'p',
              null,
              'Our community guidelines can be found ',
              Object(preact_min["h"])(
                'a',
                { href: rootPath + 'faq/communityguidelines' },
                'here'
              ),
              '. Be nice to each other, and be respectful and constructive.'
            ),
            faq__ref6,
            faq__ref7,
            faq__ref8,
            faq__ref9,
            faq__ref10,
            faq__ref11,
            faq__ref12,
            faq__ref13,
            faq__ref14,
            faq__ref15,
            faq__ref16,
            faq__ref17
          )
        )
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': faq_style_default.a.faq },
        Object(preact_min["h"])(
          'div',
          { 'class': faq_style_default.a.faq_item },
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_title },
            'Amenities'
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_content },
            faq__ref18,
            faq__ref19,
            faq__ref20,
            faq__ref21,
            faq__ref22,
            faq__ref23,
            _ref24,
            _ref25,
            _ref26,
            _ref27,
            _ref28
          )
        )
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': faq_style_default.a.faq },
        Object(preact_min["h"])(
          'div',
          { 'class': faq_style_default.a.faq_item },
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_title },
            'Registration'
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_content },
            _ref29,
            _ref30
          )
        )
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': faq_style_default.a.faq },
        Object(preact_min["h"])(
          'div',
          { 'class': faq_style_default.a.faq_item },
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_title },
            'Attendance Details'
          ),
          Object(preact_min["h"])(
            'div',
            { 'class': faq_style_default.a.faq_content },
            _ref31,
            _ref32,
            _ref33,
            _ref34,
            _ref35,
            _ref36,
            _ref37,
            _ref38,
            _ref39,
            _ref40,
            _ref41,
            _ref42,
            _ref43,
            Object(preact_min["h"])(
              'p',
              null,
              'Check out the full Community Guidelines ',
              Object(preact_min["h"])(
                'a',
                { href: rootPath + 'faq/communityguidelines' },
                'here'
              ),
              '.'
            )
          )
        )
      ),
      Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
      Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
    );
  };

  return Faq;
}(preact_min["Component"]);


// EXTERNAL MODULE: ./routes/cfp/style.css
var cfp_style = __webpack_require__("o9kt");
var cfp_style_default = /*#__PURE__*/__webpack_require__.n(cfp_style);

// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/cfp/index.js


function cfp__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function cfp__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function cfp__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var cfp__ref2 = Object(preact_min["h"])(
	'iframe',
	{ src: 'https://docs.google.com/forms/d/e/1FAIpQLSeLSSPdRakpp8rG1ZCeMRwzDQ_NEs8K6QnL8_f6JvFtjnLT5g/viewform?embedded=true', width: '640', height: '2050', frameborder: '0', marginheight: '0', marginwidth: '0' },
	'Loading...'
);

var cfp_CallForPresentersPage = function (_Component) {
	cfp__inherits(CallForPresentersPage, _Component);

	function CallForPresentersPage() {
		cfp__classCallCheck(this, CallForPresentersPage);

		return cfp__possibleConstructorReturn(this, _Component.apply(this, arguments));
	}

	CallForPresentersPage.prototype.handleScroll = function handleScroll() {
		var ele = document.querySelector('.topappbar.mdc-top-app-bar');
		if (document.documentElement.scrollTop < 56) {
			ele.setAttribute('top', true);
		} else {
			ele.removeAttribute('top');
		}
	};

	CallForPresentersPage.prototype.componentDidMount = function componentDidMount() {
		document.title = 'Call for Presenters - I/O Extended 2019 Kuala Lumpur';
		window.addEventListener('scroll', this.handleScroll, { passive: true });
		this.handleScroll();
	};

	CallForPresentersPage.prototype.componentWillUnmount = function componentWillUnmount() {
		document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
	};

	CallForPresentersPage.prototype.render = function render(_ref) {
		var rootPath = _ref.rootPath;

		return Object(preact_min["h"])(
			'div',
			null,
			Object(preact_min["h"])(
				'div',
				{ 'class': cfp_style_default.a.cfp },
				cfp__ref2
			),
			Object(preact_min["h"])(
				'div',
				{ 'class': cfp_style_default.a.footer },
				Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
				Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
			)
		);
	};

	return CallForPresentersPage;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/preact-material-components/Dialog/index.js
var Dialog = __webpack_require__("JtzT");
var Dialog_default = /*#__PURE__*/__webpack_require__.n(Dialog);

// EXTERNAL MODULE: ./components/dialog/style.css
var dialog_style = __webpack_require__("dkia");
var dialog_style_default = /*#__PURE__*/__webpack_require__.n(dialog_style);

// CONCATENATED MODULE: ./components/dialog/index.js


function dialog__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dialog__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function dialog__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var dialog__ref3 = Object(preact_min["h"])(
	'svg',
	null,
	Object(preact_min["h"])('path', { d: 'M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z' })
);

var dialog__ref4 = Object(preact_min["h"])(
	'svg',
	null,
	Object(preact_min["h"])('path', { d: 'M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z' })
);

var dialog__ref5 = Object(preact_min["h"])(
	'svg',
	null,
	Object(preact_min["h"])('path', { d: 'M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z' })
);

var dialog__ref6 = Object(preact_min["h"])('path', { fill: '#4768FD', d: 'M12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.72l3.67-3.18c0.67-0.58,0.31-1.68-0.57-1.75l-4.83-0.41 l-1.89-4.46c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75l3.67,3.18l-1.1,4.72 c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27z' });

var dialog__ref7 = Object(preact_min["h"])('path', { d: 'M19.65,9.04l-4.84-0.42l-1.89-4.45c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75 l3.67,3.18l-1.1,4.72c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.73l3.67-3.18 C20.88,10.21,20.53,9.11,19.65,9.04z M12,15.4l-3.76,2.27l1-4.28l-3.32-2.88l4.38-0.38L12,6.1l1.71,4.04l4.38,0.38l-3.32,2.88 l1,4.28L12,15.4z' });

var dialog__ref8 = Object(preact_min["h"])('path', { d: 'M19.65,9.04l-4.84-0.42l-1.89-4.45c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75 l3.67,3.18l-1.1,4.72c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.73l3.67-3.18 C20.88,10.21,20.53,9.11,19.65,9.04z M12,15.4l-3.76,2.27l1-4.28l-3.32-2.88l4.38-0.38L12,6.1l1.71,4.04l4.38,0.38l-3.32,2.88 l1,4.28L12,15.4z' });

var dialog__ref9 = Object(preact_min["h"])('span', { 'class': 'session_topic_dot' });

var dialog__ref10 = Object(preact_min["h"])(
	'h3',
	null,
	'Speakers '
);

var dialog__ref11 = Object(preact_min["h"])(
	'svg',
	null,
	Object(preact_min["h"])(
		'g',
		null,
		Object(preact_min["h"])('path', { d: 'M5,13h11.17l-4.88,4.88c-0.39,0.39-0.39,1.03,0,1.42l0,0c0.39,0.39,1.02,0.39,1.41,0l6.59-6.59c0.39-0.39,0.39-1.02,0-1.41 L12.71,4.7c-0.39-0.39-1.02-0.39-1.41,0l0,0c-0.39,0.39-0.39,1.02,0,1.41L16.17,11H5c-0.55,0-1,0.45-1,1v0C4,12.55,4.45,13,5,13z' })
	)
);

var dialog__ref12 = Object(preact_min["h"])('path', { fill: '#4768FD', d: 'M12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.72l3.67-3.18c0.67-0.58,0.31-1.68-0.57-1.75l-4.83-0.41 l-1.89-4.46c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75l3.67,3.18l-1.1,4.72 c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27z' });

var dialog__ref13 = Object(preact_min["h"])('path', { d: 'M19.65,9.04l-4.84-0.42l-1.89-4.45c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75 l3.67,3.18l-1.1,4.72c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.73l3.67-3.18 C20.88,10.21,20.53,9.11,19.65,9.04z M12,15.4l-3.76,2.27l1-4.28l-3.32-2.88l4.38-0.38L12,6.1l1.71,4.04l4.38,0.38l-3.32,2.88 l1,4.28L12,15.4z' });

var dialog__ref14 = Object(preact_min["h"])('path', { d: 'M19.65,9.04l-4.84-0.42l-1.89-4.45c-0.34-0.81-1.5-0.81-1.84,0L9.19,8.63L4.36,9.04c-0.88,0.07-1.24,1.17-0.57,1.75 l3.67,3.18l-1.1,4.72c-0.2,0.86,0.73,1.54,1.49,1.08L12,17.27l4.15,2.51c0.76,0.46,1.69-0.22,1.49-1.08l-1.1-4.73l3.67-3.18 C20.88,10.21,20.53,9.11,19.65,9.04z M12,15.4l-3.76,2.27l1-4.28l-3.32-2.88l4.38-0.38L12,6.1l1.71,4.04l4.38,0.38l-3.32,2.88 l1,4.28L12,15.4z' });

var dialog__ref15 = Object(preact_min["h"])(
	'svg',
	null,
	Object(preact_min["h"])('path', { d: 'M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z' })
);

var dialog_CustomDialog = function (_Component) {
	dialog__inherits(CustomDialog, _Component);

	CustomDialog.prototype.toggle = function toggle(dataId, dataItem, dataType) {
		this.dialogContainer.scrollTop = 0;
		this.setState({ data: dataItem, id: dataId, type: dataType, showSpeaker: false });
		if (this.scrollingDlg) {
			this.scrollingDlg.MDComponent.show();
		}
		if (dataType === 'speakers') {
			this.setState({ showSpeaker: true, speakerId: dataId });
		}
	};

	CustomDialog.prototype.close = function close() {
		this.scrollingDlg.MDComponent.close();
	};

	CustomDialog.prototype.parseTopic = function parseTopic(topic) {
		topic = topic.replace('_', ' ');
		return topic.charAt(0).toUpperCase() + topic.slice(1);
	};

	function CustomDialog(props) {
		dialog__classCallCheck(this, CustomDialog);

		var _this = dialog__possibleConstructorReturn(this, _Component.call(this));

		_this.state = {
			data: {
				tags: []
			},
			supportShare: false,
			star: false,
			showSpeaker: false,
			speakerId: 0
		};

		_this.showSpeaker = function (item) {
			return function (e) {
				if (_this.props.speakers[item]) {
					_this.setState({ showSpeaker: true, speakerId: item });
					_this.dialogContainer.scrollTop = 0;
					_this.dialogBody.scrollTop = 0;
				}
			};
		};

		_this.hideSpeaker = function () {
			_this.setState({ showSpeaker: false });
			_this.dialogContainer.scrollTop = 0;
			_this.dialogBody.scrollTop = 0;
		};

		_this.star = function (id) {
			return function (e) {
				var star = _this.props.star ? !_this.props.star[id] : true;
				var ref = _this.props.db.ref('/events_site/ioxkl19/users/' + _this.props.user.uid + '/schedule/' + id);
				ref.set(star ? true : null);
			};
		};

		_this.share = function (dataId, data) {
			return function (e) {
				if (navigator.share) {
					navigator.share({
						title: 'I/O Extended 2019 Kuala Lumpur',
						text: 'Check out \'' + data.title + '\' at #ioxkl19',
						url: 'https://events.gdgkl.org/io/schedule/' + dataId
					});
				}
			};
		};

		_this.onClose = function (type) {
			return function (e) {
				Object(preact_router_es["route"])(_this.props.rootPath + _this.state.type);
			};
		};

		_this.profilePicFallback = function () {
			return function (event) {
				event.target.src = _this.props.rootPath + 'assets/person.svg';
			};
		};

		if (typeof window !== 'undefined') {
			if (navigator.share) {
				_this.setState({ supportShare: true });
			}
		}
		return _this;
	}

	CustomDialog.prototype.render = function render(_ref, _ref2) {
		var _this2 = this;

		var rootPath = _ref.rootPath,
		    user = _ref.user,
		    star = _ref.star,
		    speakers = _ref.speakers;
		var id = _ref2.id,
		    data = _ref2.data,
		    type = _ref2.type,
		    supportShare = _ref2.supportShare,
		    showSpeaker = _ref2.showSpeaker,
		    speakerId = _ref2.speakerId;

		return Object(preact_min["h"])(
			Dialog_default.a,
			{ onCancel: this.onClose(type), onAccept: this.onClose(type), 'class': dialog_style_default.a.dialog, ref: function ref(scrollingDlg) {
					_this2.scrollingDlg = scrollingDlg;
				} },
			Object(preact_min["h"])(
				'div',
				{ 'class': dialog_style_default.a.dialog_container, ref: function ref(dialogContainer) {
						_this2.dialogContainer = dialogContainer;
					} },
				Object(preact_min["h"])(
					'div',
					{ 'class': dialog_style_default.a.dialog_header },
					showSpeaker ? type === 'speakers' ? Object(preact_min["h"])(
						Dialog_default.a.FooterButton,
						{ 'class': dialog_style_default.a.back, accept: true },
						dialog__ref3
					) : Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.back, onClick: this.hideSpeaker },
						dialog__ref4
					) : Object(preact_min["h"])(
						Dialog_default.a.FooterButton,
						{ 'class': dialog_style_default.a.back, accept: true },
						dialog__ref5
					),
					showSpeaker ? Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.header_text },
						Object(preact_min["h"])(
							'div',
							null,
							speakers[speakerId].name
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': dialog_style_default.a.header_subtext },
							speakers[speakerId].title
						)
					) : data && Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.header_text },
						data.title
					),
					showSpeaker && (speakers[speakerId].profile_pic ? Object(preact_min["h"])('img', { crossorigin: 'anonymous', 'class': dialog_style_default.a.header_speaker_profile, src: speakers[speakerId].profile_pic, onError: this.profilePicFallback() }) : Object(preact_min["h"])('img', { crossorigin: 'anonymous', 'class': dialog_style_default.a.header_speaker_profile, src: rootPath + 'assets/person.svg' })),
					user && Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.fab, onClick: this.star(id) },
						Object(preact_min["h"])(
							'svg',
							null,
							star ? star[id] ? dialog__ref6 : dialog__ref7 : dialog__ref8
						)
					)
				),
				Object(preact_min["h"])(
					'div',
					{ 'class': dialog_style_default.a.dialog_body, ref: function ref(dialogBody) {
							_this2.dialogBody = dialogBody;
						}, scrollable: true },
					showSpeaker ? Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.speaker_bio },
						speakers[speakerId].bio
					) : Object(preact_min["h"])(
						'div',
						null,
						Object(preact_min["h"])(
							'div',
							{ 'class': dialog_style_default.a.subtitle },
							data.startTime,
							' - ',
							data.endTime,
							', ',
							data.location
						),
						Object(preact_min["h"])(
							'p',
							{ 'class': dialog_style_default.a.dialog_body_description },
							data.description
						),
						Object(preact_min["h"])(
							'div',
							{ 'class': dialog_style_default.a.schedule_event_topics },
							data.topics && data.topics.map(function (item) {
								return Object(preact_min["h"])(
									'div',
									{ id: item, 'class': 'session_topic' },
									dialog__ref9,
									Object(preact_min["h"])(
										'span',
										null,
										_this2.parseTopic(item)
									)
								);
							})
						),
						data.speakers && Object(preact_min["h"])(
							'div',
							{ 'class': dialog_style_default.a.speaker },
							dialog__ref10,
							data.speakers && speakers && data.speakers.map(function (item) {
								return speakers[item] && Object(preact_min["h"])(
									'div',
									{ 'class': dialog_style_default.a.speaker_item, onClick: _this2.showSpeaker(item) },
									speakers[item].profile_pic ? Object(preact_min["h"])('img', { crossorigin: 'anonymous', 'class': dialog_style_default.a.speaker_thumbnail, src: speakers[item].profile_pic, onError: _this2.profilePicFallback() }) : Object(preact_min["h"])('img', { crossorigin: 'anonymous', 'class': dialog_style_default.a.speaker_thumbnail, src: rootPath + 'assets/person.svg' }),
									Object(preact_min["h"])(
										'div',
										{ 'class': dialog_style_default.a.speaker_details },
										Object(preact_min["h"])(
											'div',
											{ 'class': dialog_style_default.a.speaker_name },
											speakers[item].name
										),
										Object(preact_min["h"])(
											'div',
											{ 'class': dialog_style_default.a.speaker_title },
											speakers[item].title
										)
									),
									Object(preact_min["h"])(
										'div',
										{ 'class': dialog_style_default.a.speaker_arrow },
										dialog__ref11
									)
								);
							})
						)
					)
				),
				(supportShare || user) && Object(preact_min["h"])(
					Dialog_default.a.Footer,
					{ 'class': dialog_style_default.a.dialog_footer },
					user && Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.fab, onClick: this.star(id) },
						Object(preact_min["h"])(
							'svg',
							null,
							star ? star[id] ? dialog__ref12 : dialog__ref13 : dialog__ref14
						)
					),
					supportShare && Object(preact_min["h"])(
						'div',
						{ 'class': dialog_style_default.a.share, onClick: this.share(id, data) },
						dialog__ref15
					)
				)
			)
		);
	};

	return CustomDialog;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/preact-material-components/Switch/style.css
var Switch_style = __webpack_require__("IpTH");
var Switch_style_default = /*#__PURE__*/__webpack_require__.n(Switch_style);

// EXTERNAL MODULE: ./routes/schedule/style.css
var schedule_style = __webpack_require__("s3tW");
var schedule_style_default = /*#__PURE__*/__webpack_require__.n(schedule_style);

// CONCATENATED MODULE: ./routes/schedule/schedule-data.js
/* harmony default export */ var schedule_data = ([{
  ampm: '오전',
  time: '11:00',
  events: [{
    title: '등록',
    duration: '60분',
    location: '세종대학교 광개토관',
    topics: []
  }]
}, {
  ampm: '오후',
  time: '12:00',
  events: [{
    title: 'Keynote',
    duration: '20분',
    location: 'Hall A/B/C',
    speaker: '임성혁',
    topics: ['Keynote']
  }]
}, {
  ampm: '오후',
  time: '12:50',
  events: [{
    title: 'What\'s new in Web',
    duration: '40분',
    location: 'Hall A',
    speaker: '장한보람',
    topics: ['Web']
  }, {
    title: 'G Suite \uC571\uACFC Apps Script\uB97C \uC774\uC6A9\uD55C \uC5C5\uBB34',
    duration: '40분',
    location: 'Hall B',
    speaker: '임성혁',
    topics: ['Cloud']
  }, {
    title: '\uBAA8\uB450\uB97C \uC704\uD55C \uC548\uB4DC\uB85C\uC774\uB4DC \uC0C8\uC18C\uC2DD',
    duration: '40분',
    location: 'Hall C',
    speaker: '양찬석',
    topics: ['Android']
  }]
}, {
  ampm: '오후',
  time: '1:45',
  events: [{
    title: 'Flutter\uB97C \uC18C\uAC1C\uD569\uB2C8\uB2E4!',
    duration: '40분',
    location: 'Hall A',
    speaker: '김석용',
    topics: ['Flutter']
  }, {
    title: 'AWS\uC5D0\uC11C GCP \uC62E\uACA8\uAC00\uAE30: A to Z \uB9D0\uACE0 A to G',
    duration: '40분',
    location: 'Hall B',
    speaker: '진겸, 김지훈',
    topics: ['Cloud']
  }, {
    title: 'Material Design at Google I/O x Design Sprint',
    duration: '40분',
    location: 'Hall C',
    speaker: '김은정',
    topics: ['Design']
  }]
}, {
  ampm: '오후',
  time: '2:40',
  events: [{
    title: 'Google Search and JavaScript Sites',
    duration: '40분',
    location: 'Hall A',
    speaker: '조은',
    topics: ['Web']
  }, {
    title: 'Machine Learning in Google I/O 2019',
    duration: '40분',
    location: 'Hall B',
    speaker: '신정규',
    topics: ['ML']
  }, {
    title: 'Accessibility, \uC0AC\uB78C\uC744 \uC704\uD55C \uAE30\uC220\uACFC \uB514\uC790\uC778',
    duration: '40분',
    location: 'Hall C',
    speaker: '오남경',
    topics: ['Design']
  }]
}, {
  ampm: '오후',
  time: '3:40',
  events: [{
    title: 'Community Session',
    duration: '40분',
    location: 'Hall A',
    speaker: '조다영, 진겸, 장한보람',
    topics: ['Community']
  }, {
    title: 'All you need is Google\'s AI Tech',
    duration: '40분',
    location: 'Hall B',
    speaker: '김준성',
    topics: ['ML']
  }, {
    title: 'What\'s New in Android Studio',
    duration: '40분',
    location: 'Hall C',
    speaker: '노현석',
    topics: ['Android']
  }]
}, {
  ampm: '오후',
  time: '4:35',
  events: [{
    title: 'Dart 2 for Flutter',
    duration: '40분',
    location: 'Hall A',
    speaker: '조환',
    topics: ['Flutter']
  }, {
    title: 'AllReduce for distributed learning',
    duration: '40분',
    location: 'Hall B',
    speaker: '한성민',
    topics: ['ML']
  }, {
    title: 'New Android Declarative UI patterns',
    duration: '40분',
    location: 'Hall C',
    speaker: '이승민',
    topics: ['Android']
  }]
}, {
  ampm: '오후',
  time: '5:15',
  events: [{
    title: '폐회',
    duration: '30분',
    location: 'Hall A/B/C',
    topics: []
  }]
}]);
// CONCATENATED MODULE: ../node_modules/preact-cli/lib/lib/webpack/dummy-loader.js!./routes/schedule/index.js


function schedule__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function schedule__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function schedule__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }











var schedule__ref2 = Object(preact_min["h"])(
  'h2',
  null,
  '\uD589\uC0AC\uC77C\uC815'
);

var schedule__ref3 = Object(preact_min["h"])(
  'svg',
  { id: 'slides', viewBox: '0 0 24 24' },
  Object(preact_min["h"])(
    'g',
    { id: 'slides' },
    Object(preact_min["h"])('path', {
      id: 'slides',
      d: 'M19,16H5V8H19M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z'
    })
  )
);

var schedule__ref4 = Object(preact_min["h"])(
  'span',
  { id: 'slides' },
  'View Slides'
);

var dummy_loader_js_routes_schedule_Schedule = function (_Component) {
  schedule__inherits(Schedule, _Component);

  Schedule.prototype.parseTopic = function parseTopic(topic) {
    topic = topic.replace('_', ' ');
    return topic.charAt(0).toUpperCase() + topic.slice(1);
  };

  Schedule.prototype.showEvents = function showEvents(item, userSchedule, user) {
    if (!user && this.state.showMyIO) return false;
    if (!user || !this.state.showMyIO) return true;
    var showEvent = false;
    item.sessions.map(function (item) {
      if (userSchedule && userSchedule[item]) {
        showEvent = true;
      }
    });
    return showEvent;
  };

  Schedule.prototype.showEvent = function showEvent(sessions, item, userSchedule, user) {
    if (sessions && sessions[item]) {
      if (!user && this.state.showMyIO) return false;
      if (!user || !this.state.showMyIO) return true;
      if (userSchedule[item]) return true;
    }
  };

  Schedule.prototype.handleScroll = function handleScroll() {
    var ele = document.querySelector('.topappbar.mdc-top-app-bar');
    if (document.documentElement.scrollTop < 56) {
      ele.setAttribute('top', true);
    } else {
      ele.removeAttribute('top');
    }
  };

  function Schedule(props) {
    schedule__classCallCheck(this, Schedule);

    var _this = schedule__possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      schedule: [],
      sessions: {},
      dialogOpened: false,
      toggleDialog: false,
      showMyIO: false
    };

    _this.toggleDialog = function (id, item) {
      return function (e) {
        if (e.target.id !== 'star' && e.target.id !== 'slides') {
          Object(preact_router_es["route"])(_this.props.rootPath + 'schedule/' + id);
          _this.dialog.toggle(id, item, 'schedule');
        }
      };
    };

    _this.star = function (id) {
      return function (e) {
        var star = _this.props.userSchedule ? !_this.props.userSchedule[id] : true;
        var ref = _this.props.db.ref('/events_site/ioxkl18/users/' + _this.props.user.uid + '/schedule/' + id);
        ref.set(star ? true : null);
      };
    };

    _this.showMyIO = function (state) {
      return function (e) {
        _this.setState({ showMyIO: state });
      };
    };

    _this.id = props.id;
    if (_this.id) {
      _this.setState({ toggleDialog: true });
    }
    return _this;
  }

  Schedule.prototype.componentDidMount = function componentDidMount() {
    document.title = '행사일정 - I/O Extended 2019 Seoul';
    window.addEventListener('scroll', this.handleScroll, { passive: true });
    this.handleScroll();
  };

  Schedule.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('scroll', this.handleScroll);
    document.querySelector('.topappbar.mdc-top-app-bar').removeAttribute('top');
  };

  Schedule.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.id !== this.props.id) {
      if (nextProps.id) {
        this.dialog.toggle(nextProps.id, nextProps.sessions[nextProps.id], 'schedule');
      } else {
        this.dialog.close();
      }
    }
    if (nextProps.id && nextProps.sessions && nextProps.schedule && this.state.toggleDialog) {
      if (nextProps.sessions[nextProps.id]) {
        this.setState({ toggleDialog: false });
        this.dialog.toggle(nextProps.id, nextProps.sessions[nextProps.id], 'schedule');
      }
    }
  };

  Schedule.prototype.render = function render(_ref) {
    var _this2 = this;

    var rootPath = _ref.rootPath,
        sessions = _ref.sessions,
        schedule = _ref.schedule;

    return Object(preact_min["h"])(
      'div',
      null,
      Object(preact_min["h"])(
        'div',
        { 'class': schedule_style_default.a.hero + ' hero' },
        Object(preact_min["h"])(io_logo_IoLogo, { rootPath: rootPath }),
        schedule__ref2
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': schedule_style_default.a.schedule },
        schedule_data.map(function (row) {
          return Object(preact_min["h"])(
            'div',
            { 'class': schedule_style_default.a.schedule_section },
            Object(preact_min["h"])(
              'div',
              { 'class': schedule_style_default.a.schedule_content },
              Object(preact_min["h"])(
                'div',
                { 'class': schedule_style_default.a.schedule_time },
                Object(preact_min["h"])(
                  'span',
                  { 'class': 'ampm' },
                  row.ampm
                ),
                row.time
              ),
              Object(preact_min["h"])(
                'div',
                { 'class': schedule_style_default.a.schedule_events },
                row.events.map(function (event) {
                  return Object(preact_min["h"])(
                    'div',
                    { 'class': schedule_style_default.a.schedule_event },
                    Object(preact_min["h"])(
                      'div',
                      { 'class': schedule_style_default.a.schedule_event_details },
                      Object(preact_min["h"])(
                        'div',
                        { 'class': schedule_style_default.a.schedule_event_title },
                        event.title,
                        event.speaker && Object(preact_min["h"])(
                          'span',
                          { 'class': schedule_style_default.a.schedule_event_speaker },
                          event.speaker
                        )
                      ),
                      Object(preact_min["h"])(
                        'div',
                        { 'class': schedule_style_default.a.schedule_event_meta },
                        Object(preact_min["h"])(
                          'div',
                          { 'class': schedule_style_default.a.schedule_event_description },
                          event.duration,
                          ' / ',
                          event.location
                        ),
                        Object(preact_min["h"])(
                          'div',
                          { 'class': schedule_style_default.a.schedule_event_topics },
                          event.topics.map(function (topic) {
                            return Object(preact_min["h"])(
                              'div',
                              { 'class': 'session_topic' },
                              Object(preact_min["h"])(
                                'span',
                                null,
                                topic
                              )
                            );
                          })
                        )
                      )
                    )
                  );
                })
              )
            )
          );
        })
      ),
      schedule && Object(preact_min["h"])(
        'div',
        { 'class': schedule_style_default.a.schedule },
        schedule.map(function (item) {
          return _this2.showEvents(item, userSchedule, user) && Object(preact_min["h"])(
            'div',
            { 'class': schedule_style_default.a.schedule_section },
            Object(preact_min["h"])(
              'div',
              { 'class': schedule_style_default.a.schedule_content },
              Object(preact_min["h"])(
                'div',
                { 'class': schedule_style_default.a.schedule_time },
                item.startTime,
                Object(preact_min["h"])(
                  'span',
                  null,
                  item.ampm
                )
              ),
              Object(preact_min["h"])(
                'div',
                { 'class': schedule_style_default.a.schedule_events },
                item.sessions.map(function (item) {
                  return _this2.showEvent(sessions, item, userSchedule, user) && Object(preact_min["h"])(
                    'div',
                    {
                      'class': schedule_style_default.a.schedule_event,
                      onClick: _this2.toggleDialog(item, sessions[item])
                    },
                    Object(preact_min["h"])(
                      'div',
                      { 'class': schedule_style_default.a.schedule_event_details },
                      Object(preact_min["h"])(
                        'div',
                        { 'class': schedule_style_default.a.schedule_event_title },
                        sessions[item].title
                      ),
                      Object(preact_min["h"])(
                        'div',
                        { 'class': schedule_style_default.a.schedule_event_meta },
                        Object(preact_min["h"])(
                          'div',
                          { 'class': schedule_style_default.a.schedule_event_description },
                          sessions[item].duration,
                          ' / ',
                          sessions[item].location
                        ),
                        Object(preact_min["h"])(
                          'div',
                          { 'class': schedule_style_default.a.schedule_event_topics },
                          sessions[item].topics && sessions[item].topics.map(function (item) {
                            return Object(preact_min["h"])(
                              'div',
                              { id: item, 'class': 'session_topic' },
                              Object(preact_min["h"])(
                                'span',
                                null,
                                _this2.parseTopic(item)
                              )
                            );
                          })
                        )
                      ),
                      sessions[item].slides && Object(preact_min["h"])(
                        'a',
                        {
                          'class': schedule_style_default.a.slides,
                          id: 'slides',
                          target: '_blank',
                          rel: 'noopener noreferrer',
                          href: sessions[item].slides
                        },
                        schedule__ref3,
                        schedule__ref4
                      )
                    )
                  );
                })
              )
            )
          );
        })
      ),
      Object(preact_min["h"])(
        'div',
        { 'class': schedule_style_default.a.footer },
        Object(preact_min["h"])(social_footer_SocialFooter, { rootPath: rootPath }),
        Object(preact_min["h"])(footer_Footer, { rootPath: rootPath })
      )
    );
  };

  return Schedule;
}(preact_min["Component"]);


// EXTERNAL MODULE: ../node_modules/preact-material-components/Snackbar/index.js
var Snackbar = __webpack_require__("+XMp");
var Snackbar_default = /*#__PURE__*/__webpack_require__.n(Snackbar);

// EXTERNAL MODULE: ../node_modules/preact-material-components/Snackbar/style.css
var Snackbar_style = __webpack_require__("pln1");
var Snackbar_style_default = /*#__PURE__*/__webpack_require__.n(Snackbar_style);

// CONCATENATED MODULE: ./components/app.js


function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function app__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function app__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function app__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }















var app_App = function (_Component) {
  app__inherits(App, _Component);

  App.prototype.componentDidMount = function componentDidMount() {
    window.addEventListener('showRefreshSnack', this.showRefreshSnack);
  };

  App.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('showRefreshSnack', this.showRefreshSnack);
  };

  function App() {
    app__classCallCheck(this, App);

    var _this = app__possibleConstructorReturn(this, _Component.call(this));

    _this.handleRoute = function (e) {
      _this.currentUrl = e.url;
      if (typeof window !== 'undefined') {
        if (window.swUpdate) return window.location = e.url;
        if (e.previous) {
          if (e.url.startsWith(_this.state.rootPath + 'schedule') && e.previous.startsWith(_this.state.rootPath + 'schedule')) {} else if (e.url.startsWith(_this.state.rootPath + 'speakers') && e.previous.startsWith(_this.state.rootPath + 'speakers')) {} else {
            document.documentElement.scrollTop = 0;
          }
        }
        if (window.ga) {
          window.ga('set', 'page', 'window.location.pathname');
          window.ga('send', 'pageview');
        }
      }
    };

    _this.showRefreshSnack = function () {
      _this.snackbar.MDComponent.show({
        message: 'Site updated. Refresh this page for better experience.',
        actionText: 'Refresh',
        timeout: 5000,
        actionHandler: function actionHandler() {
          window.location.reload();
        }
      });
    };

    _this.state = {
      schedule: [],
      partners: {},
      sessions: {},
      speakers: {},
      userSchedule: {},
      info: {},
      rootPath: '/'
    };

    if (typeof window !== 'undefined') {
      _this.setState({ rootPath: window.GlobalVars.rootPath || '/' });
    }
    return _this;
  }

  App.prototype.render = function render(_ref, _ref2) {
    var _this2 = this;

    var currentUser = _ref2.currentUser,
        partners = _ref2.partners,
        info = _ref2.info,
        rootPath = _ref2.rootPath;

    _objectDestructuringEmpty(_ref);

    return Object(preact_min["h"])(
      'div',
      { id: 'app' },
      Object(preact_min["h"])(navbar_NavBar, { rootPath: rootPath }),
      Object(preact_min["h"])(
        preact_router_es["Router"],
        { onChange: this.handleRoute },
        Object(preact_min["h"])(attending_Attending, { path: rootPath + 'attending/', rootPath: rootPath, info: info }),
        Object(preact_min["h"])(registration_Registration, {
          path: rootPath + 'registration/',
          user: currentUser,
          info: info,
          rootPath: rootPath
        }),
        Object(preact_min["h"])(communityguidelines_Register, { path: rootPath + 'faq/communityguidelines/', rootPath: rootPath }),
        Object(preact_min["h"])(faq_Faq, { path: rootPath + 'faq/', rootPath: rootPath }),
        Object(preact_min["h"])(home_Home, { path: rootPath, rootPath: rootPath, partners: partners }),
        Object(preact_min["h"])(cfp_CallForPresentersPage, { path: rootPath + 'cfp/', rootPath: rootPath, info: info }),
        Object(preact_min["h"])(dummy_loader_js_routes_schedule_Schedule, { path: rootPath + 'schedule/' }),
        Object(preact_min["h"])(dummy_loader_js_routes_404, { rootPath: rootPath, 'default': true })
      ),
      Object(preact_min["h"])(Snackbar_default.a, {
        ref: function ref(snackbar) {
          _this2.snackbar = snackbar;
        }
      })
    );
  };

  return App;
}(preact_min["Component"]);


// CONCATENATED MODULE: ./index.js



/* harmony default export */ var index_0 = __webpack_exports__["default"] = (app_App);

/***/ }),

/***/ "JtzT":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Dialog = exports.DialogFooterButton = exports.DialogFooter = exports.DialogBody = exports.DialogHeader = void 0;

var _get2 = _interopRequireDefault(__webpack_require__("J5U+"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _typeof2 = _interopRequireDefault(__webpack_require__("b9XL"));

var _dialog = __webpack_require__("5sRW");

var _bindDecorator = __webpack_require__("gKs0");

var _preact = __webpack_require__("KM04");

var _MaterialComponent5 = _interopRequireDefault(__webpack_require__("uc5p"));

var _Button2 = __webpack_require__("7/cg");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var DialogHeader =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(DialogHeader, _MaterialComponent);

  function DialogHeader() {
    var _this;

    (0, _classCallCheck2.default)(this, DialogHeader);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogHeader).apply(this, arguments));
    _this.componentName = 'dialog__header';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(DialogHeader, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("header", _extends({}, props), (0, _preact.h)("h2", {
        className: "mdc-dialog__header__title"
      }, props.children));
    }
  }]);
  return DialogHeader;
}(_MaterialComponent5.default);

exports.DialogHeader = DialogHeader;

__decorate([_bindDecorator.bind], DialogHeader.prototype, "materialDom", null);

var DialogBody =
/*#__PURE__*/
function (_MaterialComponent2) {
  (0, _inherits2.default)(DialogBody, _MaterialComponent2);

  function DialogBody() {
    var _this2;

    (0, _classCallCheck2.default)(this, DialogBody);
    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogBody).apply(this, arguments));
    _this2.componentName = 'dialog__body';
    _this2.mdcProps = ['scrollable'];
    return _this2;
  }

  (0, _createClass2.default)(DialogBody, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("section", _extends({}, props), props.children);
    }
  }]);
  return DialogBody;
}(_MaterialComponent5.default);

exports.DialogBody = DialogBody;

__decorate([_bindDecorator.bind], DialogBody.prototype, "materialDom", null);

var DialogFooter =
/*#__PURE__*/
function (_MaterialComponent3) {
  (0, _inherits2.default)(DialogFooter, _MaterialComponent3);

  function DialogFooter() {
    var _this3;

    (0, _classCallCheck2.default)(this, DialogFooter);
    _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogFooter).apply(this, arguments));
    _this3.componentName = 'dialog__footer';
    _this3.mdcProps = [];
    return _this3;
  }

  (0, _createClass2.default)(DialogFooter, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("footer", _extends({}, props), props.children);
    }
  }]);
  return DialogFooter;
}(_MaterialComponent5.default);

exports.DialogFooter = DialogFooter;

__decorate([_bindDecorator.bind], DialogFooter.prototype, "materialDom", null);

var DialogFooterButton =
/*#__PURE__*/
function (_Button) {
  (0, _inherits2.default)(DialogFooterButton, _Button);

  function DialogFooterButton() {
    var _this4;

    (0, _classCallCheck2.default)(this, DialogFooterButton);
    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DialogFooterButton).apply(this, arguments));
    _this4.componentName = 'dialog__footer__button';
    _this4.mdcProps = ['cancel', 'accept'];
    return _this4;
  }

  (0, _createClass2.default)(DialogFooterButton, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("button", _extends({}, props, {
        className: "mdc-button",
        ref: this.setControlRef
      }), props.children);
    }
  }]);
  return DialogFooterButton;
}(_Button2.Button);

exports.DialogFooterButton = DialogFooterButton;

__decorate([_bindDecorator.bind], DialogFooterButton.prototype, "materialDom", null);

var Dialog =
/*#__PURE__*/
function (_MaterialComponent4) {
  (0, _inherits2.default)(Dialog, _MaterialComponent4);

  function Dialog() {
    var _this5;

    (0, _classCallCheck2.default)(this, Dialog);
    _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Dialog).apply(this, arguments));
    _this5.componentName = 'dialog';
    _this5.mdcProps = [];
    return _this5;
  }

  (0, _createClass2.default)(Dialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Dialog.prototype), "componentDidMount", this).call(this);

      if (this.control) {
        this.MDComponent = new _dialog.MDCDialog(this.control);
        this.MDComponent.listen('MDCDialog:accept', this.onAccept);
        this.MDComponent.listen('MDCDialog:cancel', this.onCancel);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Dialog.prototype), "componentWillUnmount", this).call(this);

      if (this.MDComponent) {
        this.MDComponent.unlisten('MDCDialog:accept', this.onAccept);
        this.MDComponent.unlisten('MDCDialog:cancel', this.onCancel);
        this.MDComponent.destroy();
      }
    }
  }, {
    key: "onAccept",
    value: function onAccept(e) {
      if (this.props.onAccept) {
        this.props.onAccept(e);
      }
    }
  }, {
    key: "onCancel",
    value: function onCancel(e) {
      if (this.props.onCancel) {
        this.props.onCancel(e);
      }
    }
  }, {
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("dialog", _extends({
        role: 'alertdialog',
        ref: this.setControlRef
      }, props), (0, _preact.h)("div", {
        className: "mdc-dialog__surface"
      }, props.children), (0, _preact.h)("div", {
        className: "mdc-dialog__backdrop"
      }));
    }
  }]);
  return Dialog;
}(_MaterialComponent5.default);

exports.Dialog = Dialog;

__decorate([_bindDecorator.bind], Dialog.prototype, "onAccept", null);

__decorate([_bindDecorator.bind], Dialog.prototype, "onCancel", null);

var default_1 =
/*#__PURE__*/
function (_Dialog) {
  (0, _inherits2.default)(default_1, _Dialog);

  function default_1() {
    (0, _classCallCheck2.default)(this, default_1);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(default_1).apply(this, arguments));
  }

  return default_1;
}(Dialog);

exports.default = default_1;
default_1.Header = DialogHeader;
default_1.Body = DialogBody;
default_1.Footer = DialogFooter;
default_1.FooterButton = DialogFooterButton;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "K5Tb":
/***/ (function(module, exports) {

module.exports = extend;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

/***/ }),

/***/ "KM04":
/***/ (function(module, exports, __webpack_require__) {

!function () {
  "use strict";
  function e(e, t) {
    var n,
        o,
        r,
        i,
        l = W;for (i = arguments.length; i-- > 2;) {
      P.push(arguments[i]);
    }t && null != t.children && (P.length || P.push(t.children), delete t.children);while (P.length) {
      if ((o = P.pop()) && void 0 !== o.pop) for (i = o.length; i--;) {
        P.push(o[i]);
      } else "boolean" == typeof o && (o = null), (r = "function" != typeof e) && (null == o ? o = "" : "number" == typeof o ? o += "" : "string" != typeof o && (r = !1)), r && n ? l[l.length - 1] += o : l === W ? l = [o] : l.push(o), n = r;
    }var a = new T();return a.nodeName = e, a.children = l, a.attributes = null == t ? void 0 : t, a.key = null == t ? void 0 : t.key, void 0 !== M.vnode && M.vnode(a), a;
  }function t(e, t) {
    for (var n in t) {
      e[n] = t[n];
    }return e;
  }function n(e, t) {
    null != e && ("function" == typeof e ? e(t) : e.current = t);
  }function o(n, o) {
    return e(n.nodeName, t(t({}, n.attributes), o), arguments.length > 2 ? [].slice.call(arguments, 2) : n.children);
  }function r(e) {
    !e.__d && (e.__d = !0) && 1 == V.push(e) && (M.debounceRendering || D)(i);
  }function i() {
    var e;while (e = V.pop()) {
      e.__d && x(e);
    }
  }function l(e, t, n) {
    return "string" == typeof t || "number" == typeof t ? void 0 !== e.splitText : "string" == typeof t.nodeName ? !e._componentConstructor && a(e, t.nodeName) : n || e._componentConstructor === t.nodeName;
  }function a(e, t) {
    return e.__n === t || e.nodeName.toLowerCase() === t.toLowerCase();
  }function u(e) {
    var n = t({}, e.attributes);n.children = e.children;var o = e.nodeName.defaultProps;if (void 0 !== o) for (var r in o) {
      void 0 === n[r] && (n[r] = o[r]);
    }return n;
  }function c(e, t) {
    var n = t ? document.createElementNS("http://www.w3.org/2000/svg", e) : document.createElement(e);return n.__n = e, n;
  }function p(e) {
    var t = e.parentNode;t && t.removeChild(e);
  }function s(e, t, o, r, i) {
    if ("className" === t && (t = "class"), "key" === t) ;else if ("ref" === t) n(o, null), n(r, e);else if ("class" !== t || i) {
      if ("style" === t) {
        if (r && "string" != typeof r && "string" != typeof o || (e.style.cssText = r || ""), r && "object" == typeof r) {
          if ("string" != typeof o) for (var l in o) {
            l in r || (e.style[l] = "");
          }for (var l in r) {
            e.style[l] = "number" == typeof r[l] && !1 === E.test(l) ? r[l] + "px" : r[l];
          }
        }
      } else if ("dangerouslySetInnerHTML" === t) r && (e.innerHTML = r.__html || "");else if ("o" == t[0] && "n" == t[1]) {
        var a = t !== (t = t.replace(/Capture$/, ""));t = t.toLowerCase().substring(2), r ? o || e.addEventListener(t, _, a) : e.removeEventListener(t, _, a), (e.__l || (e.__l = {}))[t] = r;
      } else if ("list" !== t && "type" !== t && !i && t in e) {
        try {
          e[t] = null == r ? "" : r;
        } catch (e) {}null != r && !1 !== r || "spellcheck" == t || e.removeAttribute(t);
      } else {
        var u = i && t !== (t = t.replace(/^xlink:?/, ""));null == r || !1 === r ? u ? e.removeAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase()) : e.removeAttribute(t) : "function" != typeof r && (u ? e.setAttributeNS("http://www.w3.org/1999/xlink", t.toLowerCase(), r) : e.setAttribute(t, r));
      }
    } else e.className = r || "";
  }function _(e) {
    return this.__l[e.type](M.event && M.event(e) || e);
  }function f() {
    var e;while (e = A.shift()) {
      M.afterMount && M.afterMount(e), e.componentDidMount && e.componentDidMount();
    }
  }function d(e, t, n, o, r, i) {
    H++ || (R = null != r && void 0 !== r.ownerSVGElement, B = null != e && !("__preactattr_" in e));var l = h(e, t, n, o, i);return r && l.parentNode !== r && r.appendChild(l), --H || (B = !1, i || f()), l;
  }function h(e, t, n, o, r) {
    var i = e,
        l = R;if (null != t && "boolean" != typeof t || (t = ""), "string" == typeof t || "number" == typeof t) return e && void 0 !== e.splitText && e.parentNode && (!e._component || r) ? e.nodeValue != t && (e.nodeValue = t) : (i = document.createTextNode(t), e && (e.parentNode && e.parentNode.replaceChild(i, e), v(e, !0))), i.__preactattr_ = !0, i;var u = t.nodeName;if ("function" == typeof u) return N(e, t, n, o);if (R = "svg" === u || "foreignObject" !== u && R, u += "", (!e || !a(e, u)) && (i = c(u, R), e)) {
      while (e.firstChild) {
        i.appendChild(e.firstChild);
      }e.parentNode && e.parentNode.replaceChild(i, e), v(e, !0);
    }var p = i.firstChild,
        s = i.__preactattr_,
        _ = t.children;if (null == s) {
      s = i.__preactattr_ = {};for (var f = i.attributes, d = f.length; d--;) {
        s[f[d].name] = f[d].value;
      }
    }return !B && _ && 1 === _.length && "string" == typeof _[0] && null != p && void 0 !== p.splitText && null == p.nextSibling ? p.nodeValue != _[0] && (p.nodeValue = _[0]) : (_ && _.length || null != p) && m(i, _, n, o, B || null != s.dangerouslySetInnerHTML), y(i, t.attributes, s), R = l, i;
  }function m(e, t, n, o, r) {
    var i,
        a,
        u,
        c,
        s,
        _ = e.childNodes,
        f = [],
        d = {},
        m = 0,
        b = 0,
        y = _.length,
        g = 0,
        w = t ? t.length : 0;if (0 !== y) for (var C = 0; C < y; C++) {
      var x = _[C],
          N = x.__preactattr_,
          k = w && N ? x._component ? x._component.__k : N.key : null;null != k ? (m++, d[k] = x) : (N || (void 0 !== x.splitText ? !r || x.nodeValue.trim() : r)) && (f[g++] = x);
    }if (0 !== w) for (var C = 0; C < w; C++) {
      c = t[C], s = null;var k = c.key;if (null != k) m && void 0 !== d[k] && (s = d[k], d[k] = void 0, m--);else if (b < g) for (i = b; i < g; i++) {
        if (void 0 !== f[i] && l(a = f[i], c, r)) {
          s = a, f[i] = void 0, i === g - 1 && g--, i === b && b++;break;
        }
      }s = h(s, c, n, o), u = _[C], s && s !== e && s !== u && (null == u ? e.appendChild(s) : s === u.nextSibling ? p(u) : e.insertBefore(s, u));
    }if (m) for (var C in d) {
      void 0 !== d[C] && v(d[C], !1);
    }while (b <= g) {
      void 0 !== (s = f[g--]) && v(s, !1);
    }
  }function v(e, t) {
    var o = e._component;o ? k(o) : (null != e.__preactattr_ && n(e.__preactattr_.ref, null), !1 !== t && null != e.__preactattr_ || p(e), b(e));
  }function b(e) {
    e = e.lastChild;while (e) {
      var t = e.previousSibling;v(e, !0), e = t;
    }
  }function y(e, t, n) {
    var o;for (o in n) {
      t && null != t[o] || null == n[o] || s(e, o, n[o], n[o] = void 0, R);
    }for (o in t) {
      "children" === o || "innerHTML" === o || o in n && t[o] === ("value" === o || "checked" === o ? e[o] : n[o]) || s(e, o, n[o], n[o] = t[o], R);
    }
  }function g(e, t, n) {
    var o,
        r = F.length;e.prototype && e.prototype.render ? (o = new e(t, n), U.call(o, t, n)) : (o = new U(t, n), o.constructor = e, o.render = w);while (r--) {
      if (F[r].constructor === e) return o.__b = F[r].__b, F.splice(r, 1), o;
    }return o;
  }function w(e, t, n) {
    return this.constructor(e, n);
  }function C(e, t, o, i, l) {
    e.__x || (e.__x = !0, e.__r = t.ref, e.__k = t.key, delete t.ref, delete t.key, void 0 === e.constructor.getDerivedStateFromProps && (!e.base || l ? e.componentWillMount && e.componentWillMount() : e.componentWillReceiveProps && e.componentWillReceiveProps(t, i)), i && i !== e.context && (e.__c || (e.__c = e.context), e.context = i), e.__p || (e.__p = e.props), e.props = t, e.__x = !1, 0 !== o && (1 !== o && !1 === M.syncComponentUpdates && e.base ? r(e) : x(e, 1, l)), n(e.__r, e));
  }function x(e, n, o, r) {
    if (!e.__x) {
      var i,
          l,
          a,
          c = e.props,
          p = e.state,
          s = e.context,
          _ = e.__p || c,
          h = e.__s || p,
          m = e.__c || s,
          b = e.base,
          y = e.__b,
          w = b || y,
          N = e._component,
          U = !1,
          S = m;if (e.constructor.getDerivedStateFromProps && (p = t(t({}, p), e.constructor.getDerivedStateFromProps(c, p)), e.state = p), b && (e.props = _, e.state = h, e.context = m, 2 !== n && e.shouldComponentUpdate && !1 === e.shouldComponentUpdate(c, p, s) ? U = !0 : e.componentWillUpdate && e.componentWillUpdate(c, p, s), e.props = c, e.state = p, e.context = s), e.__p = e.__s = e.__c = e.__b = null, e.__d = !1, !U) {
        i = e.render(c, p, s), e.getChildContext && (s = t(t({}, s), e.getChildContext())), b && e.getSnapshotBeforeUpdate && (S = e.getSnapshotBeforeUpdate(_, h));var L,
            T,
            P = i && i.nodeName;if ("function" == typeof P) {
          var W = u(i);l = N, l && l.constructor === P && W.key == l.__k ? C(l, W, 1, s, !1) : (L = l, e._component = l = g(P, W, s), l.__b = l.__b || y, l.__u = e, C(l, W, 0, s, !1), x(l, 1, o, !0)), T = l.base;
        } else a = w, L = N, L && (a = e._component = null), (w || 1 === n) && (a && (a._component = null), T = d(a, i, s, o || !b, w && w.parentNode, !0));if (w && T !== w && l !== N) {
          var D = w.parentNode;D && T !== D && (D.replaceChild(T, w), L || (w._component = null, v(w, !1)));
        }if (L && k(L), e.base = T, T && !r) {
          var E = e,
              V = e;while (V = V.__u) {
            (E = V).base = T;
          }T._component = E, T._componentConstructor = E.constructor;
        }
      }!b || o ? A.push(e) : U || (e.componentDidUpdate && e.componentDidUpdate(_, h, S), M.afterUpdate && M.afterUpdate(e));while (e.__h.length) {
        e.__h.pop().call(e);
      }H || r || f();
    }
  }function N(e, t, n, o) {
    var r = e && e._component,
        i = r,
        l = e,
        a = r && e._componentConstructor === t.nodeName,
        c = a,
        p = u(t);while (r && !c && (r = r.__u)) {
      c = r.constructor === t.nodeName;
    }return r && c && (!o || r._component) ? (C(r, p, 3, n, o), e = r.base) : (i && !a && (k(i), e = l = null), r = g(t.nodeName, p, n), e && !r.__b && (r.__b = e, l = null), C(r, p, 1, n, o), e = r.base, l && e !== l && (l._component = null, v(l, !1))), e;
  }function k(e) {
    M.beforeUnmount && M.beforeUnmount(e);var t = e.base;e.__x = !0, e.componentWillUnmount && e.componentWillUnmount(), e.base = null;var o = e._component;o ? k(o) : t && (null != t.__preactattr_ && n(t.__preactattr_.ref, null), e.__b = t, p(t), F.push(e), b(t)), n(e.__r, null);
  }function U(e, t) {
    this.__d = !0, this.context = t, this.props = e, this.state = this.state || {}, this.__h = [];
  }function S(e, t, n) {
    return d(n, e, {}, !1, t, !1);
  }function L() {
    return {};
  }var T = function T() {},
      M = {},
      P = [],
      W = [],
      D = "function" == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout,
      E = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i,
      V = [],
      A = [],
      H = 0,
      R = !1,
      B = !1,
      F = [];t(U.prototype, { setState: function setState(e, n) {
      this.__s || (this.__s = this.state), this.state = t(t({}, this.state), "function" == typeof e ? e(this.state, this.props) : e), n && this.__h.push(n), r(this);
    }, forceUpdate: function forceUpdate(e) {
      e && this.__h.push(e), x(this, 2);
    }, render: function render() {} });var j = { h: e, createElement: e, cloneElement: o, createRef: L, Component: U, render: S, rerender: i, options: M }; true ? module.exports = j : self.preact = j;
}();
//# sourceMappingURL=preact.min.js.map

/***/ }),

/***/ "MeGi":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Icon = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _preact = __webpack_require__("KM04");

var _MaterialComponent2 = _interopRequireDefault(__webpack_require__("uc5p"));

var Icon =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(Icon, _MaterialComponent);

  function Icon() {
    var _this;

    (0, _classCallCheck2.default)(this, Icon);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Icon).apply(this, arguments));
    _this.componentName = 'icon';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(Icon, [{
    key: "materialDom",
    value: function materialDom(props) {
      var classes = ['material-icons']; // CardActionIcon sends className

      if (props.className) {
        classes.push(props.className);
      }

      return (0, _preact.h)("i", _extends({}, props, {
        className: classes.join(' ')
      }), props.children);
    }
  }]);
  return Icon;
}(_MaterialComponent2.default);

exports.Icon = Icon;
var _default = Icon;
exports.default = _default;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "NFzA":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/adapter.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Top App Bar
 *
 * Defines the shape of the adapter expected by the foundation. Implement this
 * adapter to integrate the Top App Bar into your framework. See
 * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md
 * for more information.
 *
 * @record
 */
var MDCTopAppBarAdapter = function () {
  function MDCTopAppBarAdapter() {
    _classCallCheck(this, MDCTopAppBarAdapter);
  }

  /**
   * Adds a class to the root Element.
   * @param {string} className
   */
  MDCTopAppBarAdapter.prototype.addClass = function addClass(className) {};

  /**
   * Removes a class from the root Element.
   * @param {string} className
   */


  MDCTopAppBarAdapter.prototype.removeClass = function removeClass(className) {};

  /**
   * Returns true if the root Element contains the given class.
   * @param {string} className
   * @return {boolean}
   */


  MDCTopAppBarAdapter.prototype.hasClass = function hasClass(className) {};

  /**
   * Sets the specified inline style property on the root Element to the given value.
   * @param {string} property
   * @param {string} value
   */


  MDCTopAppBarAdapter.prototype.setStyle = function setStyle(property, value) {};

  /**
   * Gets the height of the top app bar.
   * @return {number}
   */


  MDCTopAppBarAdapter.prototype.getTopAppBarHeight = function getTopAppBarHeight() {};

  /**
   * Registers an event handler on the navigation icon element for a given event.
   * @param {string} type
   * @param {function(!Event): undefined} handler
   */


  MDCTopAppBarAdapter.prototype.registerNavigationIconInteractionHandler = function registerNavigationIconInteractionHandler(type, handler) {};

  /**
   * Deregisters an event handler on the navigation icon element for a given event.
   * @param {string} type
   * @param {function(!Event): undefined} handler
   */


  MDCTopAppBarAdapter.prototype.deregisterNavigationIconInteractionHandler = function deregisterNavigationIconInteractionHandler(type, handler) {};

  /**
   * Emits an event when the navigation icon is clicked.
   */


  MDCTopAppBarAdapter.prototype.notifyNavigationIconClicked = function notifyNavigationIconClicked() {};

  /** @param {function(!Event)} handler */


  MDCTopAppBarAdapter.prototype.registerScrollHandler = function registerScrollHandler(handler) {};

  /** @param {function(!Event)} handler */


  MDCTopAppBarAdapter.prototype.deregisterScrollHandler = function deregisterScrollHandler(handler) {};

  /** @param {function(!Event)} handler */


  MDCTopAppBarAdapter.prototype.registerResizeHandler = function registerResizeHandler(handler) {};

  /** @param {function(!Event)} handler */


  MDCTopAppBarAdapter.prototype.deregisterResizeHandler = function deregisterResizeHandler(handler) {};

  /** @return {number} */


  MDCTopAppBarAdapter.prototype.getViewportScrollY = function getViewportScrollY() {};

  /** @return {number} */


  MDCTopAppBarAdapter.prototype.getTotalActionItems = function getTotalActionItems() {};

  return MDCTopAppBarAdapter;
}();

/* harmony default export */ var top_app_bar_adapter = (MDCTopAppBarAdapter);
// EXTERNAL MODULE: ../node_modules/@material/base/component.js
var component = __webpack_require__("EQDb");

// EXTERNAL MODULE: ../node_modules/@material/ripple/index.js + 4 modules
var ripple = __webpack_require__("vkNc");

// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/constants.js
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/** @enum {string} */
var cssClasses = {
  FIXED_CLASS: 'mdc-top-app-bar--fixed',
  FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
  SHORT_CLASS: 'mdc-top-app-bar--short',
  SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item',
  SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed'
};

/** @enum {number} */
var numbers = {
  DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
  MAX_TOP_APP_BAR_HEIGHT: 128
};

/** @enum {string} */
var strings = {
  ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
  NAVIGATION_EVENT: 'MDCTopAppBar:nav',
  NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
  ROOT_SELECTOR: '.mdc-top-app-bar',
  TITLE_SELECTOR: '.mdc-top-app-bar__title'
};


// EXTERNAL MODULE: ../node_modules/@material/base/foundation.js
var base_foundation = __webpack_require__("uJAj");

// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





/**
 * @extends {MDCFoundation<!MDCTopAppBarAdapter>}
 */

var foundation_MDCTopAppBarBaseFoundation = function (_MDCFoundation) {
  _inherits(MDCTopAppBarBaseFoundation, _MDCFoundation);

  _createClass(MDCTopAppBarBaseFoundation, null, [{
    key: 'strings',

    /** @return enum {string} */
    get: function get() {
      return strings;
    }

    /** @return enum {string} */

  }, {
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }

    /** @return enum {number} */

  }, {
    key: 'numbers',
    get: function get() {
      return numbers;
    }

    /**
     * {@see MDCTopAppBarAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCTopAppBarAdapter}
     */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCTopAppBarAdapter} */{
          hasClass: function hasClass() /* className: string */{},
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          setStyle: function setStyle() /* property: string, value: string */{},
          getTopAppBarHeight: function getTopAppBarHeight() {},
          registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler() /* type: string, handler: EventListener */{},
          deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler() /* type: string, handler: EventListener */{},
          notifyNavigationIconClicked: function notifyNavigationIconClicked() {},
          registerScrollHandler: function registerScrollHandler() /* handler: EventListener */{},
          deregisterScrollHandler: function deregisterScrollHandler() /* handler: EventListener */{},
          registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
          deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
          getViewportScrollY: function getViewportScrollY() {
            return (/* number */0
            );
          },
          getTotalActionItems: function getTotalActionItems() {
            return (/* number */0
            );
          }
        }
      );
    }

    /**
     * @param {!MDCTopAppBarAdapter} adapter
     */

  }]);

  function MDCTopAppBarBaseFoundation( /** @type {!MDCTopAppBarAdapter} */adapter) {
    foundation__classCallCheck(this, MDCTopAppBarBaseFoundation);

    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCTopAppBarBaseFoundation.defaultAdapter, adapter)));

    _this.navClickHandler_ = function () {
      return _this.adapter_.notifyNavigationIconClicked();
    };

    _this.scrollHandler_ = function () {};
    return _this;
  }

  MDCTopAppBarBaseFoundation.prototype.init = function init() {
    this.adapter_.registerNavigationIconInteractionHandler('click', this.navClickHandler_);
  };

  MDCTopAppBarBaseFoundation.prototype.destroy = function destroy() {
    this.adapter_.deregisterNavigationIconInteractionHandler('click', this.navClickHandler_);
  };

  MDCTopAppBarBaseFoundation.prototype.initScrollHandler = function initScrollHandler() {
    this.adapter_.registerScrollHandler(this.scrollHandler_);
  };

  MDCTopAppBarBaseFoundation.prototype.destroyScrollHandler = function destroyScrollHandler() {
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  };

  return MDCTopAppBarBaseFoundation;
}(base_foundation["a" /* default */]);

/* harmony default export */ var top_app_bar_foundation = (foundation_MDCTopAppBarBaseFoundation);
// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/fixed/foundation.js
function fixed_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





/**
 * @extends {MDCTopAppBarFoundation<!MDCFixedTopAppBarFoundation>}
 * @final
 */

var foundation_MDCFixedTopAppBarFoundation = function (_MDCTopAppBarFoundati) {
  foundation__inherits(MDCFixedTopAppBarFoundation, _MDCTopAppBarFoundati);

  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  function MDCFixedTopAppBarFoundation(adapter) {
    fixed_foundation__classCallCheck(this, MDCFixedTopAppBarFoundation);

    /** State variable for the previous scroll iteration top app bar state */
    var _this = foundation__possibleConstructorReturn(this, _MDCTopAppBarFoundati.call(this, adapter));

    _this.wasScrolled_ = false;

    _this.scrollHandler_ = function () {
      return _this.fixedScrollHandler_();
    };
    return _this;
  }

  MDCFixedTopAppBarFoundation.prototype.init = function init() {
    _MDCTopAppBarFoundati.prototype.init.call(this);
    this.adapter_.registerScrollHandler(this.scrollHandler_);
  };

  MDCFixedTopAppBarFoundation.prototype.destroy = function destroy() {
    _MDCTopAppBarFoundati.prototype.destroy.call(this);
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  };

  /**
   * Scroll handler for applying/removing the modifier class
   * on the fixed top app bar.
   */


  MDCFixedTopAppBarFoundation.prototype.fixedScrollHandler_ = function fixedScrollHandler_() {
    var currentScroll = this.adapter_.getViewportScrollY();

    if (currentScroll <= 0) {
      if (this.wasScrolled_) {
        this.adapter_.removeClass(cssClasses.FIXED_SCROLLED_CLASS);
        this.wasScrolled_ = false;
      }
    } else {
      if (!this.wasScrolled_) {
        this.adapter_.addClass(cssClasses.FIXED_SCROLLED_CLASS);
        this.wasScrolled_ = true;
      }
    }
  };

  return MDCFixedTopAppBarFoundation;
}(top_app_bar_foundation);

/* harmony default export */ var fixed_foundation = (foundation_MDCFixedTopAppBarFoundation);
// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/short/foundation.js
function short_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function short_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function short_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





/**
 * @extends {MDCTopAppBarBaseFoundation<!MDCShortTopAppBarFoundation>}
 * @final
 */

var foundation_MDCShortTopAppBarFoundation = function (_MDCTopAppBarBaseFoun) {
  short_foundation__inherits(MDCShortTopAppBarFoundation, _MDCTopAppBarBaseFoun);

  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  function MDCShortTopAppBarFoundation(adapter) {
    short_foundation__classCallCheck(this, MDCShortTopAppBarFoundation);

    // State variable for the current top app bar state
    var _this = short_foundation__possibleConstructorReturn(this, _MDCTopAppBarBaseFoun.call(this, adapter));

    _this.isCollapsed = false;

    _this.scrollHandler_ = function () {
      return _this.shortAppBarScrollHandler_();
    };
    return _this;
  }

  MDCShortTopAppBarFoundation.prototype.init = function init() {
    _MDCTopAppBarBaseFoun.prototype.init.call(this);
    var isAlwaysCollapsed = this.adapter_.hasClass(cssClasses.SHORT_COLLAPSED_CLASS);

    if (this.adapter_.getTotalActionItems() > 0) {
      this.adapter_.addClass(cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);
    }

    if (!isAlwaysCollapsed) {
      this.adapter_.registerScrollHandler(this.scrollHandler_);
      this.shortAppBarScrollHandler_();
    }
  };

  MDCShortTopAppBarFoundation.prototype.destroy = function destroy() {
    _MDCTopAppBarBaseFoun.prototype.destroy.call(this);
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
  };

  /**
   * Scroll handler for applying/removing the collapsed modifier class
   * on the short top app bar.
   * @private
   */


  MDCShortTopAppBarFoundation.prototype.shortAppBarScrollHandler_ = function shortAppBarScrollHandler_() {
    var currentScroll = this.adapter_.getViewportScrollY();

    if (currentScroll <= 0) {
      if (this.isCollapsed) {
        this.adapter_.removeClass(cssClasses.SHORT_COLLAPSED_CLASS);
        this.isCollapsed = false;
      }
    } else {
      if (!this.isCollapsed) {
        this.adapter_.addClass(cssClasses.SHORT_COLLAPSED_CLASS);
        this.isCollapsed = true;
      }
    }
  };

  return MDCShortTopAppBarFoundation;
}(top_app_bar_foundation);

/* harmony default export */ var short_foundation = (foundation_MDCShortTopAppBarFoundation);
// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/standard/foundation.js
function standard_foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function standard_foundation__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function standard_foundation__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */





var INITIAL_VALUE = 0;
/**
 * @extends {MDCTopAppBarBaseFoundation<!MDCTopAppBarFoundation>}
 * @final
 */

var foundation_MDCTopAppBarFoundation = function (_MDCTopAppBarBaseFoun) {
  standard_foundation__inherits(MDCTopAppBarFoundation, _MDCTopAppBarBaseFoun);

  /**
   * @param {!MDCTopAppBarAdapter} adapter
   */
  function MDCTopAppBarFoundation(adapter) {
    standard_foundation__classCallCheck(this, MDCTopAppBarFoundation);

    /**
     * Used for diffs of current scroll position vs previous scroll position
     * @private {number}
     */
    var _this = standard_foundation__possibleConstructorReturn(this, _MDCTopAppBarBaseFoun.call(this, adapter));

    _this.lastScrollPosition_ = _this.adapter_.getViewportScrollY();

    /**
     * Used to verify when the top app bar is completely showing or completely hidden
     * @private {number}
     */
    _this.topAppBarHeight_ = _this.adapter_.getTopAppBarHeight();

    /**
     * wasDocked_ is used to indicate if the top app bar was docked in the previous
     * scroll handler iteration.
     * @private {boolean}
     */
    _this.wasDocked_ = true;

    /**
     * isDockedShowing_ is used to indicate if the top app bar is docked in the fully
     * shown position.
     * @private {boolean}
     */
    _this.isDockedShowing_ = true;

    /**
     * Variable for current scroll position of the top app bar
     * @private {number}
     */
    _this.currentAppBarOffsetTop_ = 0;

    /**
     * Used to prevent the top app bar from being scrolled out of view during resize events
     * @private {boolean} */
    _this.isCurrentlyBeingResized_ = false;

    /**
     * The timeout that's used to throttle the resize events
     * @private {number}
     */
    _this.resizeThrottleId_ = INITIAL_VALUE;

    /**
     * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize
     * @private {number}
     */
    _this.resizeDebounceId_ = INITIAL_VALUE;

    _this.scrollHandler_ = function () {
      return _this.topAppBarScrollHandler_();
    };
    _this.resizeHandler_ = function () {
      return _this.topAppBarResizeHandler_();
    };
    return _this;
  }

  MDCTopAppBarFoundation.prototype.init = function init() {
    _MDCTopAppBarBaseFoun.prototype.init.call(this);
    this.adapter_.registerScrollHandler(this.scrollHandler_);
    this.adapter_.registerResizeHandler(this.resizeHandler_);
  };

  MDCTopAppBarFoundation.prototype.destroy = function destroy() {
    _MDCTopAppBarBaseFoun.prototype.destroy.call(this);
    this.adapter_.deregisterScrollHandler(this.scrollHandler_);
    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    this.adapter_.setStyle('top', '');
  };

  /**
   * Function to determine if the DOM needs to update.
   * @return {boolean}
   * @private
   */


  MDCTopAppBarFoundation.prototype.checkForUpdate_ = function checkForUpdate_() {
    var offscreenBoundaryTop = -this.topAppBarHeight_;
    var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;
    var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;
    var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;

    // If it's partially showing, it can't be docked.
    if (partiallyShowing) {
      this.wasDocked_ = false;
    } else {
      // Not previously docked and not partially showing, it's now docked.
      if (!this.wasDocked_) {
        this.wasDocked_ = true;
        return true;
      } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {
        this.isDockedShowing_ = hasAnyPixelsOnscreen;
        return true;
      }
    }

    return partiallyShowing;
  };

  /**
   * Function to move the top app bar if needed.
   * @private
   */


  MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function moveTopAppBar_() {
    if (this.checkForUpdate_()) {
      // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
      // so the top app bar doesn't show if the window resizes and the new height > the old height.
      var offset = this.currentAppBarOffsetTop_;
      if (Math.abs(offset) >= this.topAppBarHeight_) {
        offset = -numbers.MAX_TOP_APP_BAR_HEIGHT;
      }

      this.adapter_.setStyle('top', offset + 'px');
    }
  };

  /**
   * Scroll handler for the default scroll behavior of the top app bar.
   * @private
   */


  MDCTopAppBarFoundation.prototype.topAppBarScrollHandler_ = function topAppBarScrollHandler_() {
    var currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);
    var diff = currentScrollPosition - this.lastScrollPosition_;
    this.lastScrollPosition_ = currentScrollPosition;

    // If the window is being resized the lastScrollPosition_ needs to be updated but the
    // current scroll of the top app bar should stay in the same position.
    if (!this.isCurrentlyBeingResized_) {
      this.currentAppBarOffsetTop_ -= diff;

      if (this.currentAppBarOffsetTop_ > 0) {
        this.currentAppBarOffsetTop_ = 0;
      } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {
        this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;
      }

      this.moveTopAppBar_();
    }
  };

  /**
   * Top app bar resize handler that throttle/debounce functions that execute updates.
   * @private
   */


  MDCTopAppBarFoundation.prototype.topAppBarResizeHandler_ = function topAppBarResizeHandler_() {
    var _this2 = this;

    // Throttle resize events 10 p/s
    if (!this.resizeThrottleId_) {
      this.resizeThrottleId_ = setTimeout(function () {
        _this2.resizeThrottleId_ = INITIAL_VALUE;
        _this2.throttledResizeHandler_();
      }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
    }

    this.isCurrentlyBeingResized_ = true;

    if (this.resizeDebounceId_) {
      clearTimeout(this.resizeDebounceId_);
    }

    this.resizeDebounceId_ = setTimeout(function () {
      _this2.topAppBarScrollHandler_();
      _this2.isCurrentlyBeingResized_ = false;
      _this2.resizeDebounceId_ = INITIAL_VALUE;
    }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
  };

  /**
   * Throttled function that updates the top app bar scrolled values if the
   * top app bar height changes.
   * @private
   */


  MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function throttledResizeHandler_() {
    var currentHeight = this.adapter_.getTopAppBarHeight();
    if (this.topAppBarHeight_ !== currentHeight) {
      this.wasDocked_ = false;

      // Since the top app bar has a different height depending on the screen width, this
      // will ensure that the top app bar remains in the correct location if
      // completely hidden and a resize makes the top app bar a different height.
      this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;
      this.topAppBarHeight_ = currentHeight;
    }
    this.topAppBarScrollHandler_();
  };

  return MDCTopAppBarFoundation;
}(top_app_bar_foundation);

/* harmony default export */ var standard_foundation = (foundation_MDCTopAppBarFoundation);
// CONCATENATED MODULE: ../node_modules/@material/top-app-bar/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCTopAppBar", function() { return top_app_bar_MDCTopAppBar; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCTopAppBarBaseFoundation", function() { return top_app_bar_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCTopAppBarFoundation", function() { return standard_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCFixedTopAppBarFoundation", function() { return fixed_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCShortTopAppBarFoundation", function() { return short_foundation; });
var top_app_bar__extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function top_app_bar__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function top_app_bar__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function top_app_bar__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */










/**
 * @extends {MDCComponent<!MDCTopAppBarBaseFoundation>}
 * @final
 */

var top_app_bar_MDCTopAppBar = function (_MDCComponent) {
  top_app_bar__inherits(MDCTopAppBar, _MDCComponent);

  /**
   * @param {...?} args
   */
  function MDCTopAppBar() {
    top_app_bar__classCallCheck(this, MDCTopAppBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {?Element} */
    var _this = top_app_bar__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.navIcon_;
    /** @type {?Array<MDCRipple>} */
    _this.iconRipples_;
    /** @type {Object} */
    _this.scrollTarget_;
    return _this;
  }

  MDCTopAppBar.prototype.initialize = function initialize() {
    var rippleFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
      return ripple["MDCRipple"].attachTo(el);
    };

    this.navIcon_ = this.root_.querySelector(strings.NAVIGATION_ICON_SELECTOR);

    // Get all icons in the toolbar and instantiate the ripples
    var icons = [].slice.call(this.root_.querySelectorAll(strings.ACTION_ITEM_SELECTOR));
    if (this.navIcon_) {
      icons.push(this.navIcon_);
    }

    this.iconRipples_ = icons.map(function (icon) {
      var ripple = rippleFactory(icon);
      ripple.unbounded = true;
      return ripple;
    });
  };

  MDCTopAppBar.prototype.destroy = function destroy() {
    this.iconRipples_.forEach(function (iconRipple) {
      return iconRipple.destroy();
    });
    _MDCComponent.prototype.destroy.call(this);
  };

  MDCTopAppBar.prototype.setScrollTarget = function setScrollTarget(target) {
    this.foundation_.destroyScrollHandler();
    this.scrollTarget_ = target;
    this.foundation_.initScrollHandler();
  };

  /**
   * @param {!Element} root
   * @return {!MDCTopAppBar}
   */


  MDCTopAppBar.attachTo = function attachTo(root) {
    return new MDCTopAppBar(root);
  };

  /**
   * @return {!MDCTopAppBarBaseFoundation}
   */


  MDCTopAppBar.prototype.getDefaultFoundation = function getDefaultFoundation() {
    var _this2 = this;

    /** @type {!MDCTopAppBarAdapter} */
    var adapter = /** @type {!MDCTopAppBarAdapter} */top_app_bar__extends({
      hasClass: function hasClass(className) {
        return _this2.root_.classList.contains(className);
      },
      addClass: function addClass(className) {
        return _this2.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return _this2.root_.classList.remove(className);
      },
      setStyle: function setStyle(property, value) {
        return _this2.root_.style.setProperty(property, value);
      },
      getTopAppBarHeight: function getTopAppBarHeight() {
        return _this2.root_.clientHeight;
      },
      registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler(evtType, handler) {
        if (_this2.navIcon_) {
          _this2.navIcon_.addEventListener(evtType, handler);
        }
      },
      deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler(evtType, handler) {
        if (_this2.navIcon_) {
          _this2.navIcon_.removeEventListener(evtType, handler);
        }
      },
      notifyNavigationIconClicked: function notifyNavigationIconClicked() {
        _this2.emit(strings.NAVIGATION_EVENT, {});
      },
      registerScrollHandler: function registerScrollHandler(handler) {
        return _this2.scrollTarget_.addEventListener('scroll', handler);
      },
      deregisterScrollHandler: function deregisterScrollHandler(handler) {
        return _this2.scrollTarget_.removeEventListener('scroll', handler);
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      getViewportScrollY: function getViewportScrollY() {
        return _this2.scrollTarget_[_this2.scrollTarget_ === window ? 'pageYOffset' : 'scrollTop'];
      },
      getTotalActionItems: function getTotalActionItems() {
        return _this2.root_.querySelectorAll(strings.ACTION_ITEM_SELECTOR).length;
      }
    });

    this.scrollTarget_ = window;

    /** @type {!MDCTopAppBarBaseFoundation} */
    var foundation = void 0;
    if (this.root_.classList.contains(cssClasses.SHORT_CLASS)) {
      foundation = new short_foundation(adapter);
    } else if (this.root_.classList.contains(cssClasses.FIXED_CLASS)) {
      foundation = new fixed_foundation(adapter);
    } else {
      foundation = new standard_foundation(adapter);
    }

    return foundation;
  };

  return MDCTopAppBar;
}(component["a" /* default */]);



/***/ }),

/***/ "Oyyg":
/***/ (function(module, exports) {

var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'];
var candidateSelector = candidateSelectors.join(',');

var matches = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

function tabbable(el, options) {
  options = options || {};

  var elementDocument = el.ownerDocument || el;
  var regularTabbables = [];
  var orderedTabbables = [];

  var untouchabilityChecker = new UntouchabilityChecker(elementDocument);
  var candidates = el.querySelectorAll(candidateSelector);

  if (options.includeContainer) {
    if (matches.call(el, candidateSelector)) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var i, candidate, candidateTabindex;
  for (i = 0; i < candidates.length; i++) {
    candidate = candidates[i];

    if (!isNodeMatchingSelectorTabbable(candidate, untouchabilityChecker)) continue;

    candidateTabindex = getTabindex(candidate);
    if (candidateTabindex === 0) {
      regularTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        node: candidate
      });
    }
  }

  var tabbableNodes = orderedTabbables.sort(sortOrderedTabbables).map(function (a) {
    return a.node;
  }).concat(regularTabbables);

  return tabbableNodes;
}

tabbable.isTabbable = isTabbable;
tabbable.isFocusable = isFocusable;

function isNodeMatchingSelectorTabbable(node, untouchabilityChecker) {
  if (!isNodeMatchingSelectorFocusable(node, untouchabilityChecker) || isNonTabbableRadio(node) || getTabindex(node) < 0) {
    return false;
  }
  return true;
}

function isTabbable(node, untouchabilityChecker) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, candidateSelector) === false) return false;
  return isNodeMatchingSelectorTabbable(node, untouchabilityChecker);
}

function isNodeMatchingSelectorFocusable(node, untouchabilityChecker) {
  untouchabilityChecker = untouchabilityChecker || new UntouchabilityChecker(node.ownerDocument || node);
  if (node.disabled || isHiddenInput(node) || untouchabilityChecker.isUntouchable(node)) {
    return false;
  }
  return true;
}

var focusableCandidateSelector = candidateSelectors.concat('iframe').join(',');
function isFocusable(node, untouchabilityChecker) {
  if (!node) throw new Error('No node provided');
  if (matches.call(node, focusableCandidateSelector) === false) return false;
  return isNodeMatchingSelectorFocusable(node, untouchabilityChecker);
}

function getTabindex(node) {
  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
  if (!isNaN(tabindexAttr)) return tabindexAttr;
  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
  // so if they don't have a tabindex attribute specifically set, assume it's 0.
  if (isContentEditable(node)) return 0;
  return node.tabIndex;
}

function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
}

// Array.prototype.find not available in IE.
function find(list, predicate) {
  for (var i = 0, length = list.length; i < length; i++) {
    if (predicate(list[i])) return list[i];
  }
}

function isContentEditable(node) {
  return node.contentEditable === 'true';
}

function isInput(node) {
  return node.tagName === 'INPUT';
}

function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
}

function isRadio(node) {
  return isInput(node) && node.type === 'radio';
}

function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
}

function getCheckedRadio(nodes) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked) {
      return nodes[i];
    }
  }
}

function isTabbableRadio(node) {
  if (!node.name) return true;
  // This won't account for the edge case where you have radio groups with the same
  // in separate forms on the same page.
  var radioSet = node.ownerDocument.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
  var checked = getCheckedRadio(radioSet);
  return !checked || checked === node;
}

// An element is "untouchable" if *it or one of its ancestors* has
// `visibility: hidden` or `display: none`.
function UntouchabilityChecker(elementDocument) {
  this.doc = elementDocument;
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed. The cache contains tuples
  // mapping nodes to their boolean result.
  this.cache = [];
}

// getComputedStyle accurately reflects `visibility: hidden` of ancestors
// but not `display: none`, so we need to recursively check parents.
UntouchabilityChecker.prototype.hasDisplayNone = function hasDisplayNone(node, nodeComputedStyle) {
  if (node.nodeType !== Node.ELEMENT_NODE) return false;

  // Search for a cached result.
  var cached = find(this.cache, function (item) {
    return item === node;
  });
  if (cached) return cached[1];

  nodeComputedStyle = nodeComputedStyle || this.doc.defaultView.getComputedStyle(node);

  var result = false;

  if (nodeComputedStyle.display === 'none') {
    result = true;
  } else if (node.parentNode) {
    result = this.hasDisplayNone(node.parentNode);
  }

  this.cache.push([node, result]);

  return result;
};

UntouchabilityChecker.prototype.isUntouchable = function isUntouchable(node) {
  if (node === this.doc.documentElement) return false;
  var computedStyle = this.doc.defaultView.getComputedStyle(node);
  if (this.hasDisplayNone(node, computedStyle)) return true;
  return computedStyle.visibility === 'hidden';
};

module.exports = tabbable;

/***/ }),

/***/ "P8NW":
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "Pt3o":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"container":"container__13Iwl"};

/***/ }),

/***/ "QK/6":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"logo_container":"logo_container__vcinV","firebase_logo":"firebase_logo__-JNMn","firebase_logo_wrap":"firebase_logo_wrap__1vSbU"};

/***/ }),

/***/ "QTRl":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(prop) {
  return "mdc-theme--".concat(prop, "-bg");
}
//# sourceMappingURL=generateThemeClass.js.map

/***/ }),

/***/ "RYBc":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "SpGf":
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "TC0Z":
/***/ (function(module, exports, __webpack_require__) {

var tabbable = __webpack_require__("Oyyg");
var xtend = __webpack_require__("K5Tb");

var listeningFocusTrap = null;

function focusTrap(element, userOptions) {
  var doc = document;
  var container = typeof element === 'string' ? doc.querySelector(element) : element;

  var config = xtend({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true
  }, userOptions);

  var state = {
    firstTabbableNode: null,
    lastTabbableNode: null,
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false
  };

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause
  };

  return trap;

  function activate(activateOptions) {
    if (state.active) return;

    updateTabbableNodes();

    state.active = true;
    state.paused = false;
    state.nodeFocusedBeforeActivation = doc.activeElement;

    var onActivate = activateOptions && activateOptions.onActivate ? activateOptions.onActivate : config.onActivate;
    if (onActivate) {
      onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!state.active) return;

    removeListeners();
    state.active = false;
    state.paused = false;

    var onDeactivate = deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate;
    if (onDeactivate) {
      onDeactivate();
    }

    var returnFocus = deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate;
    if (returnFocus) {
      delay(function () {
        tryFocus(state.nodeFocusedBeforeActivation);
      });
    }

    return trap;
  }

  function pause() {
    if (state.paused || !state.active) return;
    state.paused = true;
    removeListeners();
  }

  function unpause() {
    if (!state.paused || !state.active) return;
    state.paused = false;
    addListeners();
  }

  function addListeners() {
    if (!state.active) return;

    // There can be only one listening focus trap at a time
    if (listeningFocusTrap) {
      listeningFocusTrap.pause();
    }
    listeningFocusTrap = trap;

    updateTabbableNodes();

    // Delay ensures that the focused element doesn't capture the event
    // that caused the focus trap activation.
    delay(function () {
      tryFocus(getInitialFocusNode());
    });
    doc.addEventListener('focusin', checkFocusIn, true);
    doc.addEventListener('mousedown', checkPointerDown, true);
    doc.addEventListener('touchstart', checkPointerDown, true);
    doc.addEventListener('click', checkClick, true);
    doc.addEventListener('keydown', checkKey, true);

    return trap;
  }

  function removeListeners() {
    if (!state.active || listeningFocusTrap !== trap) return;

    doc.removeEventListener('focusin', checkFocusIn, true);
    doc.removeEventListener('mousedown', checkPointerDown, true);
    doc.removeEventListener('touchstart', checkPointerDown, true);
    doc.removeEventListener('click', checkClick, true);
    doc.removeEventListener('keydown', checkKey, true);

    listeningFocusTrap = null;

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = doc.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function getInitialFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(doc.activeElement)) {
      node = doc.activeElement;
    } else {
      node = state.firstTabbableNode || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error("You can't have a focus-trap without at least one focusable element");
    }

    return node;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event.
  function checkPointerDown(e) {
    if (container.contains(e.target)) return;
    if (config.clickOutsideDeactivates) {
      deactivate({
        returnFocus: !tabbable.isFocusable(e.target)
      });
    } else {
      e.preventDefault();
    }
  }

  // In case focus escapes the trap for some strange reason, pull it back in.
  function checkFocusIn(e) {
    // In Firefox when you Tab out of an iframe the Document is briefly focused.
    if (container.contains(e.target) || e.target instanceof Document) {
      return;
    }
    e.stopImmediatePropagation();
    tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
  }

  function checkKey(e) {
    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      e.preventDefault();
      deactivate();
      return;
    }
    if (isTabEvent(e)) {
      checkTab(e);
      return;
    }
  }

  // Hijack Tab events on the first and last focusable nodes of the trap,
  // in order to prevent focus from escaping. If it escapes for even a
  // moment it can end up scrolling the page and causing confusion so we
  // kind of need to capture the action at the keydown phase.
  function checkTab(e) {
    updateTabbableNodes();
    if (e.shiftKey && e.target === state.firstTabbableNode) {
      e.preventDefault();
      tryFocus(state.lastTabbableNode);
      return;
    }
    if (!e.shiftKey && e.target === state.lastTabbableNode) {
      e.preventDefault();
      tryFocus(state.firstTabbableNode);
      return;
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function updateTabbableNodes() {
    var tabbableNodes = tabbable(container);
    state.firstTabbableNode = tabbableNodes[0] || getInitialFocusNode();
    state.lastTabbableNode = tabbableNodes[tabbableNodes.length - 1] || getInitialFocusNode();
  }

  function tryFocus(node) {
    if (node === doc.activeElement) return;
    if (!node || !node.focus) {
      tryFocus(getInitialFocusNode());
      return;
    }

    node.focus();
    state.mostRecentlyFocusedNode = node;
    if (isSelectableInput(node)) {
      node.select();
    }
  }
}

function isSelectableInput(node) {
  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function isTabEvent(e) {
  return e.key === 'Tab' || e.keyCode === 9;
}

function delay(fn) {
  return setTimeout(fn, 0);
}

module.exports = focusTrap;

/***/ }),

/***/ "TO+D":
/***/ (function(module, exports) {

module.exports = function (el, options) {
  options = options || {};

  var elementDocument = el.ownerDocument || el;
  var basicTabbables = [];
  var orderedTabbables = [];

  // A node is "available" if
  // - it's computed style
  var isUnavailable = createIsUnavailable(elementDocument);

  var candidateSelectors = ['input', 'select', 'a[href]', 'textarea', 'button', '[tabindex]'];

  var candidates = el.querySelectorAll(candidateSelectors.join(','));

  if (options.includeContainer) {
    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

    if (candidateSelectors.some(function (candidateSelector) {
      return matches.call(el, candidateSelector);
    })) {
      candidates = Array.prototype.slice.apply(candidates);
      candidates.unshift(el);
    }
  }

  var candidate, candidateIndexAttr, candidateIndex;
  for (var i = 0, l = candidates.length; i < l; i++) {
    candidate = candidates[i];
    candidateIndexAttr = parseInt(candidate.getAttribute('tabindex'), 10);
    candidateIndex = isNaN(candidateIndexAttr) ? candidate.tabIndex : candidateIndexAttr;

    if (candidateIndex < 0 || candidate.tagName === 'INPUT' && candidate.type === 'hidden' || candidate.disabled || isUnavailable(candidate, elementDocument)) {
      continue;
    }

    if (candidateIndex === 0) {
      basicTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        index: i,
        tabIndex: candidateIndex,
        node: candidate
      });
    }
  }

  var tabbableNodes = orderedTabbables.sort(function (a, b) {
    return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;
  }).map(function (a) {
    return a.node;
  });

  Array.prototype.push.apply(tabbableNodes, basicTabbables);

  return tabbableNodes;
};

function createIsUnavailable(elementDocument) {
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed
  var isOffCache = [];

  // "off" means `display: none;`, as opposed to "hidden",
  // which means `visibility: hidden;`. getComputedStyle
  // accurately reflects visiblity in context but not
  // "off" state, so we need to recursively check parents.

  function isOff(node, nodeComputedStyle) {
    if (node === elementDocument.documentElement) return false;

    // Find the cached node (Array.prototype.find not available in IE9)
    for (var i = 0, length = isOffCache.length; i < length; i++) {
      if (isOffCache[i][0] === node) return isOffCache[i][1];
    }

    nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);

    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = isOff(node.parentNode);
    }

    isOffCache.push([node, result]);

    return result;
  }

  return function isUnavailable(node) {
    if (node === elementDocument.documentElement) return false;

    var computedStyle = elementDocument.defaultView.getComputedStyle(node);

    if (isOff(node, computedStyle)) return true;

    return computedStyle.visibility === 'hidden';
  };
}

/***/ }),

/***/ "UJE0":
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "UtcG":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;typeof navigator !== "undefined" && function (root, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return factory(root);
        }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof module === "object" && module.exports) {
        module.exports = factory(root);
    } else {
        root.lottie = factory(root);
        root.bodymovin = root.lottie;
    }
}(window || {}, function (window) {
    "use strict";

    var svgNS = "http://www.w3.org/2000/svg";

    var locationHref = '';

    var initialDefaultFrame = -999999;

    var subframeEnabled = true;
    var expressionsPlugin;
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    var cachedColors = {};
    var bm_rounder = Math.round;
    var bm_rnd;
    var bm_pow = Math.pow;
    var bm_sqrt = Math.sqrt;
    var bm_abs = Math.abs;
    var bm_floor = Math.floor;
    var bm_max = Math.max;
    var bm_min = Math.min;
    var blitter = 10;

    var BMMath = {};
    (function () {
        var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
        var i,
            len = propertyNames.length;
        for (i = 0; i < len; i += 1) {
            BMMath[propertyNames[i]] = Math[propertyNames[i]];
        }
    })();

    function ProjectInterface() {
        return {};
    }

    BMMath.random = Math.random;
    BMMath.abs = function (val) {
        var tOfVal = typeof val;
        if (tOfVal === 'object' && val.length) {
            var absArr = createSizedArray(val.length);
            var i,
                len = val.length;
            for (i = 0; i < len; i += 1) {
                absArr[i] = Math.abs(val[i]);
            }
            return absArr;
        }
        return Math.abs(val);
    };
    var defaultCurveSegments = 150;
    var degToRads = Math.PI / 180;
    var roundCorner = 0.5519;

    function roundValues(flag) {
        if (flag) {
            bm_rnd = Math.round;
        } else {
            bm_rnd = function bm_rnd(val) {
                return val;
            };
        }
    }
    roundValues(false);

    function styleDiv(element) {
        element.style.position = 'absolute';
        element.style.top = 0;
        element.style.left = 0;
        element.style.display = 'block';
        element.style.transformOrigin = element.style.webkitTransformOrigin = '0 0';
        element.style.backfaceVisibility = element.style.webkitBackfaceVisibility = 'visible';
        element.style.transformStyle = element.style.webkitTransformStyle = element.style.mozTransformStyle = "preserve-3d";
    }

    function BMEnterFrameEvent(n, c, t, d) {
        this.type = n;
        this.currentTime = c;
        this.totalTime = t;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMCompleteEvent(n, d) {
        this.type = n;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMCompleteLoopEvent(n, c, t, d) {
        this.type = n;
        this.currentLoop = t;
        this.totalLoops = c;
        this.direction = d < 0 ? -1 : 1;
    }

    function BMSegmentStartEvent(n, f, t) {
        this.type = n;
        this.firstFrame = f;
        this.totalFrames = t;
    }

    function BMDestroyEvent(n, t) {
        this.type = n;
        this.target = t;
    }

    var createElementID = function () {
        var _count = 0;
        return function createID() {
            return '__lottie_element_' + ++_count;
        };
    }();

    function HSVtoRGB(h, s, v) {
        var r, g, b, i, f, p, q, t;
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0:
                r = v;g = t;b = p;break;
            case 1:
                r = q;g = v;b = p;break;
            case 2:
                r = p;g = v;b = t;break;
            case 3:
                r = p;g = q;b = v;break;
            case 4:
                r = t;g = p;b = v;break;
            case 5:
                r = v;g = p;b = q;break;
        }
        return [r, g, b];
    }

    function RGBtoHSV(r, g, b) {
        var max = Math.max(r, g, b),
            min = Math.min(r, g, b),
            d = max - min,
            h,
            s = max === 0 ? 0 : d / max,
            v = max / 255;

        switch (max) {
            case min:
                h = 0;break;
            case r:
                h = g - b + d * (g < b ? 6 : 0);h /= 6 * d;break;
            case g:
                h = b - r + d * 2;h /= 6 * d;break;
            case b:
                h = r - g + d * 4;h /= 6 * d;break;
        }

        return [h, s, v];
    }

    function addSaturationToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[1] += offset;
        if (hsv[1] > 1) {
            hsv[1] = 1;
        } else if (hsv[1] <= 0) {
            hsv[1] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    function addBrightnessToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[2] += offset;
        if (hsv[2] > 1) {
            hsv[2] = 1;
        } else if (hsv[2] < 0) {
            hsv[2] = 0;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    function addHueToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[0] += offset / 360;
        if (hsv[0] > 1) {
            hsv[0] -= 1;
        } else if (hsv[0] < 0) {
            hsv[0] += 1;
        }
        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
    }

    var rgbToHex = function () {
        var colorMap = [];
        var i;
        var hex;
        for (i = 0; i < 256; i += 1) {
            hex = i.toString(16);
            colorMap[i] = hex.length == 1 ? '0' + hex : hex;
        }

        return function (r, g, b) {
            if (r < 0) {
                r = 0;
            }
            if (g < 0) {
                g = 0;
            }
            if (b < 0) {
                b = 0;
            }
            return '#' + colorMap[r] + colorMap[g] + colorMap[b];
        };
    }();
    function BaseEvent() {}
    BaseEvent.prototype = {
        triggerEvent: function triggerEvent(eventName, args) {
            if (this._cbs[eventName]) {
                var len = this._cbs[eventName].length;
                for (var i = 0; i < len; i++) {
                    this._cbs[eventName][i](args);
                }
            }
        },
        addEventListener: function addEventListener(eventName, callback) {
            if (!this._cbs[eventName]) {
                this._cbs[eventName] = [];
            }
            this._cbs[eventName].push(callback);

            return function () {
                this.removeEventListener(eventName, callback);
            }.bind(this);
        },
        removeEventListener: function removeEventListener(eventName, callback) {
            if (!callback) {
                this._cbs[eventName] = null;
            } else if (this._cbs[eventName]) {
                var i = 0,
                    len = this._cbs[eventName].length;
                while (i < len) {
                    if (this._cbs[eventName][i] === callback) {
                        this._cbs[eventName].splice(i, 1);
                        i -= 1;
                        len -= 1;
                    }
                    i += 1;
                }
                if (!this._cbs[eventName].length) {
                    this._cbs[eventName] = null;
                }
            }
        }
    };
    var createTypedArray = function () {
        function createRegularArray(type, len) {
            var i = 0,
                arr = [],
                value;
            switch (type) {
                case 'int16':
                case 'uint8c':
                    value = 1;
                    break;
                default:
                    value = 1.1;
                    break;
            }
            for (i = 0; i < len; i += 1) {
                arr.push(value);
            }
            return arr;
        }
        function createTypedArray(type, len) {
            if (type === 'float32') {
                return new Float32Array(len);
            } else if (type === 'int16') {
                return new Int16Array(len);
            } else if (type === 'uint8c') {
                return new Uint8ClampedArray(len);
            }
        }
        if (typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
            return createTypedArray;
        } else {
            return createRegularArray;
        }
    }();

    function createSizedArray(len) {
        return Array.apply(null, { length: len });
    }
    function createNS(type) {
        //return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElementNS(svgNS, type);
    }
    function createTag(type) {
        //return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElement(type);
    }
    function DynamicPropertyContainer() {};
    DynamicPropertyContainer.prototype = {
        addDynamicProperty: function addDynamicProperty(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
                this.dynamicProperties.push(prop);
                this.container.addDynamicProperty(this);
                this._isAnimated = true;
            }
        },
        iterateDynamicProperties: function iterateDynamicProperties() {
            this._mdf = false;
            var i,
                len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
                this.dynamicProperties[i].getValue();
                if (this.dynamicProperties[i]._mdf) {
                    this._mdf = true;
                }
            }
        },
        initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
            this.container = container;
            this.dynamicProperties = [];
            this._mdf = false;
            this._isAnimated = false;
        }
    };
    var getBlendMode = function () {

        var blendModeEnums = {
            0: 'source-over',
            1: 'multiply',
            2: 'screen',
            3: 'overlay',
            4: 'darken',
            5: 'lighten',
            6: 'color-dodge',
            7: 'color-burn',
            8: 'hard-light',
            9: 'soft-light',
            10: 'difference',
            11: 'exclusion',
            12: 'hue',
            13: 'saturation',
            14: 'color',
            15: 'luminosity'
        };

        return function (mode) {
            return blendModeEnums[mode] || '';
        };
    }();
    /*!
     Transformation Matrix v2.0
     (c) Epistemex 2014-2015
     www.epistemex.com
     By Ken Fyrstenberg
     Contributions by leeoniya.
     License: MIT, header required.
     */

    /**
     * 2D transformation matrix object initialized with identity matrix.
     *
     * The matrix can synchronize a canvas context by supplying the context
     * as an argument, or later apply current absolute transform to an
     * existing context.
     *
     * All values are handled as floating point values.
     *
     * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
     * @prop {number} a - scale x
     * @prop {number} b - shear y
     * @prop {number} c - shear x
     * @prop {number} d - scale y
     * @prop {number} e - translate x
     * @prop {number} f - translate y
     * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
     * @constructor
     */

    var Matrix = function () {

        var _cos = Math.cos;
        var _sin = Math.sin;
        var _tan = Math.tan;
        var _rnd = Math.round;

        function reset() {
            this.props[0] = 1;
            this.props[1] = 0;
            this.props[2] = 0;
            this.props[3] = 0;
            this.props[4] = 0;
            this.props[5] = 1;
            this.props[6] = 0;
            this.props[7] = 0;
            this.props[8] = 0;
            this.props[9] = 0;
            this.props[10] = 1;
            this.props[11] = 0;
            this.props[12] = 0;
            this.props[13] = 0;
            this.props[14] = 0;
            this.props[15] = 1;
            return this;
        }

        function rotate(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function rotateX(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
        }

        function rotateY(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
        }

        function rotateZ(angle) {
            if (angle === 0) {
                return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function shear(sx, sy) {
            return this._t(1, sy, sx, 1, 0, 0);
        }

        function skew(ax, ay) {
            return this.shear(_tan(ax), _tan(ay));
        }

        function skewFromAxis(ax, angle) {
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            //return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
        }

        function scale(sx, sy, sz) {
            if (!sz && sz !== 0) {
                sz = 1;
            }
            if (sx === 1 && sy === 1 && sz === 1) {
                return this;
            }
            return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
        }

        function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
            this.props[0] = a;
            this.props[1] = b;
            this.props[2] = c;
            this.props[3] = d;
            this.props[4] = e;
            this.props[5] = f;
            this.props[6] = g;
            this.props[7] = h;
            this.props[8] = i;
            this.props[9] = j;
            this.props[10] = k;
            this.props[11] = l;
            this.props[12] = m;
            this.props[13] = n;
            this.props[14] = o;
            this.props[15] = p;
            return this;
        }

        function translate(tx, ty, tz) {
            tz = tz || 0;
            if (tx !== 0 || ty !== 0 || tz !== 0) {
                return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
            }
            return this;
        }

        function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {

            var _p = this.props;

            if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
                //NOTE: commenting this condition because TurboFan deoptimizes code when present
                //if(m2 !== 0 || n2 !== 0 || o2 !== 0){
                _p[12] = _p[12] * a2 + _p[15] * m2;
                _p[13] = _p[13] * f2 + _p[15] * n2;
                _p[14] = _p[14] * k2 + _p[15] * o2;
                _p[15] = _p[15] * p2;
                //}
                this._identityCalculated = false;
                return this;
            }

            var a1 = _p[0];
            var b1 = _p[1];
            var c1 = _p[2];
            var d1 = _p[3];
            var e1 = _p[4];
            var f1 = _p[5];
            var g1 = _p[6];
            var h1 = _p[7];
            var i1 = _p[8];
            var j1 = _p[9];
            var k1 = _p[10];
            var l1 = _p[11];
            var m1 = _p[12];
            var n1 = _p[13];
            var o1 = _p[14];
            var p1 = _p[15];

            /* matrix order (canvas compatible):
             * ace
             * bdf
             * 001
             */
            _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
            _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
            _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
            _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;

            _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
            _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
            _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
            _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;

            _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
            _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
            _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
            _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;

            _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
            _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
            _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
            _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;

            this._identityCalculated = false;
            return this;
        }

        function isIdentity() {
            if (!this._identityCalculated) {
                this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
                this._identityCalculated = true;
            }
            return this._identity;
        }

        function equals(matr) {
            var i = 0;
            while (i < 16) {
                if (matr.props[i] !== this.props[i]) {
                    return false;
                }
                i += 1;
            }
            return true;
        }

        function clone(matr) {
            var i;
            for (i = 0; i < 16; i += 1) {
                matr.props[i] = this.props[i];
            }
        }

        function cloneFromProps(props) {
            var i;
            for (i = 0; i < 16; i += 1) {
                this.props[i] = props[i];
            }
        }

        function applyToPoint(x, y, z) {

            return {
                x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
                y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
                z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
            };
            /*return {
             x: x * me.a + y * me.c + me.e,
             y: x * me.b + y * me.d + me.f
             };*/
        }
        function applyToX(x, y, z) {
            return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
        }
        function applyToY(x, y, z) {
            return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
        }
        function applyToZ(x, y, z) {
            return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
        }

        function inversePoint(pt) {
            var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
            var a = this.props[5] / determinant;
            var b = -this.props[1] / determinant;
            var c = -this.props[4] / determinant;
            var d = this.props[0] / determinant;
            var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
            var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
            return [pt[0] * a + pt[1] * c + e, pt[0] * b + pt[1] * d + f, 0];
        }

        function inversePoints(pts) {
            var i,
                len = pts.length,
                retPts = [];
            for (i = 0; i < len; i += 1) {
                retPts[i] = inversePoint(pts[i]);
            }
            return retPts;
        }

        function applyToTriplePoints(pt1, pt2, pt3) {
            var arr = createTypedArray('float32', 6);
            if (this.isIdentity()) {
                arr[0] = pt1[0];
                arr[1] = pt1[1];
                arr[2] = pt2[0];
                arr[3] = pt2[1];
                arr[4] = pt3[0];
                arr[5] = pt3[1];
            } else {
                var p0 = this.props[0],
                    p1 = this.props[1],
                    p4 = this.props[4],
                    p5 = this.props[5],
                    p12 = this.props[12],
                    p13 = this.props[13];
                arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
                arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
                arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
                arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
                arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
                arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
            }
            return arr;
        }

        function applyToPointArray(x, y, z) {
            var arr;
            if (this.isIdentity()) {
                arr = [x, y, z];
            } else {
                arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
            }
            return arr;
        }

        function applyToPointStringified(x, y) {
            if (this.isIdentity()) {
                return x + ',' + y;
            }
            var _p = this.props;
            return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + ',' + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
        }

        function toCSS() {
            //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
            /*if(this.isIdentity()) {
                return '';
            }*/
            var i = 0;
            var props = this.props;
            var cssValue = 'matrix3d(';
            var v = 10000;
            while (i < 16) {
                cssValue += _rnd(props[i] * v) / v;
                cssValue += i === 15 ? ')' : ',';
                i += 1;
            }
            return cssValue;
        }

        function roundMatrixProperty(val) {
            var v = 10000;
            if (val < 0.000001 && val > 0 || val > -0.000001 && val < 0) {
                return _rnd(val * v) / v;
            }
            return val;
        }

        function to2dCSS() {
            //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
            /*if(this.isIdentity()) {
                return '';
            }*/
            var props = this.props;
            var _a = roundMatrixProperty(props[0]);
            var _b = roundMatrixProperty(props[1]);
            var _c = roundMatrixProperty(props[4]);
            var _d = roundMatrixProperty(props[5]);
            var _e = roundMatrixProperty(props[12]);
            var _f = roundMatrixProperty(props[13]);
            return "matrix(" + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ")";
        }

        return function () {
            this.reset = reset;
            this.rotate = rotate;
            this.rotateX = rotateX;
            this.rotateY = rotateY;
            this.rotateZ = rotateZ;
            this.skew = skew;
            this.skewFromAxis = skewFromAxis;
            this.shear = shear;
            this.scale = scale;
            this.setTransform = setTransform;
            this.translate = translate;
            this.transform = transform;
            this.applyToPoint = applyToPoint;
            this.applyToX = applyToX;
            this.applyToY = applyToY;
            this.applyToZ = applyToZ;
            this.applyToPointArray = applyToPointArray;
            this.applyToTriplePoints = applyToTriplePoints;
            this.applyToPointStringified = applyToPointStringified;
            this.toCSS = toCSS;
            this.to2dCSS = to2dCSS;
            this.clone = clone;
            this.cloneFromProps = cloneFromProps;
            this.equals = equals;
            this.inversePoints = inversePoints;
            this.inversePoint = inversePoint;
            this._t = this.transform;
            this.isIdentity = isIdentity;
            this._identity = true;
            this._identityCalculated = false;

            this.props = createTypedArray('float32', 16);
            this.reset();
        };
    }();

    /*
     Copyright 2014 David Bau.
    
     Permission is hereby granted, free of charge, to any person obtaining
     a copy of this software and associated documentation files (the
     "Software"), to deal in the Software without restriction, including
     without limitation the rights to use, copy, modify, merge, publish,
     distribute, sublicense, and/or sell copies of the Software, and to
     permit persons to whom the Software is furnished to do so, subject to
     the following conditions:
    
     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.
    
     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    
     */

    (function (pool, math) {
        //
        // The following constants are related to IEEE 754 limits.
        //
        var global = this,
            width = 256,
            // each RC4 output is 0 <= x < 256
        chunks = 6,
            // at least six RC4 outputs for each double
        digits = 52,
            // there are 52 significant digits in a double
        rngname = 'random',
            // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
            significance = math.pow(2, digits),
            overflow = significance * 2,
            mask = width - 1,
            nodecrypto; // node.js crypto module, initialized at the bottom.

        //
        // seedrandom()
        // This is the seedrandom function described above.
        //
        function seedrandom(seed, options, callback) {
            var key = [];
            options = options === true ? { entropy: true } : options || {};

            // Flatten the seed string or build one from local entropy if needed.
            var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key);

            // Use the seed to initialize an ARC4 generator.
            var arc4 = new ARC4(key);

            // This function returns a random double in [0, 1) that contains
            // randomness in every bit of the mantissa of the IEEE 754 value.
            var prng = function prng() {
                var n = arc4.g(chunks),
                    // Start with a numerator n < 2 ^ 48
                d = startdenom,
                    //   and denominator d = 2 ^ 48.
                x = 0; //   and no 'extra last byte'.
                while (n < significance) {
                    // Fill up all significant digits by
                    n = (n + x) * width; //   shifting numerator and
                    d *= width; //   denominator and generating a
                    x = arc4.g(1); //   new least-significant-byte.
                }
                while (n >= overflow) {
                    // To avoid rounding up, before adding
                    n /= 2; //   last byte, shift everything
                    d /= 2; //   right using integer math until
                    x >>>= 1; //   we have exactly the desired bits.
                }
                return (n + x) / d; // Form the number within [0, 1).
            };

            prng.int32 = function () {
                return arc4.g(4) | 0;
            };
            prng.quick = function () {
                return arc4.g(4) / 0x100000000;
            };
            prng.double = prng;

            // Mix the randomness into accumulated entropy.
            mixkey(tostring(arc4.S), pool);

            // Calling convention: what to return as a function of prng, seed, is_math.
            return (options.pass || callback || function (prng, seed, is_math_call, state) {
                if (state) {
                    // Load the arc4 state from the given state if it has an S array.
                    if (state.S) {
                        copy(state, arc4);
                    }
                    // Only provide the .state method if requested via options.state.
                    prng.state = function () {
                        return copy(arc4, {});
                    };
                }

                // If called as a method of Math (Math.seedrandom()), mutate
                // Math.random because that is how seedrandom.js has worked since v1.0.
                if (is_math_call) {
                    math[rngname] = prng;return seed;
                }

                // Otherwise, it is a newer calling convention, so return the
                // prng directly.
                else return prng;
            })(prng, shortseed, 'global' in options ? options.global : this == math, options.state);
        }
        math['seed' + rngname] = seedrandom;

        //
        // ARC4
        //
        // An ARC4 implementation.  The constructor takes a key in the form of
        // an array of at most (width) integers that should be 0 <= x < (width).
        //
        // The g(count) method returns a pseudorandom integer that concatenates
        // the next (count) outputs from ARC4.  Its return value is a number x
        // that is in the range 0 <= x < (width ^ count).
        //
        function ARC4(key) {
            var t,
                keylen = key.length,
                me = this,
                i = 0,
                j = me.i = me.j = 0,
                s = me.S = [];

            // The empty key [] is treated as [0].
            if (!keylen) {
                key = [keylen++];
            }

            // Set up S using the standard key scheduling algorithm.
            while (i < width) {
                s[i] = i++;
            }
            for (i = 0; i < width; i++) {
                s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
                s[j] = t;
            }

            // The "g" method returns the next (count) outputs as one number.
            me.g = function (count) {
                // Using instance members instead of closure state nearly doubles speed.
                var t,
                    r = 0,
                    i = me.i,
                    j = me.j,
                    s = me.S;
                while (count--) {
                    t = s[i = mask & i + 1];
                    r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
                }
                me.i = i;me.j = j;
                return r;
                // For robust unpredictability, the function call below automatically
                // discards an initial batch of values.  This is called RC4-drop[256].
                // See http://google.com/search?q=rsa+fluhrer+response&btnI
            };
        }

        //
        // copy()
        // Copies internal state of ARC4 to or from a plain object.
        //
        function copy(f, t) {
            t.i = f.i;
            t.j = f.j;
            t.S = f.S.slice();
            return t;
        }

        //
        // flatten()
        // Converts an object tree to nested arrays of strings.
        //
        function flatten(obj, depth) {
            var result = [],
                typ = typeof obj,
                prop;
            if (depth && typ == 'object') {
                for (prop in obj) {
                    try {
                        result.push(flatten(obj[prop], depth - 1));
                    } catch (e) {}
                }
            }
            return result.length ? result : typ == 'string' ? obj : obj + '\0';
        }

        //
        // mixkey()
        // Mixes a string seed into a key that is an array of integers, and
        // returns a shortened string seed that is equivalent to the result key.
        //
        function mixkey(seed, key) {
            var stringseed = seed + '',
                smear,
                j = 0;
            while (j < stringseed.length) {
                key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
            }
            return tostring(key);
        }

        //
        // autoseed()
        // Returns an object for autoseeding, using window.crypto and Node crypto
        // module if available.
        //
        function autoseed() {
            try {
                if (nodecrypto) {
                    return tostring(nodecrypto.randomBytes(width));
                }
                var out = new Uint8Array(width);
                (global.crypto || global.msCrypto).getRandomValues(out);
                return tostring(out);
            } catch (e) {
                var browser = global.navigator,
                    plugins = browser && browser.plugins;
                return [+new Date(), global, plugins, global.screen, tostring(pool)];
            }
        }

        //
        // tostring()
        // Converts an array of charcodes to a string
        //
        function tostring(a) {
            return String.fromCharCode.apply(0, a);
        }

        //
        // When seedrandom.js is loaded, we immediately mix a few bits
        // from the built-in RNG into the entropy pool.  Because we do
        // not want to interfere with deterministic PRNG state later,
        // seedrandom will not call math.random on its own again after
        // initialization.
        //
        mixkey(math.random(), pool);

        //
        // Nodejs and AMD support: export the implementation as a module using
        // either convention.
        //

        // End anonymous scope, and pass initial values.
    })([], // pool: entropy pool starts empty
    BMMath // math: package containing random, pow, and seedrandom
    );
    var BezierFactory = function () {
        /**
         * BezierEasing - use bezier curve for transition easing function
         * by Gaëtan Renaudeau 2014 - 2015 – MIT License
         *
         * Credits: is based on Firefox's nsSMILKeySpline.cpp
         * Usage:
         * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
         * spline.get(x) => returns the easing value | x must be in [0, 1] range
         *
         */

        var ob = {};
        ob.getBezierEasing = getBezierEasing;
        var beziers = {};

        function getBezierEasing(a, b, c, d, nm) {
            var str = nm || ('bez_' + a + '_' + b + '_' + c + '_' + d).replace(/\./g, 'p');
            if (beziers[str]) {
                return beziers[str];
            }
            var bezEasing = new BezierEasing([a, b, c, d]);
            beziers[str] = bezEasing;
            return bezEasing;
        }

        // These values are established by empiricism with tests (tradeoff: performance VS precision)
        var NEWTON_ITERATIONS = 4;
        var NEWTON_MIN_SLOPE = 0.001;
        var SUBDIVISION_PRECISION = 0.0000001;
        var SUBDIVISION_MAX_ITERATIONS = 10;

        var kSplineTableSize = 11;
        var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

        var float32ArraySupported = typeof Float32Array === "function";

        function A(aA1, aA2) {
            return 1.0 - 3.0 * aA2 + 3.0 * aA1;
        }
        function B(aA1, aA2) {
            return 3.0 * aA2 - 6.0 * aA1;
        }
        function C(aA1) {
            return 3.0 * aA1;
        }

        // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
        function calcBezier(aT, aA1, aA2) {
            return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
        }

        // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
        function getSlope(aT, aA1, aA2) {
            return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
        }

        function binarySubdivide(aX, aA, aB, mX1, mX2) {
            var currentX,
                currentT,
                i = 0;
            do {
                currentT = aA + (aB - aA) / 2.0;
                currentX = calcBezier(currentT, mX1, mX2) - aX;
                if (currentX > 0.0) {
                    aB = currentT;
                } else {
                    aA = currentT;
                }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
            return currentT;
        }

        function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                var currentSlope = getSlope(aGuessT, mX1, mX2);
                if (currentSlope === 0.0) return aGuessT;
                var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                aGuessT -= currentX / currentSlope;
            }
            return aGuessT;
        }

        /**
         * points is an array of [ mX1, mY1, mX2, mY2 ]
         */
        function BezierEasing(points) {
            this._p = points;
            this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
            this._precomputed = false;

            this.get = this.get.bind(this);
        }

        BezierEasing.prototype = {

            get: function get(x) {
                var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                if (!this._precomputed) this._precompute();
                if (mX1 === mY1 && mX2 === mY2) return x; // linear
                // Because JavaScript number are imprecise, we should guarantee the extremes are right.
                if (x === 0) return 0;
                if (x === 1) return 1;
                return calcBezier(this._getTForX(x), mY1, mY2);
            },

            // Private part

            _precompute: function _precompute() {
                var mX1 = this._p[0],
                    mY1 = this._p[1],
                    mX2 = this._p[2],
                    mY2 = this._p[3];
                this._precomputed = true;
                if (mX1 !== mY1 || mX2 !== mY2) this._calcSampleValues();
            },

            _calcSampleValues: function _calcSampleValues() {
                var mX1 = this._p[0],
                    mX2 = this._p[2];
                for (var i = 0; i < kSplineTableSize; ++i) {
                    this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
                }
            },

            /**
             * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
             */
            _getTForX: function _getTForX(aX) {
                var mX1 = this._p[0],
                    mX2 = this._p[2],
                    mSampleValues = this._mSampleValues;

                var intervalStart = 0.0;
                var currentSample = 1;
                var lastSample = kSplineTableSize - 1;

                for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                    intervalStart += kSampleStepSize;
                }
                --currentSample;

                // Interpolate to provide an initial guess for t
                var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
                var guessForT = intervalStart + dist * kSampleStepSize;

                var initialSlope = getSlope(guessForT, mX1, mX2);
                if (initialSlope >= NEWTON_MIN_SLOPE) {
                    return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
                } else if (initialSlope === 0.0) {
                    return guessForT;
                } else {
                    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
                }
            }
        };

        return ob;
    }();
    (function () {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
        if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
    })();

    function extendPrototype(sources, destination) {
        var i,
            len = sources.length,
            sourcePrototype;
        for (i = 0; i < len; i += 1) {
            sourcePrototype = sources[i].prototype;
            for (var attr in sourcePrototype) {
                if (sourcePrototype.hasOwnProperty(attr)) destination.prototype[attr] = sourcePrototype[attr];
            }
        }
    }

    function getDescriptor(object, prop) {
        return Object.getOwnPropertyDescriptor(object, prop);
    }

    function createProxyFunction(prototype) {
        function ProxyFunction() {}
        ProxyFunction.prototype = prototype;
        return ProxyFunction;
    }
    function bezFunction() {

        var easingFunctions = [];
        var math = Math;

        function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
            var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
            return det1 > -0.001 && det1 < 0.001;
        }

        function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
            if (z1 === 0 && z2 === 0 && z3 === 0) {
                return pointOnLine2D(x1, y1, x2, y2, x3, y3);
            }
            var dist1 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2));
            var dist2 = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2) + Math.pow(z3 - z1, 2));
            var dist3 = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2) + Math.pow(z3 - z2, 2));
            var diffDist;
            if (dist1 > dist2) {
                if (dist1 > dist3) {
                    diffDist = dist1 - dist2 - dist3;
                } else {
                    diffDist = dist3 - dist2 - dist1;
                }
            } else if (dist3 > dist2) {
                diffDist = dist3 - dist2 - dist1;
            } else {
                diffDist = dist2 - dist1 - dist3;
            }
            return diffDist > -0.0001 && diffDist < 0.0001;
        }

        var getBezierLength = function () {

            return function (pt1, pt2, pt3, pt4) {
                var curveSegments = defaultCurveSegments;
                var k;
                var i, len;
                var ptCoord,
                    perc,
                    addedLength = 0;
                var ptDistance;
                var point = [],
                    lastPoint = [];
                var lengthData = bezier_length_pool.newElement();
                len = pt3.length;
                for (k = 0; k < curveSegments; k += 1) {
                    perc = k / (curveSegments - 1);
                    ptDistance = 0;
                    for (i = 0; i < len; i += 1) {
                        ptCoord = bm_pow(1 - perc, 3) * pt1[i] + 3 * bm_pow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bm_pow(perc, 2) * pt4[i] + bm_pow(perc, 3) * pt2[i];
                        point[i] = ptCoord;
                        if (lastPoint[i] !== null) {
                            ptDistance += bm_pow(point[i] - lastPoint[i], 2);
                        }
                        lastPoint[i] = point[i];
                    }
                    if (ptDistance) {
                        ptDistance = bm_sqrt(ptDistance);
                        addedLength += ptDistance;
                    }
                    lengthData.percents[k] = perc;
                    lengthData.lengths[k] = addedLength;
                }
                lengthData.addedLength = addedLength;
                return lengthData;
            };
        }();

        function getSegmentsLength(shapeData) {
            var segmentsLength = segments_length_pool.newElement();
            var closed = shapeData.c;
            var pathV = shapeData.v;
            var pathO = shapeData.o;
            var pathI = shapeData.i;
            var i,
                len = shapeData._length;
            var lengths = segmentsLength.lengths;
            var totalLength = 0;
            for (i = 0; i < len - 1; i += 1) {
                lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
                totalLength += lengths[i].addedLength;
            }
            if (closed && len) {
                lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
                totalLength += lengths[i].addedLength;
            }
            segmentsLength.totalLength = totalLength;
            return segmentsLength;
        }

        function BezierData(length) {
            this.segmentLength = 0;
            this.points = new Array(length);
        }

        function PointData(partial, point) {
            this.partialLength = partial;
            this.point = point;
        }

        var buildBezierData = function () {

            var storedData = {};

            return function (pt1, pt2, pt3, pt4) {
                var bezierName = (pt1[0] + '_' + pt1[1] + '_' + pt2[0] + '_' + pt2[1] + '_' + pt3[0] + '_' + pt3[1] + '_' + pt4[0] + '_' + pt4[1]).replace(/\./g, 'p');
                if (!storedData[bezierName]) {
                    var curveSegments = defaultCurveSegments;
                    var k, i, len;
                    var ptCoord,
                        perc,
                        addedLength = 0;
                    var ptDistance;
                    var point,
                        lastPoint = null;
                    if (pt1.length === 2 && (pt1[0] != pt2[0] || pt1[1] != pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                        curveSegments = 2;
                    }
                    var bezierData = new BezierData(curveSegments);
                    len = pt3.length;
                    for (k = 0; k < curveSegments; k += 1) {
                        point = createSizedArray(len);
                        perc = k / (curveSegments - 1);
                        ptDistance = 0;
                        for (i = 0; i < len; i += 1) {
                            ptCoord = bm_pow(1 - perc, 3) * pt1[i] + 3 * bm_pow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bm_pow(perc, 2) * (pt2[i] + pt4[i]) + bm_pow(perc, 3) * pt2[i];
                            point[i] = ptCoord;
                            if (lastPoint !== null) {
                                ptDistance += bm_pow(point[i] - lastPoint[i], 2);
                            }
                        }
                        ptDistance = bm_sqrt(ptDistance);
                        addedLength += ptDistance;
                        bezierData.points[k] = new PointData(ptDistance, point);
                        lastPoint = point;
                    }
                    bezierData.segmentLength = addedLength;
                    storedData[bezierName] = bezierData;
                }
                return storedData[bezierName];
            };
        }();

        function getDistancePerc(perc, bezierData) {
            var percents = bezierData.percents;
            var lengths = bezierData.lengths;
            var len = percents.length;
            var initPos = bm_floor((len - 1) * perc);
            var lengthPos = perc * bezierData.addedLength;
            var lPerc = 0;
            if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
                return percents[initPos];
            } else {
                var dir = lengths[initPos] > lengthPos ? -1 : 1;
                var flag = true;
                while (flag) {
                    if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
                        lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
                        flag = false;
                    } else {
                        initPos += dir;
                    }
                    if (initPos < 0 || initPos >= len - 1) {
                        //FIX for TypedArrays that don't store floating point values with enough accuracy
                        if (initPos === len - 1) {
                            return percents[initPos];
                        }
                        flag = false;
                    }
                }
                return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
            }
        }

        function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
            var t1 = getDistancePerc(percent, bezierData);
            var u0 = 1;
            var u1 = 1 - t1;
            var ptX = Math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;
            var ptY = Math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;
            return [ptX, ptY];
        }

        function getSegmentArray() {}

        var bezier_segment_points = createTypedArray('float32', 8);

        function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {

            startPerc = startPerc < 0 ? 0 : startPerc > 1 ? 1 : startPerc;
            var t0 = getDistancePerc(startPerc, bezierData);
            endPerc = endPerc > 1 ? 1 : endPerc;
            var t1 = getDistancePerc(endPerc, bezierData);
            var i,
                len = pt1.length;
            var u0 = 1 - t0;
            var u1 = 1 - t1;
            var u0u0u0 = u0 * u0 * u0;
            var t0u0u0_3 = t0 * u0 * u0 * 3;
            var t0t0u0_3 = t0 * t0 * u0 * 3;
            var t0t0t0 = t0 * t0 * t0;
            //
            var u0u0u1 = u0 * u0 * u1;
            var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
            var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
            var t0t0t1 = t0 * t0 * t1;
            //
            var u0u1u1 = u0 * u1 * u1;
            var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
            var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
            var t0t1t1 = t0 * t1 * t1;
            //
            var u1u1u1 = u1 * u1 * u1;
            var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
            var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
            var t1t1t1 = t1 * t1 * t1;
            for (i = 0; i < len; i += 1) {
                bezier_segment_points[i * 4] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 1] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 2] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
                bezier_segment_points[i * 4 + 3] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
            }

            return bezier_segment_points;
        }

        return {
            getSegmentsLength: getSegmentsLength,
            getNewSegment: getNewSegment,
            getPointInSegment: getPointInSegment,
            buildBezierData: buildBezierData,
            pointOnLine2D: pointOnLine2D,
            pointOnLine3D: pointOnLine3D
        };
    }

    var bez = bezFunction();
    function dataFunctionManager() {

        //var tCanvasHelper = createTag('canvas').getContext('2d');

        function completeLayers(layers, comps, fontManager) {
            var layerData;
            var animArray, lastFrame;
            var i,
                len = layers.length;
            var j, jLen, k, kLen;
            for (i = 0; i < len; i += 1) {
                layerData = layers[i];
                if (!('ks' in layerData) || layerData.completed) {
                    continue;
                }
                layerData.completed = true;
                if (layerData.tt) {
                    layers[i - 1].td = layerData.tt;
                }
                animArray = [];
                lastFrame = -1;
                if (layerData.hasMask) {
                    var maskProps = layerData.masksProperties;
                    jLen = maskProps.length;
                    for (j = 0; j < jLen; j += 1) {
                        if (maskProps[j].pt.k.i) {
                            convertPathsToAbsoluteValues(maskProps[j].pt.k);
                        } else {
                            kLen = maskProps[j].pt.k.length;
                            for (k = 0; k < kLen; k += 1) {
                                if (maskProps[j].pt.k[k].s) {
                                    convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                                }
                                if (maskProps[j].pt.k[k].e) {
                                    convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                                }
                            }
                        }
                    }
                }
                if (layerData.ty === 0) {
                    layerData.layers = findCompLayers(layerData.refId, comps);
                    completeLayers(layerData.layers, comps, fontManager);
                } else if (layerData.ty === 4) {
                    completeShapes(layerData.shapes);
                } else if (layerData.ty == 5) {
                    completeText(layerData, fontManager);
                }
            }
        }

        function findCompLayers(id, comps) {
            var i = 0,
                len = comps.length;
            while (i < len) {
                if (comps[i].id === id) {
                    if (!comps[i].layers.__used) {
                        comps[i].layers.__used = true;
                        return comps[i].layers;
                    }
                    return JSON.parse(JSON.stringify(comps[i].layers));
                }
                i += 1;
            }
        }

        function completeShapes(arr) {
            var i,
                len = arr.length;
            var j, jLen;
            var hasPaths = false;
            for (i = len - 1; i >= 0; i -= 1) {
                if (arr[i].ty == 'sh') {
                    if (arr[i].ks.k.i) {
                        convertPathsToAbsoluteValues(arr[i].ks.k);
                    } else {
                        jLen = arr[i].ks.k.length;
                        for (j = 0; j < jLen; j += 1) {
                            if (arr[i].ks.k[j].s) {
                                convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                            }
                            if (arr[i].ks.k[j].e) {
                                convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                            }
                        }
                    }
                    hasPaths = true;
                } else if (arr[i].ty == 'gr') {
                    completeShapes(arr[i].it);
                }
            }
            /*if(hasPaths){
                //mx: distance
                //ss: sensitivity
                //dc: decay
                arr.splice(arr.length-1,0,{
                    "ty": "ms",
                    "mx":20,
                    "ss":10,
                     "dc":0.001,
                    "maxDist":200
                });
            }*/
        }

        function convertPathsToAbsoluteValues(path) {
            var i,
                len = path.i.length;
            for (i = 0; i < len; i += 1) {
                path.i[i][0] += path.v[i][0];
                path.i[i][1] += path.v[i][1];
                path.o[i][0] += path.v[i][0];
                path.o[i][1] += path.v[i][1];
            }
        }

        function checkVersion(minimum, animVersionString) {
            var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];
            if (minimum[0] > animVersion[0]) {
                return true;
            } else if (animVersion[0] > minimum[0]) {
                return false;
            }
            if (minimum[1] > animVersion[1]) {
                return true;
            } else if (animVersion[1] > minimum[1]) {
                return false;
            }
            if (minimum[2] > animVersion[2]) {
                return true;
            } else if (animVersion[2] > minimum[2]) {
                return false;
            }
        }

        var checkText = function () {
            var minimumVersion = [4, 4, 14];

            function updateTextLayer(textLayer) {
                var documentData = textLayer.t.d;
                textLayer.t.d = {
                    k: [{
                        s: documentData,
                        t: 0
                    }]
                };
            }

            function iterateLayers(layers) {
                var i,
                    len = layers.length;
                for (i = 0; i < len; i += 1) {
                    if (layers[i].ty === 5) {
                        updateTextLayer(layers[i]);
                    }
                }
            }

            return function (animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i,
                            len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);
                            }
                        }
                    }
                }
            };
        }();

        var checkChars = function () {
            var minimumVersion = [4, 7, 99];
            return function (animationData) {
                if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                    var i,
                        len = animationData.chars.length,
                        j,
                        jLen,
                        k,
                        kLen;
                    var pathData, paths;
                    for (i = 0; i < len; i += 1) {
                        if (animationData.chars[i].data && animationData.chars[i].data.shapes) {
                            paths = animationData.chars[i].data.shapes[0].it;
                            jLen = paths.length;

                            for (j = 0; j < jLen; j += 1) {
                                pathData = paths[j].ks.k;
                                if (!pathData.__converted) {
                                    convertPathsToAbsoluteValues(paths[j].ks.k);
                                    pathData.__converted = true;
                                }
                            }
                        }
                    }
                }
            };
        }();

        var checkColors = function () {
            var minimumVersion = [4, 1, 9];

            function iterateShapes(shapes) {
                var i,
                    len = shapes.length;
                var j, jLen;
                for (i = 0; i < len; i += 1) {
                    if (shapes[i].ty === 'gr') {
                        iterateShapes(shapes[i].it);
                    } else if (shapes[i].ty === 'fl' || shapes[i].ty === 'st') {
                        if (shapes[i].c.k && shapes[i].c.k[0].i) {
                            jLen = shapes[i].c.k.length;
                            for (j = 0; j < jLen; j += 1) {
                                if (shapes[i].c.k[j].s) {
                                    shapes[i].c.k[j].s[0] /= 255;
                                    shapes[i].c.k[j].s[1] /= 255;
                                    shapes[i].c.k[j].s[2] /= 255;
                                    shapes[i].c.k[j].s[3] /= 255;
                                }
                                if (shapes[i].c.k[j].e) {
                                    shapes[i].c.k[j].e[0] /= 255;
                                    shapes[i].c.k[j].e[1] /= 255;
                                    shapes[i].c.k[j].e[2] /= 255;
                                    shapes[i].c.k[j].e[3] /= 255;
                                }
                            }
                        } else {
                            shapes[i].c.k[0] /= 255;
                            shapes[i].c.k[1] /= 255;
                            shapes[i].c.k[2] /= 255;
                            shapes[i].c.k[3] /= 255;
                        }
                    }
                }
            }

            function iterateLayers(layers) {
                var i,
                    len = layers.length;
                for (i = 0; i < len; i += 1) {
                    if (layers[i].ty === 4) {
                        iterateShapes(layers[i].shapes);
                    }
                }
            }

            return function (animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i,
                            len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);
                            }
                        }
                    }
                }
            };
        }();

        var checkShapes = function () {
            var minimumVersion = [4, 4, 18];

            function completeShapes(arr) {
                var i,
                    len = arr.length;
                var j, jLen;
                var hasPaths = false;
                for (i = len - 1; i >= 0; i -= 1) {
                    if (arr[i].ty == 'sh') {
                        if (arr[i].ks.k.i) {
                            arr[i].ks.k.c = arr[i].closed;
                        } else {
                            jLen = arr[i].ks.k.length;
                            for (j = 0; j < jLen; j += 1) {
                                if (arr[i].ks.k[j].s) {
                                    arr[i].ks.k[j].s[0].c = arr[i].closed;
                                }
                                if (arr[i].ks.k[j].e) {
                                    arr[i].ks.k[j].e[0].c = arr[i].closed;
                                }
                            }
                        }
                        hasPaths = true;
                    } else if (arr[i].ty == 'gr') {
                        completeShapes(arr[i].it);
                    }
                }
            }

            function iterateLayers(layers) {
                var layerData;
                var i,
                    len = layers.length;
                var j, jLen, k, kLen;
                for (i = 0; i < len; i += 1) {
                    layerData = layers[i];
                    if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;
                        for (j = 0; j < jLen; j += 1) {
                            if (maskProps[j].pt.k.i) {
                                maskProps[j].pt.k.c = maskProps[j].cl;
                            } else {
                                kLen = maskProps[j].pt.k.length;
                                for (k = 0; k < kLen; k += 1) {
                                    if (maskProps[j].pt.k[k].s) {
                                        maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                                    }
                                    if (maskProps[j].pt.k[k].e) {
                                        maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                                    }
                                }
                            }
                        }
                    }
                    if (layerData.ty === 4) {
                        completeShapes(layerData.shapes);
                    }
                }
            }

            return function (animationData) {
                if (checkVersion(minimumVersion, animationData.v)) {
                    iterateLayers(animationData.layers);
                    if (animationData.assets) {
                        var i,
                            len = animationData.assets.length;
                        for (i = 0; i < len; i += 1) {
                            if (animationData.assets[i].layers) {
                                iterateLayers(animationData.assets[i].layers);
                            }
                        }
                    }
                }
            };
        }();

        function completeData(animationData, fontManager) {
            if (animationData.__complete) {
                return;
            }
            checkColors(animationData);
            checkText(animationData);
            checkChars(animationData);
            checkShapes(animationData);
            completeLayers(animationData.layers, animationData.assets, fontManager);
            animationData.__complete = true;
            //blitAnimation(animationData, animationData.assets, fontManager);
        }

        function completeText(data, fontManager) {
            if (data.t.a.length === 0 && !('m' in data.t.p)) {
                data.singleShape = true;
            }
        }

        var moduleOb = {};
        moduleOb.completeData = completeData;

        return moduleOb;
    }

    var dataManager = dataFunctionManager();
    var FontManager = function () {

        var maxWaitingTime = 5000;
        var emptyChar = {
            w: 0,
            size: 0,
            shapes: []
        };
        var combinedCharacters = [];
        //Hindi characters
        combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);

        function setUpNode(font, family) {
            var parentNode = createTag('span');
            parentNode.style.fontFamily = family;
            var node = createTag('span');
            // Characters that vary significantly among different fonts
            node.innerHTML = 'giItT1WQy@!-/#';
            // Visible - so we can measure it - but not on the screen
            parentNode.style.position = 'absolute';
            parentNode.style.left = '-10000px';
            parentNode.style.top = '-10000px';
            // Large font size makes even subtle changes obvious
            parentNode.style.fontSize = '300px';
            // Reset any font properties
            parentNode.style.fontVariant = 'normal';
            parentNode.style.fontStyle = 'normal';
            parentNode.style.fontWeight = 'normal';
            parentNode.style.letterSpacing = '0';
            parentNode.appendChild(node);
            document.body.appendChild(parentNode);

            // Remember width with no applied web font
            var width = node.offsetWidth;
            node.style.fontFamily = font + ', ' + family;
            return { node: node, w: width, parent: parentNode };
        }

        function checkLoadedFonts() {
            var i,
                len = this.fonts.length;
            var node, w;
            var loadedCount = len;
            for (i = 0; i < len; i += 1) {
                if (this.fonts[i].loaded) {
                    loadedCount -= 1;
                    continue;
                }
                if (this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0) {
                    this.fonts[i].loaded = true;
                } else {
                    node = this.fonts[i].monoCase.node;
                    w = this.fonts[i].monoCase.w;
                    if (node.offsetWidth !== w) {
                        loadedCount -= 1;
                        this.fonts[i].loaded = true;
                    } else {
                        node = this.fonts[i].sansCase.node;
                        w = this.fonts[i].sansCase.w;
                        if (node.offsetWidth !== w) {
                            loadedCount -= 1;
                            this.fonts[i].loaded = true;
                        }
                    }
                    if (this.fonts[i].loaded) {
                        this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                        this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
                    }
                }
            }

            if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
                setTimeout(this.checkLoadedFonts.bind(this), 20);
            } else {
                setTimeout(function () {
                    this.isLoaded = true;
                }.bind(this), 0);
            }
        }

        function createHelper(def, fontData) {
            var tHelper = createNS('text');
            tHelper.style.fontSize = '100px';
            //tHelper.style.fontFamily = fontData.fFamily;
            tHelper.setAttribute('font-family', fontData.fFamily);
            tHelper.setAttribute('font-style', fontData.fStyle);
            tHelper.setAttribute('font-weight', fontData.fWeight);
            tHelper.textContent = '1';
            if (fontData.fClass) {
                tHelper.style.fontFamily = 'inherit';
                tHelper.setAttribute('class', fontData.fClass);
            } else {
                tHelper.style.fontFamily = fontData.fFamily;
            }
            def.appendChild(tHelper);
            var tCanvasHelper = createTag('canvas').getContext('2d');
            tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px ' + fontData.fFamily;
            //tCanvasHelper.font = ' 100px '+ fontData.fFamily;
            return tHelper;
        }

        function addFonts(fontData, defs) {
            if (!fontData) {
                this.isLoaded = true;
                return;
            }
            if (this.chars) {
                this.isLoaded = true;
                this.fonts = fontData.list;
                return;
            }

            var fontArr = fontData.list;
            var i,
                len = fontArr.length;
            var _pendingFonts = len;
            for (i = 0; i < len; i += 1) {
                var shouldLoadFont = true;
                var loadedSelector;
                var j;
                fontArr[i].loaded = false;
                fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, 'monospace');
                fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, 'sans-serif');
                if (!fontArr[i].fPath) {
                    fontArr[i].loaded = true;
                    _pendingFonts -= 1;
                } else if (fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3) {
                    loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i].fFamily + '"]');

                    if (loadedSelector.length > 0) {
                        shouldLoadFont = false;
                    }

                    if (shouldLoadFont) {
                        var s = createTag('style');
                        s.setAttribute('f-forigin', fontArr[i].fOrigin);
                        s.setAttribute('f-origin', fontArr[i].origin);
                        s.setAttribute('f-family', fontArr[i].fFamily);
                        s.type = "text/css";
                        s.innerHTML = "@font-face {" + "font-family: " + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
                        defs.appendChild(s);
                    }
                } else if (fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1) {
                    loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');

                    for (j = 0; j < loadedSelector.length; j++) {
                        if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
                            // Font is already loaded
                            shouldLoadFont = false;
                        }
                    }

                    if (shouldLoadFont) {
                        var l = createTag('link');
                        l.setAttribute('f-forigin', fontArr[i].fOrigin);
                        l.setAttribute('f-origin', fontArr[i].origin);
                        l.type = "text/css";
                        l.rel = "stylesheet";
                        l.href = fontArr[i].fPath;
                        document.body.appendChild(l);
                    }
                } else if (fontArr[i].fOrigin === 't' || fontArr[i].origin === 2) {
                    loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');

                    for (j = 0; j < loadedSelector.length; j++) {
                        if (fontArr[i].fPath === loadedSelector[j].src) {
                            // Font is already loaded
                            shouldLoadFont = false;
                        }
                    }

                    if (shouldLoadFont) {
                        var sc = createTag('link');
                        sc.setAttribute('f-forigin', fontArr[i].fOrigin);
                        sc.setAttribute('f-origin', fontArr[i].origin);
                        sc.setAttribute('rel', 'stylesheet');
                        sc.setAttribute('href', fontArr[i].fPath);
                        defs.appendChild(sc);
                    }
                }
                fontArr[i].helper = createHelper(defs, fontArr[i]);
                fontArr[i].cache = {};
                this.fonts.push(fontArr[i]);
            }
            if (_pendingFonts === 0) {
                this.isLoaded = true;
            } else {
                //On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
                //Adding this timeout seems to fix it
                setTimeout(this.checkLoadedFonts.bind(this), 100);
            }
        }

        function addChars(chars) {
            if (!chars) {
                return;
            }
            if (!this.chars) {
                this.chars = [];
            }
            var i,
                len = chars.length;
            var j,
                jLen = this.chars.length,
                found;
            for (i = 0; i < len; i += 1) {
                j = 0;
                found = false;
                while (j < jLen) {
                    if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
                        found = true;
                    }
                    j += 1;
                }
                if (!found) {
                    this.chars.push(chars[i]);
                    jLen += 1;
                }
            }
        }

        function getCharData(char, style, font) {
            var i = 0,
                len = this.chars.length;
            while (i < len) {
                if (this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font) {

                    return this.chars[i];
                }
                i += 1;
            }
            if ((typeof char === 'string' && char.charCodeAt(0) !== 13 || !char) && console && console.warn) {
                console.warn('Missing character from exported characters list: ', char, style, font);
            }
            return emptyChar;
        }

        function measureText(char, fontName, size) {
            var fontData = this.getFontByName(fontName);
            var index = char.charCodeAt(0);
            if (!fontData.cache[index + 1]) {
                var tHelper = fontData.helper;
                //Canvas version
                //fontData.cache[index] = tHelper.measureText(char).width / 100;
                //SVG version
                //console.log(tHelper.getBBox().width)
                if (char === ' ') {
                    tHelper.textContent = '|' + char + '|';
                    var doubleSize = tHelper.getComputedTextLength();
                    tHelper.textContent = '||';
                    var singleSize = tHelper.getComputedTextLength();
                    fontData.cache[index + 1] = (doubleSize - singleSize) / 100;
                } else {
                    tHelper.textContent = char;
                    fontData.cache[index + 1] = tHelper.getComputedTextLength() / 100;
                }
            }
            return fontData.cache[index + 1] * size;
        }

        function getFontByName(name) {
            var i = 0,
                len = this.fonts.length;
            while (i < len) {
                if (this.fonts[i].fName === name) {
                    return this.fonts[i];
                }
                i += 1;
            }
            return this.fonts[0];
        }

        function getCombinedCharacterCodes() {
            return combinedCharacters;
        }

        function loaded() {
            return this.isLoaded;
        }

        var Font = function Font() {
            this.fonts = [];
            this.chars = null;
            this.typekitLoaded = 0;
            this.isLoaded = false;
            this.initTime = Date.now();
        };
        //TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it. 
        Font.getCombinedCharacterCodes = getCombinedCharacterCodes;

        Font.prototype.addChars = addChars;
        Font.prototype.addFonts = addFonts;
        Font.prototype.getCharData = getCharData;
        Font.prototype.getFontByName = getFontByName;
        Font.prototype.measureText = measureText;
        Font.prototype.checkLoadedFonts = checkLoadedFonts;
        Font.prototype.loaded = loaded;

        return Font;
    }();
    var PropertyFactory = function () {

        var initFrame = initialDefaultFrame;
        var math_abs = Math.abs;

        function interpolateValue(frameNum, caching) {
            var offsetTime = this.offsetTime;
            var newValue;
            if (this.propType === 'multidimensional') {
                newValue = createTypedArray('float32', this.pv.length);
            }
            var iterationIndex = caching.lastIndex;
            var i = iterationIndex;
            var len = this.keyframes.length - 1,
                flag = true;
            var keyData, nextKeyData;

            while (flag) {
                keyData = this.keyframes[i];
                nextKeyData = this.keyframes[i + 1];
                if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
                    if (keyData.h) {
                        keyData = nextKeyData;
                    }
                    iterationIndex = 0;
                    break;
                }
                if (nextKeyData.t - offsetTime > frameNum) {
                    iterationIndex = i;
                    break;
                }
                if (i < len - 1) {
                    i += 1;
                } else {
                    iterationIndex = 0;
                    flag = false;
                }
            }

            var k, kLen, perc, jLen, j, fnc;
            var nextKeyTime = nextKeyData.t - offsetTime;
            var keyTime = keyData.t - offsetTime;
            var endValue;
            if (keyData.to) {
                if (!keyData.bezierData) {
                    keyData.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
                }
                var bezierData = keyData.bezierData;
                if (frameNum >= nextKeyTime || frameNum < keyTime) {
                    var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
                    kLen = bezierData.points[ind].point.length;
                    for (k = 0; k < kLen; k += 1) {
                        newValue[k] = bezierData.points[ind].point[k];
                    }
                    // caching._lastKeyframeIndex = -1;
                } else {
                    if (keyData.__fnct) {
                        fnc = keyData.__fnct;
                    } else {
                        fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                        keyData.__fnct = fnc;
                    }
                    perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                    var distanceInLine = bezierData.segmentLength * perc;

                    var segmentPerc;
                    var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;
                    j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;
                    flag = true;
                    jLen = bezierData.points.length;
                    while (flag) {
                        addedLength += bezierData.points[j].partialLength;
                        if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                            kLen = bezierData.points[j].point.length;
                            for (k = 0; k < kLen; k += 1) {
                                newValue[k] = bezierData.points[j].point[k];
                            }
                            break;
                        } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                            segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                            kLen = bezierData.points[j].point.length;
                            for (k = 0; k < kLen; k += 1) {
                                newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                            }
                            break;
                        }
                        if (j < jLen - 1) {
                            j += 1;
                        } else {
                            flag = false;
                        }
                    }
                    caching._lastPoint = j;
                    caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
                    caching._lastKeyframeIndex = i;
                }
            } else {
                var outX, outY, inX, inY, keyValue;
                len = keyData.s.length;
                endValue = nextKeyData.s || keyData.e;
                if (this.sh && keyData.h !== 1) {
                    if (frameNum >= nextKeyTime) {
                        newValue[0] = endValue[0];
                        newValue[1] = endValue[1];
                        newValue[2] = endValue[2];
                    } else if (frameNum <= keyTime) {
                        newValue[0] = keyData.s[0];
                        newValue[1] = keyData.s[1];
                        newValue[2] = keyData.s[2];
                    } else {
                        var quatStart = createQuaternion(keyData.s);
                        var quatEnd = createQuaternion(endValue);
                        var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
                        quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
                    }
                } else {
                    for (i = 0; i < len; i += 1) {
                        if (keyData.h !== 1) {
                            if (frameNum >= nextKeyTime) {
                                perc = 1;
                            } else if (frameNum < keyTime) {
                                perc = 0;
                            } else {
                                if (keyData.o.x.constructor === Array) {
                                    if (!keyData.__fnct) {
                                        keyData.__fnct = [];
                                    }
                                    if (!keyData.__fnct[i]) {
                                        outX = typeof keyData.o.x[i] === 'undefined' ? keyData.o.x[0] : keyData.o.x[i];
                                        outY = typeof keyData.o.y[i] === 'undefined' ? keyData.o.y[0] : keyData.o.y[i];
                                        inX = typeof keyData.i.x[i] === 'undefined' ? keyData.i.x[0] : keyData.i.x[i];
                                        inY = typeof keyData.i.y[i] === 'undefined' ? keyData.i.y[0] : keyData.i.y[i];
                                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                        keyData.__fnct[i] = fnc;
                                    } else {
                                        fnc = keyData.__fnct[i];
                                    }
                                } else {
                                    if (!keyData.__fnct) {
                                        outX = keyData.o.x;
                                        outY = keyData.o.y;
                                        inX = keyData.i.x;
                                        inY = keyData.i.y;
                                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                                        keyData.__fnct = fnc;
                                    } else {
                                        fnc = keyData.__fnct;
                                    }
                                }
                                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                            }
                        }

                        endValue = nextKeyData.s || keyData.e;
                        keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;

                        if (len === 1) {
                            newValue = keyValue;
                        } else {
                            newValue[i] = keyValue;
                        }
                    }
                }
            }
            caching.lastIndex = iterationIndex;
            return newValue;
        }

        //based on @Toji's https://github.com/toji/gl-matrix/
        function slerp(a, b, t) {
            var out = [];
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3],
                bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];

            var omega, cosom, sinom, scale0, scale1;

            cosom = ax * bx + ay * by + az * bz + aw * bw;
            if (cosom < 0.0) {
                cosom = -cosom;
                bx = -bx;
                by = -by;
                bz = -bz;
                bw = -bw;
            }
            if (1.0 - cosom > 0.000001) {
                omega = Math.acos(cosom);
                sinom = Math.sin(omega);
                scale0 = Math.sin((1.0 - t) * omega) / sinom;
                scale1 = Math.sin(t * omega) / sinom;
            } else {
                scale0 = 1.0 - t;
                scale1 = t;
            }
            out[0] = scale0 * ax + scale1 * bx;
            out[1] = scale0 * ay + scale1 * by;
            out[2] = scale0 * az + scale1 * bz;
            out[3] = scale0 * aw + scale1 * bw;

            return out;
        }

        function quaternionToEuler(out, quat) {
            var qx = quat[0];
            var qy = quat[1];
            var qz = quat[2];
            var qw = quat[3];
            var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
            var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
            var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
            out[0] = heading / degToRads;
            out[1] = attitude / degToRads;
            out[2] = bank / degToRads;
        }

        function createQuaternion(values) {
            var heading = values[0] * degToRads;
            var attitude = values[1] * degToRads;
            var bank = values[2] * degToRads;
            var c1 = Math.cos(heading / 2);
            var c2 = Math.cos(attitude / 2);
            var c3 = Math.cos(bank / 2);
            var s1 = Math.sin(heading / 2);
            var s2 = Math.sin(attitude / 2);
            var s3 = Math.sin(bank / 2);
            var w = c1 * c2 * c3 - s1 * s2 * s3;
            var x = s1 * s2 * c3 + c1 * c2 * s3;
            var y = s1 * c2 * c3 + c1 * s2 * s3;
            var z = c1 * s2 * c3 - s1 * c2 * s3;

            return [x, y, z, w];
        }

        function getValueAtCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
                if (this._caching.lastFrame >= frameNum) {
                    this._caching._lastKeyframeIndex = -1;
                    this._caching.lastIndex = 0;
                }

                var renderResult = this.interpolateValue(frameNum, this._caching);
                this.pv = renderResult;
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
        }

        function setVValue(val) {
            var multipliedValue;
            if (this.propType === 'unidimensional') {
                multipliedValue = val * this.mult;
                if (math_abs(this.v - multipliedValue) > 0.00001) {
                    this.v = multipliedValue;
                    this._mdf = true;
                }
            } else {
                var i = 0,
                    len = this.v.length;
                while (i < len) {
                    multipliedValue = val[i] * this.mult;
                    if (math_abs(this.v[i] - multipliedValue) > 0.00001) {
                        this.v[i] = multipliedValue;
                        this._mdf = true;
                    }
                    i += 1;
                }
            }
        }

        function processEffectsSequence() {
            if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
                return;
            }
            if (this.lock) {
                this.setVValue(this.pv);
                return;
            }
            this.lock = true;
            this._mdf = this._isFirstFrame;
            var multipliedValue;
            var i,
                len = this.effectsSequence.length;
            var finalValue = this.kf ? this.pv : this.data.k;
            for (i = 0; i < len; i += 1) {
                finalValue = this.effectsSequence[i](finalValue);
            }
            this.setVValue(finalValue);
            this._isFirstFrame = false;
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
        }

        function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
        }

        function ValueProperty(elem, data, mult, container) {
            this.propType = 'unidimensional';
            this.mult = mult || 1;
            this.data = data;
            this.v = mult ? data.k * mult : data.k;
            this.pv = data.k;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.vel = 0;
            this.effectsSequence = [];
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
        }

        function MultiDimensionalProperty(elem, data, mult, container) {
            this.propType = 'multidimensional';
            this.mult = mult || 1;
            this.data = data;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.frameId = -1;
            var i,
                len = data.k.length;
            this.v = createTypedArray('float32', len);
            this.pv = createTypedArray('float32', len);
            var arr = createTypedArray('float32', len);
            this.vel = createTypedArray('float32', len);
            for (i = 0; i < len; i += 1) {
                this.v[i] = data.k[i] * this.mult;
                this.pv[i] = data.k[i];
            }
            this._isFirstFrame = true;
            this.effectsSequence = [];
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
        }

        function KeyframedValueProperty(elem, data, mult, container) {
            this.propType = 'unidimensional';
            this.keyframes = data.k;
            this.offsetTime = elem.data.st;
            this.frameId = -1;
            this._caching = { lastFrame: initFrame, lastIndex: 0, value: 0, _lastKeyframeIndex: -1 };
            this.k = true;
            this.kf = true;
            this.data = data;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.v = initFrame;
            this.pv = initFrame;
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.addEffect = addEffect;
        }

        function KeyframedMultidimensionalProperty(elem, data, mult, container) {
            this.propType = 'multidimensional';
            var i,
                len = data.k.length;
            var s, e, to, ti;
            for (i = 0; i < len - 1; i += 1) {
                if (data.k[i].to && data.k[i].s && data.k[i].e) {
                    s = data.k[i].s;
                    e = data.k[i].e;
                    to = data.k[i].to;
                    ti = data.k[i].ti;
                    if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
                        data.k[i].to = null;
                        data.k[i].ti = null;
                    }
                    if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                        if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
                            data.k[i].to = null;
                            data.k[i].ti = null;
                        }
                    }
                }
            }
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.keyframes = data.k;
            this.offsetTime = elem.data.st;
            this.k = true;
            this.kf = true;
            this._isFirstFrame = true;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.frameId = -1;
            var arrLen = data.k[0].s.length;
            this.v = createTypedArray('float32', arrLen);
            this.pv = createTypedArray('float32', arrLen);
            for (i = 0; i < arrLen; i += 1) {
                this.v[i] = initFrame;
                this.pv[i] = initFrame;
            }
            this._caching = { lastFrame: initFrame, lastIndex: 0, value: createTypedArray('float32', arrLen) };
            this.addEffect = addEffect;
        }

        function getProp(elem, data, type, mult, container) {
            var p;
            if (!data.k.length) {
                p = new ValueProperty(elem, data, mult, container);
            } else if (typeof data.k[0] === 'number') {
                p = new MultiDimensionalProperty(elem, data, mult, container);
            } else {
                switch (type) {
                    case 0:
                        p = new KeyframedValueProperty(elem, data, mult, container);
                        break;
                    case 1:
                        p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                        break;
                }
            }
            if (p.effectsSequence.length) {
                container.addDynamicProperty(p);
            }
            return p;
        }

        var ob = {
            getProp: getProp
        };
        return ob;
    }();
    var TransformPropertyFactory = function () {

        function applyToMatrix(mat) {
            var _mdf = this._mdf;
            this.iterateDynamicProperties();
            this._mdf = this._mdf || _mdf;
            if (this.a) {
                mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if (this.s) {
                mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk) {
                mat.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r) {
                mat.rotate(-this.r.v);
            } else {
                mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.data.p.s) {
                if (this.data.p.z) {
                    mat.translate(this.px.v, this.py.v, -this.pz.v);
                } else {
                    mat.translate(this.px.v, this.py.v, 0);
                }
            } else {
                mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
        }
        function processKeys(forceRender) {
            if (this.elem.globalData.frameId === this.frameId) {
                return;
            }
            if (this._isDirty) {
                this.precalculateMatrix();
                this._isDirty = false;
            }

            this.iterateDynamicProperties();

            if (this._mdf || forceRender) {
                this.v.cloneFromProps(this.pre.props);
                if (this.appliedTransformations < 1) {
                    this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                }
                if (this.appliedTransformations < 2) {
                    this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                }
                if (this.sk && this.appliedTransformations < 3) {
                    this.v.skewFromAxis(-this.sk.v, this.sa.v);
                }
                if (this.r && this.appliedTransformations < 4) {
                    this.v.rotate(-this.r.v);
                } else if (!this.r && this.appliedTransformations < 4) {
                    this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                }
                if (this.autoOriented) {
                    var v1,
                        v2,
                        frameRate = this.elem.globalData.frameRate;
                    if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                        if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                            v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                            v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                        } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                            v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                            v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.01) / frameRate, 0);
                        } else {
                            v1 = this.p.pv;
                            v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                        }
                    } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                        v1 = [];
                        v2 = [];
                        var px = this.px,
                            py = this.py,
                            frameRate;
                        if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                            v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                            v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                            v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                            v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                        } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                            v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                            v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                            v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                            v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                        } else {
                            v1 = [px.pv, py.pv];
                            v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                            v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                        }
                    }
                    this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
                }
                if (this.data.p && this.data.p.s) {
                    if (this.data.p.z) {
                        this.v.translate(this.px.v, this.py.v, -this.pz.v);
                    } else {
                        this.v.translate(this.px.v, this.py.v, 0);
                    }
                } else {
                    this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
                }
            }
            this.frameId = this.elem.globalData.frameId;
        }

        function precalculateMatrix() {
            if (!this.a.k) {
                this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
                this.appliedTransformations = 1;
            } else {
                return;
            }
            if (!this.s.effectsSequence.length) {
                this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
                this.appliedTransformations = 2;
            } else {
                return;
            }
            if (this.sk) {
                if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                    this.pre.skewFromAxis(-this.sk.v, this.sa.v);
                    this.appliedTransformations = 3;
                } else {
                    return;
                }
            }
            if (this.r) {
                if (!this.r.effectsSequence.length) {
                    this.pre.rotate(-this.r.v);
                    this.appliedTransformations = 4;
                } else {
                    return;
                }
            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
                this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
                this.appliedTransformations = 4;
            }
        }

        function autoOrient() {
            //
            //var prevP = this.getValueAtTime();
        }

        function addDynamicProperty(prop) {
            this._addDynamicProperty(prop);
            this.elem.addDynamicProperty(prop);
            this._isDirty = true;
        }

        function TransformProperty(elem, data, container) {
            this.elem = elem;
            this.frameId = -1;
            this.propType = 'transform';
            this.data = data;
            this.v = new Matrix();
            //Precalculated matrix with non animated properties
            this.pre = new Matrix();
            this.appliedTransformations = 0;
            this.initDynamicPropertyContainer(container || elem);
            if (data.p && data.p.s) {
                this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
                this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);
                if (data.p.z) {
                    this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
                }
            } else {
                this.p = PropertyFactory.getProp(elem, data.p || { k: [0, 0, 0] }, 1, 0, this);
            }
            if (data.rx) {
                this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
                this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
                this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
                if (data.or.k[0].ti) {
                    var i,
                        len = data.or.k.length;
                    for (i = 0; i < len; i += 1) {
                        data.or.k[i].to = data.or.k[i].ti = null;
                    }
                }
                this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
                //sh Indicates it needs to be capped between -180 and 180
                this.or.sh = true;
            } else {
                this.r = PropertyFactory.getProp(elem, data.r || { k: 0 }, 0, degToRads, this);
            }
            if (data.sk) {
                this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
                this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
            }
            this.a = PropertyFactory.getProp(elem, data.a || { k: [0, 0, 0] }, 1, 0, this);
            this.s = PropertyFactory.getProp(elem, data.s || { k: [100, 100, 100] }, 1, 0.01, this);
            // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
            if (data.o) {
                this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
            } else {
                this.o = { _mdf: false, v: 1 };
            }
            this._isDirty = true;
            if (!this.dynamicProperties.length) {
                this.getValue(true);
            }
        }

        TransformProperty.prototype = {
            applyToMatrix: applyToMatrix,
            getValue: processKeys,
            precalculateMatrix: precalculateMatrix,
            autoOrient: autoOrient
        };

        extendPrototype([DynamicPropertyContainer], TransformProperty);
        TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
        TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

        function getTransformProperty(elem, data, container) {
            return new TransformProperty(elem, data, container);
        }

        return {
            getTransformProperty: getTransformProperty
        };
    }();
    function ShapePath() {
        this.c = false;
        this._length = 0;
        this._maxLength = 8;
        this.v = createSizedArray(this._maxLength);
        this.o = createSizedArray(this._maxLength);
        this.i = createSizedArray(this._maxLength);
    }

    ShapePath.prototype.setPathData = function (closed, len) {
        this.c = closed;
        this.setLength(len);
        var i = 0;
        while (i < len) {
            this.v[i] = point_pool.newElement();
            this.o[i] = point_pool.newElement();
            this.i[i] = point_pool.newElement();
            i += 1;
        }
    };

    ShapePath.prototype.setLength = function (len) {
        while (this._maxLength < len) {
            this.doubleArrayLength();
        }
        this._length = len;
    };

    ShapePath.prototype.doubleArrayLength = function () {
        this.v = this.v.concat(createSizedArray(this._maxLength));
        this.i = this.i.concat(createSizedArray(this._maxLength));
        this.o = this.o.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
    };

    ShapePath.prototype.setXYAt = function (x, y, type, pos, replace) {
        var arr;
        this._length = Math.max(this._length, pos + 1);
        if (this._length >= this._maxLength) {
            this.doubleArrayLength();
        }
        switch (type) {
            case 'v':
                arr = this.v;
                break;
            case 'i':
                arr = this.i;
                break;
            case 'o':
                arr = this.o;
                break;
        }
        if (!arr[pos] || arr[pos] && !replace) {
            arr[pos] = point_pool.newElement();
        }
        arr[pos][0] = x;
        arr[pos][1] = y;
    };

    ShapePath.prototype.setTripleAt = function (vX, vY, oX, oY, iX, iY, pos, replace) {
        this.setXYAt(vX, vY, 'v', pos, replace);
        this.setXYAt(oX, oY, 'o', pos, replace);
        this.setXYAt(iX, iY, 'i', pos, replace);
    };

    ShapePath.prototype.reverse = function () {
        var newPath = new ShapePath();
        newPath.setPathData(this.c, this._length);
        var vertices = this.v,
            outPoints = this.o,
            inPoints = this.i;
        var init = 0;
        if (this.c) {
            newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
            init = 1;
        }
        var cnt = this._length - 1;
        var len = this._length;

        var i;
        for (i = init; i < len; i += 1) {
            newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
            cnt -= 1;
        }
        return newPath;
    };
    var ShapePropertyFactory = function () {

        var initFrame = -999999;

        function interpolateShape(frameNum, previousValue, caching) {
            var iterationIndex = caching.lastIndex;
            var keyPropS, keyPropE, isHold, j, k, jLen, kLen, perc, vertexValue;
            var kf = this.keyframes;
            if (frameNum < kf[0].t - this.offsetTime) {
                keyPropS = kf[0].s[0];
                isHold = true;
                iterationIndex = 0;
            } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
                keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
                /*if(kf[kf.length - 1].s){
                    keyPropS = kf[kf.length - 1].s[0];
                }else{
                    keyPropS = kf[kf.length - 2].e[0];
                }*/
                isHold = true;
            } else {
                var i = iterationIndex;
                var len = kf.length - 1,
                    flag = true,
                    keyData,
                    nextKeyData;
                while (flag) {
                    keyData = kf[i];
                    nextKeyData = kf[i + 1];
                    if (nextKeyData.t - this.offsetTime > frameNum) {
                        break;
                    }
                    if (i < len - 1) {
                        i += 1;
                    } else {
                        flag = false;
                    }
                }
                isHold = keyData.h === 1;
                iterationIndex = i;
                if (!isHold) {
                    if (frameNum >= nextKeyData.t - this.offsetTime) {
                        perc = 1;
                    } else if (frameNum < keyData.t - this.offsetTime) {
                        perc = 0;
                    } else {
                        var fnc;
                        if (keyData.__fnct) {
                            fnc = keyData.__fnct;
                        } else {
                            fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                            keyData.__fnct = fnc;
                        }
                        perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
                    }
                    keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
                }
                keyPropS = keyData.s[0];
            }
            jLen = previousValue._length;
            kLen = keyPropS.i[0].length;
            caching.lastIndex = iterationIndex;

            for (j = 0; j < jLen; j += 1) {
                for (k = 0; k < kLen; k += 1) {
                    vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
                    previousValue.i[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
                    previousValue.o[j][k] = vertexValue;
                    vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
                    previousValue.v[j][k] = vertexValue;
                }
            }
        }

        function interpolateShapeCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            var lastFrame = this._caching.lastFrame;
            if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
                ////
                this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
                this.interpolateShape(frameNum, this.pv, this._caching);
                ////
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
        }

        function resetShape() {
            this.paths = this.localShapeCollection;
        }

        function shapesEqual(shape1, shape2) {
            if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
                return false;
            }
            var i,
                len = shape1._length;
            for (i = 0; i < len; i += 1) {
                if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
                    return false;
                }
            }
            return true;
        }

        function setVValue(newPath) {
            if (!shapesEqual(this.v, newPath)) {
                this.v = shape_pool.clone(newPath);
                this.localShapeCollection.releaseShapes();
                this.localShapeCollection.addShape(this.v);
                this._mdf = true;
                this.paths = this.localShapeCollection;
            }
        }

        function processEffectsSequence() {
            if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
                return;
            }
            if (this.lock) {
                this.setVValue(this.pv);
                return;
            }
            this.lock = true;
            this._mdf = false;
            var finalValue = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;
            var i,
                len = this.effectsSequence.length;
            for (i = 0; i < len; i += 1) {
                finalValue = this.effectsSequence[i](finalValue);
            }
            this.setVValue(finalValue);
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
        };

        function ShapeProperty(elem, data, type) {
            this.propType = 'shape';
            this.comp = elem.comp;
            this.container = elem;
            this.elem = elem;
            this.data = data;
            this.k = false;
            this.kf = false;
            this._mdf = false;
            var pathData = type === 3 ? data.pt.k : data.ks.k;
            this.v = shape_pool.clone(pathData);
            this.pv = shape_pool.clone(this.v);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.reset = resetShape;
            this.effectsSequence = [];
        }

        function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
        }

        ShapeProperty.prototype.interpolateShape = interpolateShape;
        ShapeProperty.prototype.getValue = processEffectsSequence;
        ShapeProperty.prototype.setVValue = setVValue;
        ShapeProperty.prototype.addEffect = addEffect;

        function KeyframedShapeProperty(elem, data, type) {
            this.propType = 'shape';
            this.comp = elem.comp;
            this.elem = elem;
            this.container = elem;
            this.offsetTime = elem.data.st;
            this.keyframes = type === 3 ? data.pt.k : data.ks.k;
            this.k = true;
            this.kf = true;
            var i,
                len = this.keyframes[0].s[0].i.length;
            var jLen = this.keyframes[0].s[0].i[0].length;
            this.v = shape_pool.newElement();
            this.v.setPathData(this.keyframes[0].s[0].c, len);
            this.pv = shape_pool.clone(this.v);
            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.lastFrame = initFrame;
            this.reset = resetShape;
            this._caching = { lastFrame: initFrame, lastIndex: 0 };
            this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
        }
        KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
        KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
        KeyframedShapeProperty.prototype.setVValue = setVValue;
        KeyframedShapeProperty.prototype.addEffect = addEffect;

        var EllShapeProperty = function () {

            var cPoint = roundCorner;

            function EllShapeProperty(elem, data) {
                /*this.v = {
                    v: createSizedArray(4),
                    i: createSizedArray(4),
                    o: createSizedArray(4),
                    c: true
                };*/
                this.v = shape_pool.newElement();
                this.v.setPathData(true, 4);
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.paths = this.localShapeCollection;
                this.localShapeCollection.addShape(this.v);
                this.d = data.d;
                this.elem = elem;
                this.comp = elem.comp;
                this.frameId = -1;
                this.initDynamicPropertyContainer(elem);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertEllToPath();
                }
            };

            EllShapeProperty.prototype = {
                reset: resetShape,
                getValue: function getValue() {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();

                    if (this._mdf) {
                        this.convertEllToPath();
                    }
                },
                convertEllToPath: function convertEllToPath() {
                    var p0 = this.p.v[0],
                        p1 = this.p.v[1],
                        s0 = this.s.v[0] / 2,
                        s1 = this.s.v[1] / 2;
                    var _cw = this.d !== 3;
                    var _v = this.v;
                    _v.v[0][0] = p0;
                    _v.v[0][1] = p1 - s1;
                    _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.v[1][1] = p1;
                    _v.v[2][0] = p0;
                    _v.v[2][1] = p1 + s1;
                    _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.v[3][1] = p1;
                    _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.i[0][1] = p1 - s1;
                    _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.i[1][1] = p1 - s1 * cPoint;
                    _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.i[2][1] = p1 + s1;
                    _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.i[3][1] = p1 + s1 * cPoint;
                    _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                    _v.o[0][1] = p1 - s1;
                    _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                    _v.o[1][1] = p1 + s1 * cPoint;
                    _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                    _v.o[2][1] = p1 + s1;
                    _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                    _v.o[3][1] = p1 - s1 * cPoint;
                }
            };

            extendPrototype([DynamicPropertyContainer], EllShapeProperty);

            return EllShapeProperty;
        }();

        var StarShapeProperty = function () {

            function StarShapeProperty(elem, data) {
                this.v = shape_pool.newElement();
                this.v.setPathData(true, 0);
                this.elem = elem;
                this.comp = elem.comp;
                this.data = data;
                this.frameId = -1;
                this.d = data.d;
                this.initDynamicPropertyContainer(elem);
                if (data.sy === 1) {
                    this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
                    this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
                    this.convertToPath = this.convertStarToPath;
                } else {
                    this.convertToPath = this.convertPolygonToPath;
                }
                this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
                this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
                this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.localShapeCollection.addShape(this.v);
                this.paths = this.localShapeCollection;
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertToPath();
                }
            };

            StarShapeProperty.prototype = {
                reset: resetShape,
                getValue: function getValue() {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                        this.convertToPath();
                    }
                },
                convertStarToPath: function convertStarToPath() {
                    var numPts = Math.floor(this.pt.v) * 2;
                    var angle = Math.PI * 2 / numPts;
                    /*this.v.v.length = numPts;
                    this.v.i.length = numPts;
                    this.v.o.length = numPts;*/
                    var longFlag = true;
                    var longRad = this.or.v;
                    var shortRad = this.ir.v;
                    var longRound = this.os.v;
                    var shortRound = this.is.v;
                    var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
                    var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
                    var i,
                        rad,
                        roundness,
                        perimSegment,
                        currentAng = -Math.PI / 2;
                    currentAng += this.r.v;
                    var dir = this.data.d === 3 ? -1 : 1;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                        rad = longFlag ? longRad : shortRad;
                        roundness = longFlag ? longRound : shortRound;
                        perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                        var x = rad * Math.cos(currentAng);
                        var y = rad * Math.sin(currentAng);
                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                        x += +this.p.v[0];
                        y += +this.p.v[1];
                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);

                        /*this.v.v[i] = [x,y];
                        this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                        this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                        this.v._length = numPts;*/
                        longFlag = !longFlag;
                        currentAng += angle * dir;
                    }
                },
                convertPolygonToPath: function convertPolygonToPath() {
                    var numPts = Math.floor(this.pt.v);
                    var angle = Math.PI * 2 / numPts;
                    var rad = this.or.v;
                    var roundness = this.os.v;
                    var perimSegment = 2 * Math.PI * rad / (numPts * 4);
                    var i,
                        currentAng = -Math.PI / 2;
                    var dir = this.data.d === 3 ? -1 : 1;
                    currentAng += this.r.v;
                    this.v._length = 0;
                    for (i = 0; i < numPts; i += 1) {
                        var x = rad * Math.cos(currentAng);
                        var y = rad * Math.sin(currentAng);
                        var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                        var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                        x += +this.p.v[0];
                        y += +this.p.v[1];
                        this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                        currentAng += angle * dir;
                    }
                    this.paths.length = 0;
                    this.paths[0] = this.v;
                }

            };
            extendPrototype([DynamicPropertyContainer], StarShapeProperty);

            return StarShapeProperty;
        }();

        var RectShapeProperty = function () {

            function RectShapeProperty(elem, data) {
                this.v = shape_pool.newElement();
                this.v.c = true;
                this.localShapeCollection = shapeCollection_pool.newShapeCollection();
                this.localShapeCollection.addShape(this.v);
                this.paths = this.localShapeCollection;
                this.elem = elem;
                this.comp = elem.comp;
                this.frameId = -1;
                this.d = data.d;
                this.initDynamicPropertyContainer(elem);
                this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
                this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
                this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);
                if (this.dynamicProperties.length) {
                    this.k = true;
                } else {
                    this.k = false;
                    this.convertRectToPath();
                }
            };

            RectShapeProperty.prototype = {
                convertRectToPath: function convertRectToPath() {
                    var p0 = this.p.v[0],
                        p1 = this.p.v[1],
                        v0 = this.s.v[0] / 2,
                        v1 = this.s.v[1] / 2;
                    var round = bm_min(v0, v1, this.r.v);
                    var cPoint = round * (1 - roundCorner);
                    this.v._length = 0;

                    if (this.d === 2 || this.d === 1) {
                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                        this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                        if (round !== 0) {
                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                        } else {
                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                        }
                    } else {
                        this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                        if (round !== 0) {
                            this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                            this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                            this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                            this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                            this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                        } else {
                            this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                            this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                            this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                        }
                    }
                },
                getValue: function getValue(frameNum) {
                    if (this.elem.globalData.frameId === this.frameId) {
                        return;
                    }
                    this.frameId = this.elem.globalData.frameId;
                    this.iterateDynamicProperties();
                    if (this._mdf) {
                        this.convertRectToPath();
                    }
                },
                reset: resetShape
            };
            extendPrototype([DynamicPropertyContainer], RectShapeProperty);

            return RectShapeProperty;
        }();

        function getShapeProp(elem, data, type) {
            var prop;
            if (type === 3 || type === 4) {
                var dataProp = type === 3 ? data.pt : data.ks;
                var keys = dataProp.k;
                if (keys.length) {
                    prop = new KeyframedShapeProperty(elem, data, type);
                } else {
                    prop = new ShapeProperty(elem, data, type);
                }
            } else if (type === 5) {
                prop = new RectShapeProperty(elem, data);
            } else if (type === 6) {
                prop = new EllShapeProperty(elem, data);
            } else if (type === 7) {
                prop = new StarShapeProperty(elem, data);
            }
            if (prop.k) {
                elem.addDynamicProperty(prop);
            }
            return prop;
        }

        function getConstructorFunction() {
            return ShapeProperty;
        }

        function getKeyframedConstructorFunction() {
            return KeyframedShapeProperty;
        }

        var ob = {};
        ob.getShapeProp = getShapeProp;
        ob.getConstructorFunction = getConstructorFunction;
        ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
        return ob;
    }();
    var ShapeModifiers = function () {
        var ob = {};
        var modifiers = {};
        ob.registerModifier = registerModifier;
        ob.getModifier = getModifier;

        function registerModifier(nm, factory) {
            if (!modifiers[nm]) {
                modifiers[nm] = factory;
            }
        }

        function getModifier(nm, elem, data) {
            return new modifiers[nm](elem, data);
        }

        return ob;
    }();

    function ShapeModifier() {}
    ShapeModifier.prototype.initModifierProperties = function () {};
    ShapeModifier.prototype.addShapeToModifier = function () {};
    ShapeModifier.prototype.addShape = function (data) {
        if (!this.closed) {
            var shapeData = { shape: data.sh, data: data, localShapeCollection: shapeCollection_pool.newShapeCollection() };
            this.shapes.push(shapeData);
            this.addShapeToModifier(shapeData);
            if (this._isAnimated) {
                data.setAsAnimated();
            }
        }
    };
    ShapeModifier.prototype.init = function (elem, data) {
        this.shapes = [];
        this.elem = elem;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, data);
        this.frameId = initialDefaultFrame;
        this.closed = false;
        this.k = false;
        if (this.dynamicProperties.length) {
            this.k = true;
        } else {
            this.getValue(true);
        }
    };
    ShapeModifier.prototype.processKeys = function () {
        if (this.elem.globalData.frameId === this.frameId) {
            return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
    };

    extendPrototype([DynamicPropertyContainer], ShapeModifier);
    function TrimModifier() {}
    extendPrototype([ShapeModifier], TrimModifier);
    TrimModifier.prototype.initModifierProperties = function (elem, data) {
        this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
        this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
        this.sValue = 0;
        this.eValue = 0;
        this.getValue = this.processKeys;
        this.m = data.m;
        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
    };

    TrimModifier.prototype.addShapeToModifier = function (shapeData) {
        shapeData.pathsData = [];
    };

    TrimModifier.prototype.calculateShapeEdges = function (s, e, shapeLength, addedLength, totalModifierLength) {
        var segments = [];
        if (e <= 1) {
            segments.push({
                s: s,
                e: e
            });
        } else if (s >= 1) {
            segments.push({
                s: s - 1,
                e: e - 1
            });
        } else {
            segments.push({
                s: s,
                e: 1
            });
            segments.push({
                s: 0,
                e: e - 1
            });
        }
        var shapeSegments = [];
        var i,
            len = segments.length,
            segmentOb;
        for (i = 0; i < len; i += 1) {
            segmentOb = segments[i];
            if (segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength) {} else {
                var shapeS, shapeE;
                if (segmentOb.s * totalModifierLength <= addedLength) {
                    shapeS = 0;
                } else {
                    shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
                }
                if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                    shapeE = 1;
                } else {
                    shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
                }
                shapeSegments.push([shapeS, shapeE]);
            }
        }
        if (!shapeSegments.length) {
            shapeSegments.push([0, 0]);
        }
        return shapeSegments;
    };

    TrimModifier.prototype.releasePathsData = function (pathsData) {
        var i,
            len = pathsData.length;
        for (i = 0; i < len; i += 1) {
            segments_length_pool.release(pathsData[i]);
        }
        pathsData.length = 0;
        return pathsData;
    };

    TrimModifier.prototype.processShapes = function (_isFirstFrame) {
        var s, e;
        if (this._mdf || _isFirstFrame) {
            var o = this.o.v % 360 / 360;
            if (o < 0) {
                o += 1;
            }
            s = (this.s.v > 1 ? 1 : this.s.v < 0 ? 0 : this.s.v) + o;
            e = (this.e.v > 1 ? 1 : this.e.v < 0 ? 0 : this.e.v) + o;
            if (s === e) {}
            if (s > e) {
                var _s = s;
                s = e;
                e = _s;
            }
            s = Math.round(s * 10000) * 0.0001;
            e = Math.round(e * 10000) * 0.0001;
            this.sValue = s;
            this.eValue = e;
        } else {
            s = this.sValue;
            e = this.eValue;
        }
        var shapePaths;
        var i,
            len = this.shapes.length,
            j,
            jLen;
        var pathsData,
            pathData,
            totalShapeLength,
            totalModifierLength = 0;

        if (e === s) {
            for (i = 0; i < len; i += 1) {
                this.shapes[i].localShapeCollection.releaseShapes();
                this.shapes[i].shape._mdf = true;
                this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
            }
        } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
            var segments = [],
                shapeData,
                localShapeCollection;
            for (i = 0; i < len; i += 1) {
                shapeData = this.shapes[i];
                // if shape hasn't changed and trim properties haven't changed, cached previous path can be used
                if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                    shapeData.shape.paths = shapeData.localShapeCollection;
                } else {
                    shapePaths = shapeData.shape.paths;
                    jLen = shapePaths._length;
                    totalShapeLength = 0;
                    if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                        totalShapeLength = shapeData.totalShapeLength;
                    } else {
                        pathsData = this.releasePathsData(shapeData.pathsData);
                        for (j = 0; j < jLen; j += 1) {
                            pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                            pathsData.push(pathData);
                            totalShapeLength += pathData.totalLength;
                        }
                        shapeData.totalShapeLength = totalShapeLength;
                        shapeData.pathsData = pathsData;
                    }

                    totalModifierLength += totalShapeLength;
                    shapeData.shape._mdf = true;
                }
            }
            var shapeS = s,
                shapeE = e,
                addedLength = 0,
                edges;
            for (i = len - 1; i >= 0; i -= 1) {
                shapeData = this.shapes[i];
                if (shapeData.shape._mdf) {
                    localShapeCollection = shapeData.localShapeCollection;
                    localShapeCollection.releaseShapes();
                    //if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
                    if (this.m === 2 && len > 1) {
                        edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                        addedLength += shapeData.totalShapeLength;
                    } else {
                        edges = [[shapeS, shapeE]];
                    }
                    jLen = edges.length;
                    for (j = 0; j < jLen; j += 1) {
                        shapeS = edges[j][0];
                        shapeE = edges[j][1];
                        segments.length = 0;
                        if (shapeE <= 1) {
                            segments.push({
                                s: shapeData.totalShapeLength * shapeS,
                                e: shapeData.totalShapeLength * shapeE
                            });
                        } else if (shapeS >= 1) {
                            segments.push({
                                s: shapeData.totalShapeLength * (shapeS - 1),
                                e: shapeData.totalShapeLength * (shapeE - 1)
                            });
                        } else {
                            segments.push({
                                s: shapeData.totalShapeLength * shapeS,
                                e: shapeData.totalShapeLength
                            });
                            segments.push({
                                s: 0,
                                e: shapeData.totalShapeLength * (shapeE - 1)
                            });
                        }
                        var newShapesData = this.addShapes(shapeData, segments[0]);
                        if (segments[0].s !== segments[0].e) {
                            if (segments.length > 1) {
                                var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                                if (lastShapeInCollection.c) {
                                    var lastShape = newShapesData.pop();
                                    this.addPaths(newShapesData, localShapeCollection);
                                    newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                                } else {
                                    this.addPaths(newShapesData, localShapeCollection);
                                    newShapesData = this.addShapes(shapeData, segments[1]);
                                }
                            }
                            this.addPaths(newShapesData, localShapeCollection);
                        }
                    }
                    shapeData.shape.paths = localShapeCollection;
                }
            }
        } else if (this._mdf) {
            for (i = 0; i < len; i += 1) {
                //Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
                //Don't remove this even if it's losing cached info.
                this.shapes[i].pathsData.length = 0;
                this.shapes[i].shape._mdf = true;
            }
        }
    };

    TrimModifier.prototype.addPaths = function (newPaths, localShapeCollection) {
        var i,
            len = newPaths.length;
        for (i = 0; i < len; i += 1) {
            localShapeCollection.addShape(newPaths[i]);
        }
    };

    TrimModifier.prototype.addSegment = function (pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
        shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
        shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
        if (newShape) {
            shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
        }
        shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
    };

    TrimModifier.prototype.addSegmentFromArray = function (points, shapePath, pos, newShape) {
        shapePath.setXYAt(points[1], points[5], 'o', pos);
        shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
        if (newShape) {
            shapePath.setXYAt(points[0], points[4], 'v', pos);
        }
        shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
    };

    TrimModifier.prototype.addShapes = function (shapeData, shapeSegment, shapePath) {
        var pathsData = shapeData.pathsData;
        var shapePaths = shapeData.shape.paths.shapes;
        var i,
            len = shapeData.shape.paths._length,
            j,
            jLen;
        var addedLength = 0;
        var currentLengthData, segmentCount;
        var lengths;
        var segment;
        var shapes = [];
        var initPos;
        var newShape = true;
        if (!shapePath) {
            shapePath = shape_pool.newElement();
            segmentCount = 0;
            initPos = 0;
        } else {
            segmentCount = shapePath._length;
            initPos = shapePath._length;
        }
        shapes.push(shapePath);
        for (i = 0; i < len; i += 1) {
            lengths = pathsData[i].lengths;
            shapePath.c = shapePaths[i].c;
            jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
            for (j = 1; j < jLen; j += 1) {
                currentLengthData = lengths[j - 1];
                if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                    addedLength += currentLengthData.addedLength;
                    shapePath.c = false;
                } else if (addedLength > shapeSegment.e) {
                    shapePath.c = false;
                    break;
                } else {
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                        newShape = false;
                    } else {
                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                        // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                        newShape = false;
                        shapePath.c = false;
                    }
                    addedLength += currentLengthData.addedLength;
                    segmentCount += 1;
                }
            }
            if (shapePaths[i].c && lengths.length) {
                currentLengthData = lengths[j - 1];
                if (addedLength <= shapeSegment.e) {
                    var segmentLength = lengths[j - 1].addedLength;
                    if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                        this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                        newShape = false;
                    } else {
                        segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                        this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                        // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
                        newShape = false;
                        shapePath.c = false;
                    }
                } else {
                    shapePath.c = false;
                }
                addedLength += currentLengthData.addedLength;
                segmentCount += 1;
            }
            if (shapePath._length) {
                shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
                shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], 'o', shapePath._length - 1);
            }
            if (addedLength > shapeSegment.e) {
                break;
            }
            if (i < len - 1) {
                shapePath = shape_pool.newElement();
                newShape = true;
                shapes.push(shapePath);
                segmentCount = 0;
            }
        }
        return shapes;
    };

    ShapeModifiers.registerModifier('tm', TrimModifier);
    function RoundCornersModifier() {}
    extendPrototype([ShapeModifier], RoundCornersModifier);
    RoundCornersModifier.prototype.initModifierProperties = function (elem, data) {
        this.getValue = this.processKeys;
        this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
        this._isAnimated = !!this.rd.effectsSequence.length;
    };

    RoundCornersModifier.prototype.processPath = function (path, round) {
        var cloned_path = shape_pool.newElement();
        cloned_path.c = path.c;
        var i,
            len = path._length;
        var currentV,
            currentI,
            currentO,
            closerV,
            newV,
            newO,
            newI,
            distance,
            newPosPerc,
            index = 0;
        var vX, vY, oX, oY, iX, iY;
        for (i = 0; i < len; i += 1) {
            currentV = path.v[i];
            currentO = path.o[i];
            currentI = path.i[i];
            if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
                if ((i === 0 || i === len - 1) && !path.c) {
                    cloned_path.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);
                    /*cloned_path.v[index] = currentV;
                    cloned_path.o[index] = currentO;
                    cloned_path.i[index] = currentI;*/
                    index += 1;
                } else {
                    if (i === 0) {
                        closerV = path.v[len - 1];
                    } else {
                        closerV = path.v[i - 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    vX = iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vY = iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
                    oX = vX - (vX - currentV[0]) * roundCorner;
                    oY = vY - (vY - currentV[1]) * roundCorner;
                    cloned_path.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;

                    if (i === len - 1) {
                        closerV = path.v[0];
                    } else {
                        closerV = path.v[i + 1];
                    }
                    distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                    newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                    vX = oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                    vY = oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
                    iX = vX - (vX - currentV[0]) * roundCorner;
                    iY = vY - (vY - currentV[1]) * roundCorner;
                    cloned_path.setTripleAt(vX, vY, oX, oY, iX, iY, index);
                    index += 1;
                }
            } else {
                cloned_path.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);
                index += 1;
            }
        }
        return cloned_path;
    };

    RoundCornersModifier.prototype.processShapes = function (_isFirstFrame) {
        var shapePaths;
        var i,
            len = this.shapes.length;
        var j, jLen;
        var rd = this.rd.v;

        if (rd !== 0) {
            var shapeData, newPaths, localShapeCollection;
            for (i = 0; i < len; i += 1) {
                shapeData = this.shapes[i];
                newPaths = shapeData.shape.paths;
                localShapeCollection = shapeData.localShapeCollection;
                if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                    localShapeCollection.releaseShapes();
                    shapeData.shape._mdf = true;
                    shapePaths = shapeData.shape.paths.shapes;
                    jLen = shapeData.shape.paths._length;
                    for (j = 0; j < jLen; j += 1) {
                        localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
                    }
                }
                shapeData.shape.paths = shapeData.localShapeCollection;
            }
        }
        if (!this.dynamicProperties.length) {
            this._mdf = false;
        }
    };

    ShapeModifiers.registerModifier('rd', RoundCornersModifier);
    function RepeaterModifier() {}
    extendPrototype([ShapeModifier], RepeaterModifier);

    RepeaterModifier.prototype.initModifierProperties = function (elem, data) {
        this.getValue = this.processKeys;
        this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
        this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
        this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);
        this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);
        this.data = data;
        if (!this.dynamicProperties.length) {
            this.getValue(true);
        }
        this._isAnimated = !!this.dynamicProperties.length;
        this.pMatrix = new Matrix();
        this.rMatrix = new Matrix();
        this.sMatrix = new Matrix();
        this.tMatrix = new Matrix();
        this.matrix = new Matrix();
    };

    RepeaterModifier.prototype.applyTransforms = function (pMatrix, rMatrix, sMatrix, transform, perc, inv) {
        var dir = inv ? -1 : 1;
        var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
        var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
        pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
        rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        rMatrix.rotate(-transform.r.v * dir * perc);
        rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
        sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
        sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
    };

    RepeaterModifier.prototype.init = function (elem, arr, pos, elemsData) {
        this.elem = elem;
        this.arr = arr;
        this.pos = pos;
        this.elemsData = elemsData;
        this._currentCopies = 0;
        this._elements = [];
        this._groups = [];
        this.frameId = -1;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, arr[pos]);
        var cont = 0;
        while (pos > 0) {
            pos -= 1;
            //this._elements.unshift(arr.splice(pos,1)[0]);
            this._elements.unshift(arr[pos]);
            cont += 1;
        }
        if (this.dynamicProperties.length) {
            this.k = true;
        } else {
            this.getValue(true);
        }
    };

    RepeaterModifier.prototype.resetElements = function (elements) {
        var i,
            len = elements.length;
        for (i = 0; i < len; i += 1) {
            elements[i]._processed = false;
            if (elements[i].ty === 'gr') {
                this.resetElements(elements[i].it);
            }
        }
    };

    RepeaterModifier.prototype.cloneElements = function (elements) {
        var i,
            len = elements.length;
        var newElements = JSON.parse(JSON.stringify(elements));
        this.resetElements(newElements);
        return newElements;
    };

    RepeaterModifier.prototype.changeGroupRender = function (elements, renderFlag) {
        var i,
            len = elements.length;
        for (i = 0; i < len; i += 1) {
            elements[i]._render = renderFlag;
            if (elements[i].ty === 'gr') {
                this.changeGroupRender(elements[i].it, renderFlag);
            }
        }
    };

    RepeaterModifier.prototype.processShapes = function (_isFirstFrame) {
        var items, itemsTransform, i, dir, cont;
        if (this._mdf || _isFirstFrame) {
            var copies = Math.ceil(this.c.v);
            if (this._groups.length < copies) {
                while (this._groups.length < copies) {
                    var group = {
                        it: this.cloneElements(this._elements),
                        ty: 'gr'
                    };
                    group.it.push({ "a": { "a": 0, "ix": 1, "k": [0, 0] }, "nm": "Transform", "o": { "a": 0, "ix": 7, "k": 100 }, "p": { "a": 0, "ix": 2, "k": [0, 0] }, "r": { "a": 1, "ix": 6, "k": [{ s: 0, e: 0, t: 0 }, { s: 0, e: 0, t: 1 }] }, "s": { "a": 0, "ix": 3, "k": [100, 100] }, "sa": { "a": 0, "ix": 5, "k": 0 }, "sk": { "a": 0, "ix": 4, "k": 0 }, "ty": "tr" });

                    this.arr.splice(0, 0, group);
                    this._groups.splice(0, 0, group);
                    this._currentCopies += 1;
                }
                this.elem.reloadShapes();
            }
            cont = 0;
            var renderFlag;
            for (i = 0; i <= this._groups.length - 1; i += 1) {
                renderFlag = cont < copies;
                this._groups[i]._render = renderFlag;
                this.changeGroupRender(this._groups[i].it, renderFlag);
                cont += 1;
            }

            this._currentCopies = copies;
            ////

            var offset = this.o.v;
            var offsetModulo = offset % 1;
            var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
            var k;
            var tMat = this.tr.v.props;
            var pProps = this.pMatrix.props;
            var rProps = this.rMatrix.props;
            var sProps = this.sMatrix.props;
            this.pMatrix.reset();
            this.rMatrix.reset();
            this.sMatrix.reset();
            this.tMatrix.reset();
            this.matrix.reset();
            var iteration = 0;

            if (offset > 0) {
                while (iteration < roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    iteration += 1;
                }
                if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                    iteration += offsetModulo;
                }
            } else if (offset < 0) {
                while (iteration > roundOffset) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                    iteration -= 1;
                }
                if (offsetModulo) {
                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
                    iteration -= offsetModulo;
                }
            }
            i = this.data.m === 1 ? 0 : this._currentCopies - 1;
            dir = this.data.m === 1 ? 1 : -1;
            cont = this._currentCopies;
            var j, jLen;
            while (cont) {
                items = this.elemsData[i].it;
                itemsTransform = items[items.length - 1].transform.mProps.v.props;
                jLen = itemsTransform.length;
                items[items.length - 1].transform.mProps._mdf = true;
                items[items.length - 1].transform.op._mdf = true;
                items[items.length - 1].transform.op.v = this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));
                if (iteration !== 0) {
                    if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {
                        this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                    }
                    this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
                    this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
                    this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);

                    for (j = 0; j < jLen; j += 1) {
                        itemsTransform[j] = this.matrix.props[j];
                    }
                    this.matrix.reset();
                } else {
                    this.matrix.reset();
                    for (j = 0; j < jLen; j += 1) {
                        itemsTransform[j] = this.matrix.props[j];
                    }
                }
                iteration += 1;
                cont -= 1;
                i += dir;
            }
        } else {
            cont = this._currentCopies;
            i = 0;
            dir = 1;
            while (cont) {
                items = this.elemsData[i].it;
                itemsTransform = items[items.length - 1].transform.mProps.v.props;
                items[items.length - 1].transform.mProps._mdf = false;
                items[items.length - 1].transform.op._mdf = false;
                cont -= 1;
                i += dir;
            }
        }
    };

    RepeaterModifier.prototype.addShape = function () {};

    ShapeModifiers.registerModifier('rp', RepeaterModifier);
    function ShapeCollection() {
        this._length = 0;
        this._maxLength = 4;
        this.shapes = createSizedArray(this._maxLength);
    }

    ShapeCollection.prototype.addShape = function (shapeData) {
        if (this._length === this._maxLength) {
            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
            this._maxLength *= 2;
        }
        this.shapes[this._length] = shapeData;
        this._length += 1;
    };

    ShapeCollection.prototype.releaseShapes = function () {
        var i;
        for (i = 0; i < this._length; i += 1) {
            shape_pool.release(this.shapes[i]);
        }
        this._length = 0;
    };
    function DashProperty(elem, data, renderer, container) {
        this.elem = elem;
        this.frameId = -1;
        this.dataProps = createSizedArray(data.length);
        this.renderer = renderer;
        this.k = false;
        this.dashStr = '';
        this.dashArray = createTypedArray('float32', data.length ? data.length - 1 : 0);
        this.dashoffset = createTypedArray('float32', 1);
        this.initDynamicPropertyContainer(container);
        var i,
            len = data.length || 0,
            prop;
        for (i = 0; i < len; i += 1) {
            prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
            this.k = prop.k || this.k;
            this.dataProps[i] = { n: data[i].n, p: prop };
        }
        if (!this.k) {
            this.getValue(true);
        }
        this._isAnimated = this.k;
    }

    DashProperty.prototype.getValue = function (forceRender) {
        if (this.elem.globalData.frameId === this.frameId && !forceRender) {
            return;
        }
        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || forceRender;
        if (this._mdf) {
            var i = 0,
                len = this.dataProps.length;
            if (this.renderer === 'svg') {
                this.dashStr = '';
            }
            for (i = 0; i < len; i += 1) {
                if (this.dataProps[i].n != 'o') {
                    if (this.renderer === 'svg') {
                        this.dashStr += ' ' + this.dataProps[i].p.v;
                    } else {
                        this.dashArray[i] = this.dataProps[i].p.v;
                    }
                } else {
                    this.dashoffset[0] = this.dataProps[i].p.v;
                }
            }
        }
    };
    extendPrototype([DynamicPropertyContainer], DashProperty);
    function GradientProperty(elem, data, container) {
        this.data = data;
        this.c = createTypedArray('uint8c', data.p * 4);
        var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;
        this.o = createTypedArray('float32', cLength);
        this._cmdf = false;
        this._omdf = false;
        this._collapsable = this.checkCollapsable();
        this._hasOpacity = cLength;
        this.initDynamicPropertyContainer(container);
        this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
        this.k = this.prop.k;
        this.getValue(true);
    }

    GradientProperty.prototype.comparePoints = function (values, points) {
        var i = 0,
            len = this.o.length / 2,
            diff;
        while (i < len) {
            diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);
            if (diff > 0.01) {
                return false;
            }
            i += 1;
        }
        return true;
    };

    GradientProperty.prototype.checkCollapsable = function () {
        if (this.o.length / 2 !== this.c.length / 4) {
            return false;
        }
        if (this.data.k.k[0].s) {
            var i = 0,
                len = this.data.k.k.length;
            while (i < len) {
                if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
                    return false;
                }
                i += 1;
            }
        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
            return false;
        }
        return true;
    };

    GradientProperty.prototype.getValue = function (forceRender) {
        this.prop.getValue();
        this._mdf = false;
        this._cmdf = false;
        this._omdf = false;
        if (this.prop._mdf || forceRender) {
            var i,
                len = this.data.p * 4;
            var mult, val;
            for (i = 0; i < len; i += 1) {
                mult = i % 4 === 0 ? 100 : 255;
                val = Math.round(this.prop.v[i] * mult);
                if (this.c[i] !== val) {
                    this.c[i] = val;
                    this._cmdf = !forceRender;
                }
            }
            if (this.o.length) {
                len = this.prop.v.length;
                for (i = this.data.p * 4; i < len; i += 1) {
                    mult = i % 2 === 0 ? 100 : 1;
                    val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];
                    if (this.o[i - this.data.p * 4] !== val) {
                        this.o[i - this.data.p * 4] = val;
                        this._omdf = !forceRender;
                    }
                }
            }
            this._mdf = !forceRender;
        }
    };

    extendPrototype([DynamicPropertyContainer], GradientProperty);
    var buildShapeString = function buildShapeString(pathNodes, length, closed, mat) {
        if (length === 0) {
            return '';
        }
        var _o = pathNodes.o;
        var _i = pathNodes.i;
        var _v = pathNodes.v;
        var i,
            shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
        for (i = 1; i < length; i += 1) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[i][0], _i[i][1]) + " " + mat.applyToPointStringified(_v[i][0], _v[i][1]);
        }
        if (closed && length) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
            shapeString += 'z';
        }
        return shapeString;
    };
    var ImagePreloader = function () {

        var proxyImage = function () {
            var canvas = createTag('canvas');
            canvas.width = 1;
            canvas.height = 1;
            var ctx = canvas.getContext('2d');
            ctx.fillStyle = 'rgba(0,0,0,0)';
            ctx.fillRect(0, 0, 1, 1);
            return canvas;
        }();

        function imageLoaded() {
            this.loadedAssets += 1;
            if (this.loadedAssets === this.totalImages) {
                if (this.imagesLoadedCb) {
                    this.imagesLoadedCb(null);
                }
            }
        }

        function getAssetsPath(assetData, assetsPath, original_path) {
            var path = '';
            if (assetData.e) {
                path = assetData.p;
            } else if (assetsPath) {
                var imagePath = assetData.p;
                if (imagePath.indexOf('images/') !== -1) {
                    imagePath = imagePath.split('/')[1];
                }
                path = assetsPath + imagePath;
            } else {
                path = original_path;
                path += assetData.u ? assetData.u : '';
                path += assetData.p;
            }
            return path;
        }

        function createImageData(assetData) {
            var path = getAssetsPath(assetData, this.assetsPath, this.path);
            var img = createTag('img');
            img.crossOrigin = 'anonymous';
            img.addEventListener('load', this._imageLoaded.bind(this), false);
            img.addEventListener('error', function () {
                ob.img = proxyImage;
                this._imageLoaded();
            }.bind(this), false);
            img.src = path;
            var ob = {
                img: img,
                assetData: assetData
            };
            return ob;
        }

        function loadAssets(assets, cb) {
            this.imagesLoadedCb = cb;
            var i,
                len = assets.length;
            for (i = 0; i < len; i += 1) {
                if (!assets[i].layers) {
                    this.totalImages += 1;
                    this.images.push(this._createImageData(assets[i]));
                }
            }
        }

        function setPath(path) {
            this.path = path || '';
        }

        function setAssetsPath(path) {
            this.assetsPath = path || '';
        }

        function getImage(assetData) {
            var i = 0,
                len = this.images.length;
            while (i < len) {
                if (this.images[i].assetData === assetData) {
                    return this.images[i].img;
                }
                i += 1;
            }
        }

        function destroy() {
            this.imagesLoadedCb = null;
            this.images.length = 0;
        }

        function loaded() {
            return this.totalImages === this.loadedAssets;
        }

        return function ImagePreloader() {
            this.loadAssets = loadAssets;
            this.setAssetsPath = setAssetsPath;
            this.setPath = setPath;
            this.loaded = loaded;
            this.destroy = destroy;
            this.getImage = getImage;
            this._createImageData = createImageData;
            this._imageLoaded = imageLoaded;
            this.assetsPath = '';
            this.path = '';
            this.totalImages = 0;
            this.loadedAssets = 0;
            this.imagesLoadedCb = null;
            this.images = [];
        };
    }();
    var featureSupport = function () {
        var ob = {
            maskType: true
        };
        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
            ob.maskType = false;
        }
        return ob;
    }();
    var filtersFactory = function () {
        var ob = {};
        ob.createFilter = createFilter;
        ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

        function createFilter(filId) {
            var fil = createNS('filter');
            fil.setAttribute('id', filId);
            fil.setAttribute('filterUnits', 'objectBoundingBox');
            fil.setAttribute('x', '0%');
            fil.setAttribute('y', '0%');
            fil.setAttribute('width', '100%');
            fil.setAttribute('height', '100%');
            return fil;
        }

        function createAlphaToLuminanceFilter() {
            var feColorMatrix = createNS('feColorMatrix');
            feColorMatrix.setAttribute('type', 'matrix');
            feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
            feColorMatrix.setAttribute('values', '0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
            return feColorMatrix;
        }

        return ob;
    }();
    var assetLoader = function () {

        function formatResponse(xhr) {
            if (xhr.response && typeof xhr.response === 'object') {
                return xhr.response;
            } else if (xhr.response && typeof xhr.response === 'string') {
                return JSON.parse(xhr.response);
            } else if (xhr.responseText) {
                return JSON.parse(xhr.responseText);
            }
        }

        function loadAsset(path, callback, errorCallback) {
            var response;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', path, true);
            // set responseType after calling open or IE will break.
            try {
                // This crashes on Android WebView prior to KitKat
                xhr.responseType = "json";
            } catch (err) {}
            xhr.send();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        response = formatResponse(xhr);
                        callback(response);
                    } else {
                        try {
                            response = formatResponse(xhr);
                            callback(response);
                        } catch (err) {
                            if (errorCallback) {
                                errorCallback(err);
                            }
                        }
                    }
                }
            };
        }
        return {
            load: loadAsset
        };
    }();

    function TextAnimatorProperty(textData, renderType, elem) {
        this._isFirstFrame = true;
        this._hasMaskedPath = false;
        this._frameId = -1;
        this._textData = textData;
        this._renderType = renderType;
        this._elem = elem;
        this._animatorsData = createSizedArray(this._textData.a.length);
        this._pathData = {};
        this._moreOptions = {
            alignment: {}
        };
        this.renderedLetters = [];
        this.lettersChangedFlag = false;
        this.initDynamicPropertyContainer(elem);
    }

    TextAnimatorProperty.prototype.searchProperties = function () {
        var i,
            len = this._textData.a.length,
            animatorProps;
        var getProp = PropertyFactory.getProp;
        for (i = 0; i < len; i += 1) {
            animatorProps = this._textData.a[i];
            this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
        }
        if (this._textData.p && 'm' in this._textData.p) {
            this._pathData = {
                f: getProp(this._elem, this._textData.p.f, 0, 0, this),
                l: getProp(this._elem, this._textData.p.l, 0, 0, this),
                r: this._textData.p.r,
                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
            };
            this._hasMaskedPath = true;
        } else {
            this._hasMaskedPath = false;
        }
        this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
    };

    TextAnimatorProperty.prototype.getMeasures = function (documentData, lettersChangedFlag) {
        this.lettersChangedFlag = lettersChangedFlag;
        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
            return;
        }
        this._isFirstFrame = false;
        var alignment = this._moreOptions.alignment.v;
        var animators = this._animatorsData;
        var textData = this._textData;
        var matrixHelper = this.mHelper;
        var renderType = this._renderType;
        var renderedLettersCount = this.renderedLetters.length;
        var data = this.data;
        var xPos, yPos;
        var i, len;
        var letters = documentData.l,
            pathInfo,
            currentLength,
            currentPoint,
            segmentLength,
            flag,
            pointInd,
            segmentInd,
            prevPoint,
            points,
            segments,
            partialLength,
            totalLength,
            perc,
            tanAngle,
            mask;
        if (this._hasMaskedPath) {
            mask = this._pathData.m;
            if (!this._pathData.n || this._pathData._mdf) {
                var paths = mask.v;
                if (this._pathData.r) {
                    paths = paths.reverse();
                }
                // TODO: release bezier data cached from previous pathInfo: this._pathData.pi
                pathInfo = {
                    tLength: 0,
                    segments: []
                };
                len = paths._length - 1;
                var bezierData;
                totalLength = 0;
                for (i = 0; i < len; i += 1) {
                    bezierData = bez.buildBezierData(paths.v[i], paths.v[i + 1], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
                    pathInfo.tLength += bezierData.segmentLength;
                    pathInfo.segments.push(bezierData);
                    totalLength += bezierData.segmentLength;
                }
                i = len;
                if (mask.v.c) {
                    bezierData = bez.buildBezierData(paths.v[i], paths.v[0], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
                    pathInfo.tLength += bezierData.segmentLength;
                    pathInfo.segments.push(bezierData);
                    totalLength += bezierData.segmentLength;
                }
                this._pathData.pi = pathInfo;
            }
            pathInfo = this._pathData.pi;

            currentLength = this._pathData.f.v;
            segmentInd = 0;
            pointInd = 1;
            segmentLength = 0;
            flag = true;
            segments = pathInfo.segments;
            if (currentLength < 0 && mask.v.c) {
                if (pathInfo.tLength < Math.abs(currentLength)) {
                    currentLength = -Math.abs(currentLength) % pathInfo.tLength;
                }
                segmentInd = segments.length - 1;
                points = segments[segmentInd].points;
                pointInd = points.length - 1;
                while (currentLength < 0) {
                    currentLength += points[pointInd].partialLength;
                    pointInd -= 1;
                    if (pointInd < 0) {
                        segmentInd -= 1;
                        points = segments[segmentInd].points;
                        pointInd = points.length - 1;
                    }
                }
            }
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
        }

        len = letters.length;
        xPos = 0;
        yPos = 0;
        var yOff = documentData.finalSize * 1.2 * 0.714;
        var firstLine = true;
        var animatorProps, animatorSelector;
        var j, jLen;
        var letterValue;

        jLen = animators.length;
        var lastLetter;

        var mult,
            ind = -1,
            offf,
            xPathPos,
            yPathPos;
        var initPathPos = currentLength,
            initSegmentInd = segmentInd,
            initPointInd = pointInd,
            currentLine = -1;
        var elemOpacity;
        var sc, sw, fc, k;
        var lineLength = 0;
        var letterSw,
            letterSc,
            letterFc,
            letterM = '',
            letterP = this.defaultPropsArray,
            letterO;

        //
        if (documentData.j === 2 || documentData.j === 1) {
            var animatorJustifyOffset = 0;
            var animatorFirstCharOffset = 0;
            var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
            var lastIndex = 0;
            var isNewLine = true;

            for (i = 0; i < len; i += 1) {
                if (letters[i].n) {
                    if (animatorJustifyOffset) {
                        animatorJustifyOffset += animatorFirstCharOffset;
                    }
                    while (lastIndex < i) {
                        letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                        lastIndex += 1;
                    }
                    animatorJustifyOffset = 0;
                    isNewLine = true;
                } else {
                    for (j = 0; j < jLen; j += 1) {
                        animatorProps = animators[j].a;
                        if (animatorProps.t.propType) {
                            if (isNewLine && documentData.j === 2) {
                                animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                            }
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                            } else {
                                animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                            }
                        }
                    }
                    isNewLine = false;
                }
            }
            if (animatorJustifyOffset) {
                animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i) {
                letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                lastIndex += 1;
            }
        }
        //

        for (i = 0; i < len; i += 1) {

            matrixHelper.reset();
            elemOpacity = 1;
            if (letters[i].n) {
                xPos = 0;
                yPos += documentData.yOffset;
                yPos += firstLine ? 1 : 0;
                currentLength = initPathPos;
                firstLine = false;
                lineLength = 0;
                if (this._hasMaskedPath) {
                    segmentInd = initSegmentInd;
                    pointInd = initPointInd;
                    points = segments[segmentInd].points;
                    prevPoint = points[pointInd - 1];
                    currentPoint = points[pointInd];
                    partialLength = currentPoint.partialLength;
                    segmentLength = 0;
                }
                letterO = letterSw = letterFc = letterM = '';
                letterP = this.defaultPropsArray;
            } else {
                if (this._hasMaskedPath) {
                    if (currentLine !== letters[i].line) {
                        switch (documentData.j) {
                            case 1:
                                currentLength += totalLength - documentData.lineWidths[letters[i].line];
                                break;
                            case 2:
                                currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
                                break;
                        }
                        currentLine = letters[i].line;
                    }
                    if (ind !== letters[i].ind) {
                        if (letters[ind]) {
                            currentLength += letters[ind].extra;
                        }
                        currentLength += letters[i].an / 2;
                        ind = letters[i].ind;
                    }
                    currentLength += alignment[0] * letters[i].an / 200;
                    var animatorOffset = 0;
                    for (j = 0; j < jLen; j += 1) {
                        animatorProps = animators[j].a;
                        if (animatorProps.p.propType) {
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorOffset += animatorProps.p.v[0] * mult[0];
                            } else {
                                animatorOffset += animatorProps.p.v[0] * mult;
                            }
                        }
                        if (animatorProps.a.propType) {
                            animatorSelector = animators[j].s;
                            mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                            if (mult.length) {
                                animatorOffset += animatorProps.a.v[0] * mult[0];
                            } else {
                                animatorOffset += animatorProps.a.v[0] * mult;
                            }
                        }
                    }
                    flag = true;
                    while (flag) {
                        if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                            perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                            xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                            yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                            matrixHelper.translate(-alignment[0] * letters[i].an / 200, -(alignment[1] * yOff / 100));
                            flag = false;
                        } else if (points) {
                            segmentLength += currentPoint.partialLength;
                            pointInd += 1;
                            if (pointInd >= points.length) {
                                pointInd = 0;
                                segmentInd += 1;
                                if (!segments[segmentInd]) {
                                    if (mask.v.c) {
                                        pointInd = 0;
                                        segmentInd = 0;
                                        points = segments[segmentInd].points;
                                    } else {
                                        segmentLength -= currentPoint.partialLength;
                                        points = null;
                                    }
                                } else {
                                    points = segments[segmentInd].points;
                                }
                            }
                            if (points) {
                                prevPoint = currentPoint;
                                currentPoint = points[pointInd];
                                partialLength = currentPoint.partialLength;
                            }
                        }
                    }
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0);
                } else {
                    offf = letters[i].an / 2 - letters[i].add;
                    matrixHelper.translate(-offf, 0, 0);

                    // Grouping alignment
                    matrixHelper.translate(-alignment[0] * letters[i].an / 200, -alignment[1] * yOff / 100, 0);
                }

                lineLength += letters[i].l / 2;
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.t.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        //This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
                        if (xPos !== 0 || documentData.j !== 0) {
                            if (this._hasMaskedPath) {
                                if (mult.length) {
                                    currentLength += animatorProps.t.v * mult[0];
                                } else {
                                    currentLength += animatorProps.t.v * mult;
                                }
                            } else {
                                if (mult.length) {
                                    xPos += animatorProps.t.v * mult[0];
                                } else {
                                    xPos += animatorProps.t.v * mult;
                                }
                            }
                        }
                    }
                }
                lineLength += letters[i].l / 2;
                if (documentData.strokeWidthAnim) {
                    sw = documentData.sw || 0;
                }
                if (documentData.strokeColorAnim) {
                    if (documentData.sc) {
                        sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                    } else {
                        sc = [0, 0, 0];
                    }
                }
                if (documentData.fillColorAnim && documentData.fc) {
                    fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.a.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                        if (mult.length) {
                            matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                        } else {
                            matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                        }
                    }
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    if (animatorProps.s.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (mult.length) {
                            matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                        } else {
                            matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                        }
                    }
                }
                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (animatorProps.sk.propType) {
                        if (mult.length) {
                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                        } else {
                            matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                        }
                    }
                    if (animatorProps.r.propType) {
                        if (mult.length) {
                            matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                        } else {
                            matrixHelper.rotateZ(-animatorProps.r.v * mult);
                        }
                    }
                    if (animatorProps.ry.propType) {

                        if (mult.length) {
                            matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                        } else {
                            matrixHelper.rotateY(animatorProps.ry.v * mult);
                        }
                    }
                    if (animatorProps.rx.propType) {
                        if (mult.length) {
                            matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                        } else {
                            matrixHelper.rotateX(animatorProps.rx.v * mult);
                        }
                    }
                    if (animatorProps.o.propType) {
                        if (mult.length) {
                            elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                        } else {
                            elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                        }
                    }
                    if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                        if (mult.length) {
                            sw += animatorProps.sw.v * mult[0];
                        } else {
                            sw += animatorProps.sw.v * mult;
                        }
                    }
                    if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                        for (k = 0; k < 3; k += 1) {
                            if (mult.length) {
                                sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k]) * mult[0];
                            } else {
                                sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k]) * mult;
                            }
                        }
                    }
                    if (documentData.fillColorAnim && documentData.fc) {
                        if (animatorProps.fc.propType) {
                            for (k = 0; k < 3; k += 1) {
                                if (mult.length) {
                                    fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k]) * mult[0];
                                } else {
                                    fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k]) * mult;
                                }
                            }
                        }
                        if (animatorProps.fh.propType) {
                            if (mult.length) {
                                fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                            } else {
                                fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                            }
                        }
                        if (animatorProps.fs.propType) {
                            if (mult.length) {
                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                            } else {
                                fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                            }
                        }
                        if (animatorProps.fb.propType) {
                            if (mult.length) {
                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                            } else {
                                fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                            }
                        }
                    }
                }

                for (j = 0; j < jLen; j += 1) {
                    animatorProps = animators[j].a;

                    if (animatorProps.p.propType) {
                        animatorSelector = animators[j].s;
                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                        if (this._hasMaskedPath) {
                            if (mult.length) {
                                matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                            } else {
                                matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                            }
                        } else {
                            if (mult.length) {
                                matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                            } else {
                                matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                            }
                        }
                    }
                }
                if (documentData.strokeWidthAnim) {
                    letterSw = sw < 0 ? 0 : sw;
                }
                if (documentData.strokeColorAnim) {
                    letterSc = 'rgb(' + Math.round(sc[0] * 255) + ',' + Math.round(sc[1] * 255) + ',' + Math.round(sc[2] * 255) + ')';
                }
                if (documentData.fillColorAnim && documentData.fc) {
                    letterFc = 'rgb(' + Math.round(fc[0] * 255) + ',' + Math.round(fc[1] * 255) + ',' + Math.round(fc[2] * 255) + ')';
                }

                if (this._hasMaskedPath) {
                    matrixHelper.translate(0, -documentData.ls);

                    matrixHelper.translate(0, alignment[1] * yOff / 100 + yPos, 0);
                    if (textData.p.p) {
                        tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                        var rot = Math.atan(tanAngle) * 180 / Math.PI;
                        if (currentPoint.point[0] < prevPoint.point[0]) {
                            rot += 180;
                        }
                        matrixHelper.rotate(-rot * Math.PI / 180);
                    }
                    matrixHelper.translate(xPathPos, yPathPos, 0);
                    currentLength -= alignment[0] * letters[i].an / 200;
                    if (letters[i + 1] && ind !== letters[i + 1].ind) {
                        currentLength += letters[i].an / 2;
                        currentLength += documentData.tr / 1000 * documentData.finalSize;
                    }
                } else {

                    matrixHelper.translate(xPos, yPos, 0);

                    if (documentData.ps) {
                        //matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
                        matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
                    }
                    switch (documentData.j) {
                        case 1:
                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
                            break;
                        case 2:
                            matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
                            break;
                    }
                    matrixHelper.translate(0, -documentData.ls);
                    matrixHelper.translate(offf, 0, 0);
                    matrixHelper.translate(alignment[0] * letters[i].an / 200, alignment[1] * yOff / 100, 0);
                    xPos += letters[i].l + documentData.tr / 1000 * documentData.finalSize;
                }
                if (renderType === 'html') {
                    letterM = matrixHelper.toCSS();
                } else if (renderType === 'svg') {
                    letterM = matrixHelper.to2dCSS();
                } else {
                    letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
                }
                letterO = elemOpacity;
            }

            if (renderedLettersCount <= i) {
                letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
                this.renderedLetters.push(letterValue);
                renderedLettersCount += 1;
                this.lettersChangedFlag = true;
            } else {
                letterValue = this.renderedLetters[i];
                this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
            }
        }
    };

    TextAnimatorProperty.prototype.getValue = function () {
        if (this._elem.globalData.frameId === this._frameId) {
            return;
        }
        this._frameId = this._elem.globalData.frameId;
        this.iterateDynamicProperties();
    };

    TextAnimatorProperty.prototype.mHelper = new Matrix();
    TextAnimatorProperty.prototype.defaultPropsArray = [];
    extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
    function TextAnimatorDataProperty(elem, animatorProps, container) {
        var defaultData = { propType: false };
        var getProp = PropertyFactory.getProp;
        var textAnimator_animatables = animatorProps.a;
        this.a = {
            r: textAnimator_animatables.r ? getProp(elem, textAnimator_animatables.r, 0, degToRads, container) : defaultData,
            rx: textAnimator_animatables.rx ? getProp(elem, textAnimator_animatables.rx, 0, degToRads, container) : defaultData,
            ry: textAnimator_animatables.ry ? getProp(elem, textAnimator_animatables.ry, 0, degToRads, container) : defaultData,
            sk: textAnimator_animatables.sk ? getProp(elem, textAnimator_animatables.sk, 0, degToRads, container) : defaultData,
            sa: textAnimator_animatables.sa ? getProp(elem, textAnimator_animatables.sa, 0, degToRads, container) : defaultData,
            s: textAnimator_animatables.s ? getProp(elem, textAnimator_animatables.s, 1, 0.01, container) : defaultData,
            a: textAnimator_animatables.a ? getProp(elem, textAnimator_animatables.a, 1, 0, container) : defaultData,
            o: textAnimator_animatables.o ? getProp(elem, textAnimator_animatables.o, 0, 0.01, container) : defaultData,
            p: textAnimator_animatables.p ? getProp(elem, textAnimator_animatables.p, 1, 0, container) : defaultData,
            sw: textAnimator_animatables.sw ? getProp(elem, textAnimator_animatables.sw, 0, 0, container) : defaultData,
            sc: textAnimator_animatables.sc ? getProp(elem, textAnimator_animatables.sc, 1, 0, container) : defaultData,
            fc: textAnimator_animatables.fc ? getProp(elem, textAnimator_animatables.fc, 1, 0, container) : defaultData,
            fh: textAnimator_animatables.fh ? getProp(elem, textAnimator_animatables.fh, 0, 0, container) : defaultData,
            fs: textAnimator_animatables.fs ? getProp(elem, textAnimator_animatables.fs, 0, 0.01, container) : defaultData,
            fb: textAnimator_animatables.fb ? getProp(elem, textAnimator_animatables.fb, 0, 0.01, container) : defaultData,
            t: textAnimator_animatables.t ? getProp(elem, textAnimator_animatables.t, 0, 0, container) : defaultData
        };

        this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
        this.s.t = animatorProps.s.t;
    }
    function LetterProps(o, sw, sc, fc, m, p) {
        this.o = o;
        this.sw = sw;
        this.sc = sc;
        this.fc = fc;
        this.m = m;
        this.p = p;
        this._mdf = {
            o: true,
            sw: !!sw,
            sc: !!sc,
            fc: !!fc,
            m: true,
            p: true
        };
    }

    LetterProps.prototype.update = function (o, sw, sc, fc, m, p) {
        this._mdf.o = false;
        this._mdf.sw = false;
        this._mdf.sc = false;
        this._mdf.fc = false;
        this._mdf.m = false;
        this._mdf.p = false;
        var updated = false;

        if (this.o !== o) {
            this.o = o;
            this._mdf.o = true;
            updated = true;
        }
        if (this.sw !== sw) {
            this.sw = sw;
            this._mdf.sw = true;
            updated = true;
        }
        if (this.sc !== sc) {
            this.sc = sc;
            this._mdf.sc = true;
            updated = true;
        }
        if (this.fc !== fc) {
            this.fc = fc;
            this._mdf.fc = true;
            updated = true;
        }
        if (this.m !== m) {
            this.m = m;
            this._mdf.m = true;
            updated = true;
        }
        if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
            this.p = p;
            this._mdf.p = true;
            updated = true;
        }
        return updated;
    };
    function TextProperty(elem, data) {
        this._frameId = initialDefaultFrame;
        this.pv = '';
        this.v = '';
        this.kf = false;
        this._isFirstFrame = true;
        this._mdf = false;
        this.data = data;
        this.elem = elem;
        this.comp = this.elem.comp;
        this.keysIndex = 0;
        this.canResize = false;
        this.minimumFontSize = 1;
        this.effectsSequence = [];
        this.currentData = {
            ascent: 0,
            boxWidth: this.defaultBoxWidth,
            f: '',
            fStyle: '',
            fWeight: '',
            fc: '',
            j: '',
            justifyOffset: '',
            l: [],
            lh: 0,
            lineWidths: [],
            ls: '',
            of: '',
            s: '',
            sc: '',
            sw: 0,
            t: 0,
            tr: 0,
            sz: 0,
            ps: null,
            fillColorAnim: false,
            strokeColorAnim: false,
            strokeWidthAnim: false,
            yOffset: 0,
            finalSize: 0,
            finalText: [],
            finalLineHeight: 0,
            __complete: false

        };
        this.copyData(this.currentData, this.data.d.k[0].s);

        if (!this.searchProperty()) {
            this.completeTextData(this.currentData);
        }
    }

    TextProperty.prototype.defaultBoxWidth = [0, 0];

    TextProperty.prototype.copyData = function (obj, data) {
        for (var s in data) {
            if (data.hasOwnProperty(s)) {
                obj[s] = data[s];
            }
        }
        return obj;
    };

    TextProperty.prototype.setCurrentData = function (data) {
        if (!data.__complete) {
            this.completeTextData(data);
        }
        this.currentData = data;
        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
        this._mdf = true;
    };

    TextProperty.prototype.searchProperty = function () {
        return this.searchKeyframes();
    };

    TextProperty.prototype.searchKeyframes = function () {
        this.kf = this.data.d.k.length > 1;
        if (this.kf) {
            this.addEffect(this.getKeyframeValue.bind(this));
        }
        return this.kf;
    };

    TextProperty.prototype.addEffect = function (effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.elem.addDynamicProperty(this);
    };

    TextProperty.prototype.getValue = function (_finalValue) {
        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
            return;
        }
        this.currentData.t = this.data.d.k[this.keysIndex].s.t;
        var currentValue = this.currentData;
        var currentIndex = this.keysIndex;
        if (this.lock) {
            this.setCurrentData(this.currentData);
            return;
        }
        this.lock = true;
        this._mdf = false;
        var multipliedValue;
        var i,
            len = this.effectsSequence.length;
        var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
        for (i = 0; i < len; i += 1) {
            //Checking if index changed to prevent creating a new object every time the expression updates.
            if (currentIndex !== this.keysIndex) {
                finalValue = this.effectsSequence[i](finalValue, finalValue.t);
            } else {
                finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
            }
        }
        if (currentValue !== finalValue) {
            this.setCurrentData(finalValue);
        }
        this.pv = this.v = this.currentData;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
    };

    TextProperty.prototype.getKeyframeValue = function () {
        var textKeys = this.data.d.k,
            textDocumentData;
        var frameNum = this.elem.comp.renderedFrame;
        var i = 0,
            len = textKeys.length;
        while (i <= len - 1) {
            textDocumentData = textKeys[i].s;
            if (i === len - 1 || textKeys[i + 1].t > frameNum) {
                break;
            }
            i += 1;
        }
        if (this.keysIndex !== i) {
            this.keysIndex = i;
        }
        return this.data.d.k[this.keysIndex].s;
    };

    TextProperty.prototype.buildFinalText = function (text) {
        var combinedCharacters = FontManager.getCombinedCharacterCodes();
        var charactersArray = [];
        var i = 0,
            len = text.length;
        while (i < len) {
            if (combinedCharacters.indexOf(text.charCodeAt(i)) !== -1) {
                charactersArray[charactersArray.length - 1] += text.charAt(i);
            } else {
                charactersArray.push(text.charAt(i));
            }
            i += 1;
        }
        return charactersArray;
    };

    TextProperty.prototype.completeTextData = function (documentData) {
        documentData.__complete = true;
        var fontManager = this.elem.globalData.fontManager;
        var data = this.data;
        var letters = [];
        var i, len;
        var newLineFlag,
            index = 0,
            val;
        var anchorGrouping = data.m.g;
        var currentSize = 0,
            currentPos = 0,
            currentLine = 0,
            lineWidths = [];
        var lineWidth = 0;
        var maxLineWidth = 0;
        var j, jLen;
        var fontData = fontManager.getFontByName(documentData.f);
        var charData,
            cLength = 0;
        var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];

        var fWeight = 'normal',
            fStyle = 'normal';
        len = styles.length;
        var styleName;
        for (i = 0; i < len; i += 1) {
            styleName = styles[i].toLowerCase();
            switch (styleName) {
                case 'italic':
                    fStyle = 'italic';
                    break;
                case 'bold':
                    fWeight = '700';
                    break;
                case 'black':
                    fWeight = '900';
                    break;
                case 'medium':
                    fWeight = '500';
                    break;
                case 'regular':
                case 'normal':
                    fWeight = '400';
                    break;
                case 'light':
                case 'thin':
                    fWeight = '200';
                    break;
            }
        }
        documentData.fWeight = fontData.fWeight || fWeight;
        documentData.fStyle = fStyle;
        documentData.finalSize = documentData.s;
        documentData.finalText = this.buildFinalText(documentData.t);
        len = documentData.finalText.length;
        documentData.finalLineHeight = documentData.lh;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        var charCode;
        if (documentData.sz) {
            var flag = true;
            var boxWidth = documentData.sz[0];
            var boxHeight = documentData.sz[1];
            var currentHeight, finalText;
            while (flag) {
                finalText = this.buildFinalText(documentData.t);
                currentHeight = 0;
                lineWidth = 0;
                len = finalText.length;
                trackingOffset = documentData.tr / 1000 * documentData.finalSize;
                var lastSpaceIndex = -1;
                for (i = 0; i < len; i += 1) {
                    charCode = finalText[i].charCodeAt(0);
                    newLineFlag = false;
                    if (finalText[i] === ' ') {
                        lastSpaceIndex = i;
                    } else if (charCode === 13 || charCode === 3) {
                        lineWidth = 0;
                        newLineFlag = true;
                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                    }
                    if (fontManager.chars) {
                        charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                        cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                    } else {
                        //tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
                        cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
                    }
                    if (lineWidth + cLength > boxWidth && finalText[i] !== ' ') {
                        if (lastSpaceIndex === -1) {
                            len += 1;
                        } else {
                            i = lastSpaceIndex;
                        }
                        currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                        finalText.splice(i, lastSpaceIndex === i ? 1 : 0, "\r");
                        //finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
                        lastSpaceIndex = -1;
                        lineWidth = 0;
                    } else {
                        lineWidth += cLength;
                        lineWidth += trackingOffset;
                    }
                }
                currentHeight += fontData.ascent * documentData.finalSize / 100;
                if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                    documentData.finalSize -= 1;
                    documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
                } else {
                    documentData.finalText = finalText;
                    len = documentData.finalText.length;
                    flag = false;
                }
            }
        }
        lineWidth = -trackingOffset;
        cLength = 0;
        var uncollapsedSpaces = 0;
        var currentChar;
        for (i = 0; i < len; i += 1) {
            newLineFlag = false;
            currentChar = documentData.finalText[i];
            charCode = currentChar.charCodeAt(0);
            if (currentChar === ' ') {
                val = "\xA0";
            } else if (charCode === 13 || charCode === 3) {
                uncollapsedSpaces = 0;
                lineWidths.push(lineWidth);
                maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
                lineWidth = -2 * trackingOffset;
                val = '';
                newLineFlag = true;
                currentLine += 1;
            } else {
                val = documentData.finalText[i];
            }
            if (fontManager.chars) {
                charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
                cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
                //var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
                //tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
                cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
            }

            //
            if (currentChar === ' ') {
                uncollapsedSpaces += cLength + trackingOffset;
            } else {
                lineWidth += cLength + trackingOffset + uncollapsedSpaces;
                uncollapsedSpaces = 0;
            }
            letters.push({ l: cLength, an: cLength, add: currentSize, n: newLineFlag, anIndexes: [], val: val, line: currentLine, animatorJustifyOffset: 0 });
            if (anchorGrouping == 2) {
                currentSize += cLength;
                if (val === '' || val === "\xA0" || i === len - 1) {
                    if (val === '' || val === "\xA0") {
                        currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                        letters[currentPos].an = currentSize;
                        letters[currentPos].ind = index;
                        letters[currentPos].extra = cLength;
                        currentPos += 1;
                    }
                    index += 1;
                    currentSize = 0;
                }
            } else if (anchorGrouping == 3) {
                currentSize += cLength;
                if (val === '' || i === len - 1) {
                    if (val === '') {
                        currentSize -= cLength;
                    }
                    while (currentPos <= i) {
                        letters[currentPos].an = currentSize;
                        letters[currentPos].ind = index;
                        letters[currentPos].extra = cLength;
                        currentPos += 1;
                    }
                    currentSize = 0;
                    index += 1;
                }
            } else {
                letters[index].ind = index;
                letters[index].extra = 0;
                index += 1;
            }
        }
        documentData.l = letters;
        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
        lineWidths.push(lineWidth);
        if (documentData.sz) {
            documentData.boxWidth = documentData.sz[0];
            documentData.justifyOffset = 0;
        } else {
            documentData.boxWidth = maxLineWidth;
            switch (documentData.j) {
                case 1:
                    documentData.justifyOffset = -documentData.boxWidth;
                    break;
                case 2:
                    documentData.justifyOffset = -documentData.boxWidth / 2;
                    break;
                default:
                    documentData.justifyOffset = 0;
            }
        }
        documentData.lineWidths = lineWidths;

        var animators = data.a,
            animatorData,
            letterData;
        jLen = animators.length;
        var based,
            ind,
            indexes = [];
        for (j = 0; j < jLen; j += 1) {
            animatorData = animators[j];
            if (animatorData.a.sc) {
                documentData.strokeColorAnim = true;
            }
            if (animatorData.a.sw) {
                documentData.strokeWidthAnim = true;
            }
            if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
                documentData.fillColorAnim = true;
            }
            ind = 0;
            based = animatorData.s.b;
            for (i = 0; i < len; i += 1) {
                letterData = letters[i];
                letterData.anIndexes[j] = ind;
                if (based == 1 && letterData.val !== '' || based == 2 && letterData.val !== '' && letterData.val !== "\xA0" || based == 3 && (letterData.n || letterData.val == "\xA0" || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {
                    if (animatorData.s.rn === 1) {
                        indexes.push(ind);
                    }
                    ind += 1;
                }
            }
            data.a[j].s.totalChars = ind;
            var currentInd = -1,
                newInd;
            if (animatorData.s.rn === 1) {
                for (i = 0; i < len; i += 1) {
                    letterData = letters[i];
                    if (currentInd != letterData.anIndexes[j]) {
                        currentInd = letterData.anIndexes[j];
                        newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
                    }
                    letterData.anIndexes[j] = newInd;
                }
            }
        }
        documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
        documentData.ls = documentData.ls || 0;
        documentData.ascent = fontData.ascent * documentData.finalSize / 100;
    };

    TextProperty.prototype.updateDocumentData = function (newData, index) {
        index = index === undefined ? this.keysIndex : index;
        var dData = this.copyData({}, this.data.d.k[index].s);
        dData = this.copyData(dData, newData);
        this.data.d.k[index].s = dData;
        this.recalculate(index);
        this.elem.addDynamicProperty(this);
    };

    TextProperty.prototype.recalculate = function (index) {
        var dData = this.data.d.k[index].s;
        dData.__complete = false;
        this.keysIndex = 0;
        this._isFirstFrame = true;
        this.getValue(dData);
    };

    TextProperty.prototype.canResizeFont = function (_canResize) {
        this.canResize = _canResize;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
    };

    TextProperty.prototype.setMinimumFontSize = function (_fontValue) {
        this.minimumFontSize = Math.floor(_fontValue) || 1;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
    };

    var TextSelectorProp = function () {
        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;

        function TextSelectorProp(elem, data) {
            this._currentTextLength = -1;
            this.k = false;
            this.data = data;
            this.elem = elem;
            this.comp = elem.comp;
            this.finalS = 0;
            this.finalE = 0;
            this.initDynamicPropertyContainer(elem);
            this.s = PropertyFactory.getProp(elem, data.s || { k: 0 }, 0, 0, this);
            if ('e' in data) {
                this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
            } else {
                this.e = { v: 100 };
            }
            this.o = PropertyFactory.getProp(elem, data.o || { k: 0 }, 0, 0, this);
            this.xe = PropertyFactory.getProp(elem, data.xe || { k: 0 }, 0, 0, this);
            this.ne = PropertyFactory.getProp(elem, data.ne || { k: 0 }, 0, 0, this);
            this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);
            if (!this.dynamicProperties.length) {
                this.getValue();
            }
        }

        TextSelectorProp.prototype = {
            getMult: function getMult(ind) {
                if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                    this.getValue();
                }
                //var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
                var easer = BezierFactory.getBezierEasing(this.ne.v / 100, 0, 1 - this.xe.v / 100, 1).get;
                var mult = 0;
                var s = this.finalS;
                var e = this.finalE;
                var type = this.data.sh;
                if (type == 2) {
                    if (e === s) {
                        mult = ind >= e ? 1 : 0;
                    } else {
                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }
                    mult = easer(mult);
                } else if (type == 3) {
                    if (e === s) {
                        mult = ind >= e ? 0 : 1;
                    } else {
                        mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                    }

                    mult = easer(mult);
                } else if (type == 4) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                        if (mult < 0.5) {
                            mult *= 2;
                        } else {
                            mult = 1 - 2 * (mult - 0.5);
                        }
                    }
                    mult = easer(mult);
                } else if (type == 5) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        var tot = e - s;
                        /*ind += 0.5;
                        mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind;*/
                        ind = min(max(0, ind + 0.5 - s), e - s);
                        var x = -tot / 2 + ind;
                        var a = tot / 2;
                        mult = Math.sqrt(1 - x * x / (a * a));
                    }
                    mult = easer(mult);
                } else if (type == 6) {
                    if (e === s) {
                        mult = 0;
                    } else {
                        ind = min(max(0, ind + 0.5 - s), e - s);
                        mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2;
                        /*
                         ind = Math.min(Math.max(s,ind),e-1);
                         mult = (1+(Math.cos((Math.PI+Math.PI*2*(ind-s)/(e-1-s)))))/2;
                         mult = Math.max(mult,(1/(e-1-s))/(e-1-s));*/
                    }
                    mult = easer(mult);
                } else {
                    if (ind >= floor(s)) {
                        if (ind - s < 0) {
                            mult = 1 - (s - ind);
                        } else {
                            mult = max(0, min(e - ind, 1));
                        }
                    }
                    mult = easer(mult);
                }
                return mult * this.a.v;
            },
            getValue: function getValue(newCharsFlag) {
                this.iterateDynamicProperties();
                this._mdf = newCharsFlag || this._mdf;
                this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
                if (newCharsFlag && this.data.r === 2) {
                    this.e.v = this._currentTextLength;
                }
                var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
                var o = this.o.v / divisor;
                var s = this.s.v / divisor + o;
                var e = this.e.v / divisor + o;
                if (s > e) {
                    var _s = s;
                    s = e;
                    e = _s;
                }
                this.finalS = s;
                this.finalE = e;
            }
        };
        extendPrototype([DynamicPropertyContainer], TextSelectorProp);

        function getTextSelectorProp(elem, data, arr) {
            return new TextSelectorProp(elem, data, arr);
        }

        return {
            getTextSelectorProp: getTextSelectorProp
        };
    }();

    var pool_factory = function () {
        return function (initialLength, _create, _release, _clone) {

            var _length = 0;
            var _maxLength = initialLength;
            var pool = createSizedArray(_maxLength);

            var ob = {
                newElement: newElement,
                release: release
            };

            function newElement() {
                var element;
                if (_length) {
                    _length -= 1;
                    element = pool[_length];
                } else {
                    element = _create();
                }
                return element;
            }

            function release(element) {
                if (_length === _maxLength) {
                    pool = pooling.double(pool);
                    _maxLength = _maxLength * 2;
                }
                if (_release) {
                    _release(element);
                }
                pool[_length] = element;
                _length += 1;
            }

            function clone() {
                var clonedElement = newElement();
                return _clone(clonedElement);
            }

            return ob;
        };
    }();

    var pooling = function () {

        function double(arr) {
            return arr.concat(createSizedArray(arr.length));
        }

        return {
            double: double
        };
    }();
    var point_pool = function () {

        function create() {
            return createTypedArray('float32', 2);
        }
        return pool_factory(8, create);
    }();
    var shape_pool = function () {

        function create() {
            return new ShapePath();
        }

        function release(shapePath) {
            var len = shapePath._length,
                i;
            for (i = 0; i < len; i += 1) {
                point_pool.release(shapePath.v[i]);
                point_pool.release(shapePath.i[i]);
                point_pool.release(shapePath.o[i]);
                shapePath.v[i] = null;
                shapePath.i[i] = null;
                shapePath.o[i] = null;
            }
            shapePath._length = 0;
            shapePath.c = false;
        }

        function clone(shape) {
            var cloned = factory.newElement();
            var i,
                len = shape._length === undefined ? shape.v.length : shape._length;
            cloned.setLength(len);
            cloned.c = shape.c;
            var pt;

            for (i = 0; i < len; i += 1) {
                cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
            }
            return cloned;
        }

        var factory = pool_factory(4, create, release);
        factory.clone = clone;

        return factory;
    }();
    var shapeCollection_pool = function () {
        var ob = {
            newShapeCollection: newShapeCollection,
            release: release
        };

        var _length = 0;
        var _maxLength = 4;
        var pool = createSizedArray(_maxLength);

        function newShapeCollection() {
            var shapeCollection;
            if (_length) {
                _length -= 1;
                shapeCollection = pool[_length];
            } else {
                shapeCollection = new ShapeCollection();
            }
            return shapeCollection;
        }

        function release(shapeCollection) {
            var i,
                len = shapeCollection._length;
            for (i = 0; i < len; i += 1) {
                shape_pool.release(shapeCollection.shapes[i]);
            }
            shapeCollection._length = 0;

            if (_length === _maxLength) {
                pool = pooling.double(pool);
                _maxLength = _maxLength * 2;
            }
            pool[_length] = shapeCollection;
            _length += 1;
        }

        return ob;
    }();
    var segments_length_pool = function () {

        function create() {
            return {
                lengths: [],
                totalLength: 0
            };
        }

        function release(element) {
            var i,
                len = element.lengths.length;
            for (i = 0; i < len; i += 1) {
                bezier_length_pool.release(element.lengths[i]);
            }
            element.lengths.length = 0;
        }

        return pool_factory(8, create, release);
    }();
    var bezier_length_pool = function () {

        function create() {
            return {
                addedLength: 0,
                percents: createTypedArray('float32', defaultCurveSegments),
                lengths: createTypedArray('float32', defaultCurveSegments)
            };
        }
        return pool_factory(8, create);
    }();
    function BaseRenderer() {}
    BaseRenderer.prototype.checkLayers = function (num) {
        var i,
            len = this.layers.length,
            data;
        this.completeLayers = true;
        for (i = len - 1; i >= 0; i--) {
            if (!this.elements[i]) {
                data = this.layers[i];
                if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {
                    this.buildItem(i);
                }
            }
            this.completeLayers = this.elements[i] ? this.completeLayers : false;
        }
        this.checkPendingElements();
    };

    BaseRenderer.prototype.createItem = function (layer) {
        switch (layer.ty) {
            case 2:
                return this.createImage(layer);
            case 0:
                return this.createComp(layer);
            case 1:
                return this.createSolid(layer);
            case 3:
                return this.createNull(layer);
            case 4:
                return this.createShape(layer);
            case 5:
                return this.createText(layer);
            case 13:
                return this.createCamera(layer);
        }
        return this.createNull(layer);
    };

    BaseRenderer.prototype.createCamera = function () {
        throw new Error('You\'re using a 3d camera. Try the html renderer.');
    };

    BaseRenderer.prototype.buildAllItems = function () {
        var i,
            len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            this.buildItem(i);
        }
        this.checkPendingElements();
    };

    BaseRenderer.prototype.includeLayers = function (newLayers) {
        this.completeLayers = false;
        var i,
            len = newLayers.length;
        var j,
            jLen = this.layers.length;
        for (i = 0; i < len; i += 1) {
            j = 0;
            while (j < jLen) {
                if (this.layers[j].id == newLayers[i].id) {
                    this.layers[j] = newLayers[i];
                    break;
                }
                j += 1;
            }
        }
    };

    BaseRenderer.prototype.setProjectInterface = function (pInterface) {
        this.globalData.projectInterface = pInterface;
    };

    BaseRenderer.prototype.initItems = function () {
        if (!this.globalData.progressiveLoad) {
            this.buildAllItems();
        }
    };
    BaseRenderer.prototype.buildElementParenting = function (element, parentName, hierarchy) {
        var elements = this.elements;
        var layers = this.layers;
        var i = 0,
            len = layers.length;
        while (i < len) {
            if (layers[i].ind == parentName) {
                if (!elements[i] || elements[i] === true) {
                    this.buildItem(i);
                    this.addPendingElement(element);
                } else {
                    hierarchy.push(elements[i]);
                    elements[i].setAsParent();
                    if (layers[i].parent !== undefined) {
                        this.buildElementParenting(element, layers[i].parent, hierarchy);
                    } else {
                        element.setHierarchy(hierarchy);
                    }
                }
            }
            i += 1;
        }
    };

    BaseRenderer.prototype.addPendingElement = function (element) {
        this.pendingElements.push(element);
    };

    BaseRenderer.prototype.searchExtraCompositions = function (assets) {
        var i,
            len = assets.length;
        for (i = 0; i < len; i += 1) {
            if (assets[i].xt) {
                var comp = this.createComp(assets[i]);
                comp.initExpressions();
                this.globalData.projectInterface.registerComposition(comp);
            }
        }
    };

    BaseRenderer.prototype.setupGlobalData = function (animData, fontsContainer) {
        this.globalData.fontManager = new FontManager();
        this.globalData.fontManager.addChars(animData.chars);
        this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
        this.globalData.imageLoader = this.animationItem.imagePreloader;
        this.globalData.frameId = 0;
        this.globalData.frameRate = animData.fr;
        this.globalData.nm = animData.nm;
        this.globalData.compSize = {
            w: animData.w,
            h: animData.h
        };
    };
    function SVGRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.svgElement = createNS('svg');
        var ariaLabel = '';
        if (config && config.title) {
            var titleElement = createNS('title');
            var titleId = createElementID();
            titleElement.setAttribute('id', titleId);
            titleElement.textContent = config.title;
            this.svgElement.appendChild(titleElement);
            ariaLabel += titleId;
        }
        if (config && config.description) {
            var descElement = createNS('desc');
            var descId = createElementID();
            descElement.setAttribute('id', descId);
            descElement.textContent = config.description;
            this.svgElement.appendChild(descElement);
            ariaLabel += ' ' + descId;
        }
        if (ariaLabel) {
            this.svgElement.setAttribute('aria-labelledby', ariaLabel);
        }
        var defs = createNS('defs');
        this.svgElement.appendChild(defs);
        var maskElement = createNS('g');
        this.svgElement.appendChild(maskElement);
        this.layerElement = maskElement;
        this.renderConfig = {
            preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
            progressiveLoad: config && config.progressiveLoad || false,
            hideOnTransparent: config && config.hideOnTransparent === false ? false : true,
            viewBoxOnly: config && config.viewBoxOnly || false,
            viewBoxSize: config && config.viewBoxSize || false,
            className: config && config.className || ''
        };

        this.globalData = {
            _mdf: false,
            frameNum: -1,
            defs: defs,
            renderConfig: this.renderConfig
        };
        this.elements = [];
        this.pendingElements = [];
        this.destroyed = false;
        this.rendererType = 'svg';
    }

    extendPrototype([BaseRenderer], SVGRenderer);

    SVGRenderer.prototype.createNull = function (data) {
        return new NullElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createShape = function (data) {
        return new SVGShapeElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createText = function (data) {
        return new SVGTextElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createImage = function (data) {
        return new IImageElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createComp = function (data) {
        return new SVGCompElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.createSolid = function (data) {
        return new ISolidElement(data, this.globalData, this);
    };

    SVGRenderer.prototype.configAnimation = function (animData) {
        this.svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        if (this.renderConfig.viewBoxSize) {
            this.svgElement.setAttribute('viewBox', this.renderConfig.viewBoxSize);
        } else {
            this.svgElement.setAttribute('viewBox', '0 0 ' + animData.w + ' ' + animData.h);
        }

        if (!this.renderConfig.viewBoxOnly) {
            this.svgElement.setAttribute('width', animData.w);
            this.svgElement.setAttribute('height', animData.h);
            this.svgElement.style.width = '100%';
            this.svgElement.style.height = '100%';
            this.svgElement.style.transform = 'translate3d(0,0,0)';
        }
        if (this.renderConfig.className) {
            this.svgElement.setAttribute('class', this.renderConfig.className);
        }
        this.svgElement.setAttribute('preserveAspectRatio', this.renderConfig.preserveAspectRatio);
        //this.layerElement.style.transform = 'translate3d(0,0,0)';
        //this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
        this.animationItem.wrapper.appendChild(this.svgElement);
        //Mask animation
        var defs = this.globalData.defs;

        this.setupGlobalData(animData, defs);
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.data = animData;

        var maskElement = createNS('clipPath');
        var rect = createNS('rect');
        rect.setAttribute('width', animData.w);
        rect.setAttribute('height', animData.h);
        rect.setAttribute('x', 0);
        rect.setAttribute('y', 0);
        var maskId = createElementID();
        maskElement.setAttribute('id', maskId);
        maskElement.appendChild(rect);
        this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + maskId + ")");

        defs.appendChild(maskElement);
        this.layers = animData.layers;
        this.elements = createSizedArray(animData.layers.length);
    };

    SVGRenderer.prototype.destroy = function () {
        this.animationItem.wrapper.innerHTML = '';
        this.layerElement = null;
        this.globalData.defs = null;
        var i,
            len = this.layers ? this.layers.length : 0;
        for (i = 0; i < len; i++) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
    };

    SVGRenderer.prototype.updateContainerSize = function () {};

    SVGRenderer.prototype.buildItem = function (pos) {
        var elements = this.elements;
        if (elements[pos] || this.layers[pos].ty == 99) {
            return;
        }
        elements[pos] = true;
        var element = this.createItem(this.layers[pos]);

        elements[pos] = element;
        if (expressionsPlugin) {
            if (this.layers[pos].ty === 0) {
                this.globalData.projectInterface.registerComposition(element);
            }
            element.initExpressions();
        }
        this.appendElementInPos(element, pos);
        if (this.layers[pos].tt) {
            if (!this.elements[pos - 1] || this.elements[pos - 1] === true) {
                this.buildItem(pos - 1);
                this.addPendingElement(element);
            } else {
                element.setMatte(elements[pos - 1].layerId);
            }
        }
    };

    SVGRenderer.prototype.checkPendingElements = function () {
        while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
            if (element.data.tt) {
                var i = 0,
                    len = this.elements.length;
                while (i < len) {
                    if (this.elements[i] === element) {
                        element.setMatte(this.elements[i - 1].layerId);
                        break;
                    }
                    i += 1;
                }
            }
        }
    };

    SVGRenderer.prototype.renderFrame = function (num) {
        if (this.renderedFrame === num || this.destroyed) {
            return;
        }
        if (num === null) {
            num = this.renderedFrame;
        } else {
            this.renderedFrame = num;
        }
        // console.log('-------');
        // console.log('FRAME ',num);
        this.globalData.frameNum = num;
        this.globalData.frameId += 1;
        this.globalData.projectInterface.currentFrame = num;
        this.globalData._mdf = false;
        var i,
            len = this.layers.length;
        if (!this.completeLayers) {
            this.checkLayers(num);
        }
        for (i = len - 1; i >= 0; i--) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].prepareFrame(num - this.layers[i].st);
            }
        }
        if (this.globalData._mdf) {
            for (i = 0; i < len; i += 1) {
                if (this.completeLayers || this.elements[i]) {
                    this.elements[i].renderFrame();
                }
            }
        }
    };

    SVGRenderer.prototype.appendElementInPos = function (element, pos) {
        var newElement = element.getBaseElement();
        if (!newElement) {
            return;
        }
        var i = 0;
        var nextElement;
        while (i < pos) {
            if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
                nextElement = this.elements[i].getBaseElement();
            }
            i += 1;
        }
        if (nextElement) {
            this.layerElement.insertBefore(newElement, nextElement);
        } else {
            this.layerElement.appendChild(newElement);
        }
    };

    SVGRenderer.prototype.hide = function () {
        this.layerElement.style.display = 'none';
    };

    SVGRenderer.prototype.show = function () {
        this.layerElement.style.display = 'block';
    };

    function HybridRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
            className: config && config.className || '',
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
            hideOnTransparent: config && config.hideOnTransparent === false ? false : true
        };
        this.globalData = {
            _mdf: false,
            frameNum: -1,
            renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;
        this.rendererType = 'html';
    }

    extendPrototype([BaseRenderer], HybridRenderer);

    HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;

    HybridRenderer.prototype.checkPendingElements = function () {
        while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
        }
    };

    HybridRenderer.prototype.appendElementInPos = function (element, pos) {
        var newDOMElement = element.getBaseElement();
        if (!newDOMElement) {
            return;
        }
        var layer = this.layers[pos];
        if (!layer.ddd || !this.supports3d) {
            if (this.threeDElements) {
                this.addTo3dContainer(newDOMElement, pos);
            } else {
                var i = 0;
                var nextDOMElement, nextLayer, tmpDOMElement;
                while (i < pos) {
                    if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {
                        nextLayer = this.elements[i];
                        tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
                        nextDOMElement = tmpDOMElement || nextDOMElement;
                    }
                    i += 1;
                }
                if (nextDOMElement) {
                    if (!layer.ddd || !this.supports3d) {
                        this.layerElement.insertBefore(newDOMElement, nextDOMElement);
                    }
                } else {
                    if (!layer.ddd || !this.supports3d) {
                        this.layerElement.appendChild(newDOMElement);
                    }
                }
            }
        } else {
            this.addTo3dContainer(newDOMElement, pos);
        }
    };

    HybridRenderer.prototype.createShape = function (data) {
        if (!this.supports3d) {
            return new SVGShapeElement(data, this.globalData, this);
        }
        return new HShapeElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createText = function (data) {
        if (!this.supports3d) {
            return new SVGTextElement(data, this.globalData, this);
        }
        return new HTextElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createCamera = function (data) {
        this.camera = new HCameraElement(data, this.globalData, this);
        return this.camera;
    };

    HybridRenderer.prototype.createImage = function (data) {
        if (!this.supports3d) {
            return new IImageElement(data, this.globalData, this);
        }
        return new HImageElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createComp = function (data) {
        if (!this.supports3d) {
            return new SVGCompElement(data, this.globalData, this);
        }
        return new HCompElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createSolid = function (data) {
        if (!this.supports3d) {
            return new ISolidElement(data, this.globalData, this);
        }
        return new HSolidElement(data, this.globalData, this);
    };

    HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

    HybridRenderer.prototype.getThreeDContainerByPos = function (pos) {
        var i = 0,
            len = this.threeDElements.length;
        while (i < len) {
            if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
                return this.threeDElements[i].perspectiveElem;
            }
            i += 1;
        }
    };

    HybridRenderer.prototype.createThreeDContainer = function (pos, type) {
        var perspectiveElem = createTag('div');
        styleDiv(perspectiveElem);
        var container = createTag('div');
        styleDiv(container);
        if (type === '3d') {
            perspectiveElem.style.width = this.globalData.compSize.w + 'px';
            perspectiveElem.style.height = this.globalData.compSize.h + 'px';
            perspectiveElem.style.transformOrigin = perspectiveElem.style.mozTransformOrigin = perspectiveElem.style.webkitTransformOrigin = "50% 50%";
            container.style.transform = container.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
        }

        perspectiveElem.appendChild(container);
        //this.resizerElem.appendChild(perspectiveElem);
        var threeDContainerData = {
            container: container,
            perspectiveElem: perspectiveElem,
            startPos: pos,
            endPos: pos,
            type: type
        };
        this.threeDElements.push(threeDContainerData);
        return threeDContainerData;
    };

    HybridRenderer.prototype.build3dContainers = function () {
        var i,
            len = this.layers.length;
        var lastThreeDContainerData;
        var currentContainer = '';
        for (i = 0; i < len; i += 1) {
            if (this.layers[i].ddd && this.layers[i].ty !== 3) {
                if (currentContainer !== '3d') {
                    currentContainer = '3d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '3d');
                }
                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
            } else {
                if (currentContainer !== '2d') {
                    currentContainer = '2d';
                    lastThreeDContainerData = this.createThreeDContainer(i, '2d');
                }
                lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
            }
        }
        len = this.threeDElements.length;
        for (i = len - 1; i >= 0; i--) {
            this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
        }
    };

    HybridRenderer.prototype.addTo3dContainer = function (elem, pos) {
        var i = 0,
            len = this.threeDElements.length;
        while (i < len) {
            if (pos <= this.threeDElements[i].endPos) {
                var j = this.threeDElements[i].startPos;
                var nextElement;
                while (j < pos) {
                    if (this.elements[j] && this.elements[j].getBaseElement) {
                        nextElement = this.elements[j].getBaseElement();
                    }
                    j += 1;
                }
                if (nextElement) {
                    this.threeDElements[i].container.insertBefore(elem, nextElement);
                } else {
                    this.threeDElements[i].container.appendChild(elem);
                }
                break;
            }
            i += 1;
        }
    };

    HybridRenderer.prototype.configAnimation = function (animData) {
        var resizerElem = createTag('div');
        var wrapper = this.animationItem.wrapper;
        resizerElem.style.width = animData.w + 'px';
        resizerElem.style.height = animData.h + 'px';
        this.resizerElem = resizerElem;
        styleDiv(resizerElem);
        resizerElem.style.transformStyle = resizerElem.style.webkitTransformStyle = resizerElem.style.mozTransformStyle = "flat";
        if (this.renderConfig.className) {
            resizerElem.setAttribute('class', this.renderConfig.className);
        }
        wrapper.appendChild(resizerElem);

        resizerElem.style.overflow = 'hidden';
        var svg = createNS('svg');
        svg.setAttribute('width', '1');
        svg.setAttribute('height', '1');
        styleDiv(svg);
        this.resizerElem.appendChild(svg);
        var defs = createNS('defs');
        svg.appendChild(defs);
        this.data = animData;
        //Mask animation
        this.setupGlobalData(animData, svg);
        this.globalData.defs = defs;
        this.layers = animData.layers;
        this.layerElement = this.resizerElem;
        this.build3dContainers();
        this.updateContainerSize();
    };

    HybridRenderer.prototype.destroy = function () {
        this.animationItem.wrapper.innerHTML = '';
        this.animationItem.container = null;
        this.globalData.defs = null;
        var i,
            len = this.layers ? this.layers.length : 0;
        for (i = 0; i < len; i++) {
            this.elements[i].destroy();
        }
        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
    };

    HybridRenderer.prototype.updateContainerSize = function () {
        var elementWidth = this.animationItem.wrapper.offsetWidth;
        var elementHeight = this.animationItem.wrapper.offsetHeight;
        var elementRel = elementWidth / elementHeight;
        var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
        var sx, sy, tx, ty;
        if (animationRel > elementRel) {
            sx = elementWidth / this.globalData.compSize.w;
            sy = elementWidth / this.globalData.compSize.w;
            tx = 0;
            ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
        } else {
            sx = elementHeight / this.globalData.compSize.h;
            sy = elementHeight / this.globalData.compSize.h;
            tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
            ty = 0;
        }
        this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,' + sy + ',0,0,0,0,1,0,' + tx + ',' + ty + ',0,1)';
    };

    HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

    HybridRenderer.prototype.hide = function () {
        this.resizerElem.style.display = 'none';
    };

    HybridRenderer.prototype.show = function () {
        this.resizerElem.style.display = 'block';
    };

    HybridRenderer.prototype.initItems = function () {
        this.buildAllItems();
        if (this.camera) {
            this.camera.setup();
        } else {
            var cWidth = this.globalData.compSize.w;
            var cHeight = this.globalData.compSize.h;
            var i,
                len = this.threeDElements.length;
            for (i = 0; i < len; i += 1) {
                this.threeDElements[i].perspectiveElem.style.perspective = this.threeDElements[i].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + 'px';
            }
        }
    };

    HybridRenderer.prototype.searchExtraCompositions = function (assets) {
        var i,
            len = assets.length;
        var floatingContainer = createTag('div');
        for (i = 0; i < len; i += 1) {
            if (assets[i].xt) {
                var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);
                comp.initExpressions();
                this.globalData.projectInterface.registerComposition(comp);
            }
        }
    };

    function MaskElement(data, element, globalData) {
        this.data = data;
        this.element = element;
        this.globalData = globalData;
        this.storedData = [];
        this.masksProperties = this.data.masksProperties || [];
        this.maskElement = null;
        var defs = this.globalData.defs;
        var i,
            len = this.masksProperties ? this.masksProperties.length : 0;
        this.viewData = createSizedArray(len);
        this.solidPath = '';

        var path,
            properties = this.masksProperties;
        var count = 0;
        var currentMasks = [];
        var j, jLen;
        var layerId = createElementID();
        var rect, expansor, feMorph, x;
        var maskType = 'clipPath',
            maskRef = 'clip-path';
        for (i = 0; i < len; i++) {
            if (properties[i].mode !== 'a' && properties[i].mode !== 'n' || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {
                maskType = 'mask';
                maskRef = 'mask';
            }

            if ((properties[i].mode == 's' || properties[i].mode == 'i') && count === 0) {
                rect = createNS('rect');
                rect.setAttribute('fill', '#ffffff');
                rect.setAttribute('width', this.element.comp.data.w || 0);
                rect.setAttribute('height', this.element.comp.data.h || 0);
                currentMasks.push(rect);
            } else {
                rect = null;
            }

            path = createNS('path');
            if (properties[i].mode == 'n') {
                // TODO move this to a factory or to a constructor
                this.viewData[i] = {
                    op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                    prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                    elem: path,
                    lastPath: ''
                };
                defs.appendChild(path);
                continue;
            }
            count += 1;

            path.setAttribute('fill', properties[i].mode === 's' ? '#000000' : '#ffffff');
            path.setAttribute('clip-rule', 'nonzero');
            var filterID;

            if (properties[i].x.k !== 0) {
                maskType = 'mask';
                maskRef = 'mask';
                x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
                filterID = createElementID();
                expansor = createNS('filter');
                expansor.setAttribute('id', filterID);
                feMorph = createNS('feMorphology');
                feMorph.setAttribute('operator', 'erode');
                feMorph.setAttribute('in', 'SourceGraphic');
                feMorph.setAttribute('radius', '0');
                expansor.appendChild(feMorph);
                defs.appendChild(expansor);
                path.setAttribute('stroke', properties[i].mode === 's' ? '#000000' : '#ffffff');
            } else {
                feMorph = null;
                x = null;
            }

            // TODO move this to a factory or to a constructor
            this.storedData[i] = {
                elem: path,
                x: x,
                expan: feMorph,
                lastPath: '',
                lastOperator: '',
                filterId: filterID,
                lastRadius: 0
            };
            if (properties[i].mode == 'i') {
                jLen = currentMasks.length;
                var g = createNS('g');
                for (j = 0; j < jLen; j += 1) {
                    g.appendChild(currentMasks[j]);
                }
                var mask = createNS('mask');
                mask.setAttribute('mask-type', 'alpha');
                mask.setAttribute('id', layerId + '_' + count);
                mask.appendChild(path);
                defs.appendChild(mask);
                g.setAttribute('mask', 'url(' + locationHref + '#' + layerId + '_' + count + ')');

                currentMasks.length = 0;
                currentMasks.push(g);
            } else {
                currentMasks.push(path);
            }
            if (properties[i].inv && !this.solidPath) {
                this.solidPath = this.createLayerSolidPath();
            }
            // TODO move this to a factory or to a constructor
            this.viewData[i] = {
                elem: path,
                lastPath: '',
                op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                invRect: rect
            };
            if (!this.viewData[i].prop.k) {
                this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
        }

        this.maskElement = createNS(maskType);

        len = currentMasks.length;
        for (i = 0; i < len; i += 1) {
            this.maskElement.appendChild(currentMasks[i]);
        }

        if (count > 0) {
            this.maskElement.setAttribute('id', layerId);
            this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
            defs.appendChild(this.maskElement);
        }
        if (this.viewData.length) {
            this.element.addRenderableComponent(this);
        }
    }

    MaskElement.prototype.getMaskProperty = function (pos) {
        return this.viewData[pos].prop;
    };

    MaskElement.prototype.renderFrame = function (isFirstFrame) {
        var finalMat = this.element.finalTransform.mat;
        var i,
            len = this.masksProperties.length;
        for (i = 0; i < len; i++) {
            if (this.viewData[i].prop._mdf || isFirstFrame) {
                this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
            if (this.viewData[i].op._mdf || isFirstFrame) {
                this.viewData[i].elem.setAttribute('fill-opacity', this.viewData[i].op.v);
            }
            if (this.masksProperties[i].mode !== 'n') {
                if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
                    this.viewData[i].invRect.setAttribute('x', -finalMat.props[12]);
                    this.viewData[i].invRect.setAttribute('y', -finalMat.props[13]);
                }
                if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
                    var feMorph = this.storedData[i].expan;
                    if (this.storedData[i].x.v < 0) {
                        if (this.storedData[i].lastOperator !== 'erode') {
                            this.storedData[i].lastOperator = 'erode';
                            this.storedData[i].elem.setAttribute('filter', 'url(' + locationHref + '#' + this.storedData[i].filterId + ')');
                        }
                        feMorph.setAttribute('radius', -this.storedData[i].x.v);
                    } else {
                        if (this.storedData[i].lastOperator !== 'dilate') {
                            this.storedData[i].lastOperator = 'dilate';
                            this.storedData[i].elem.setAttribute('filter', null);
                        }
                        this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v * 2);
                    }
                }
            }
        }
    };

    MaskElement.prototype.getMaskelement = function () {
        return this.maskElement;
    };

    MaskElement.prototype.createLayerSolidPath = function () {
        var path = 'M0,0 ';
        path += ' h' + this.globalData.compSize.w;
        path += ' v' + this.globalData.compSize.h;
        path += ' h-' + this.globalData.compSize.w;
        path += ' v-' + this.globalData.compSize.h + ' ';
        return path;
    };

    MaskElement.prototype.drawPath = function (pathData, pathNodes, viewData) {
        var pathString = " M" + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        var i, len;
        len = pathNodes._length;
        for (i = 1; i < len; i += 1) {
            //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
            pathString += " C" + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + " " + pathNodes.i[i][0] + ',' + pathNodes.i[i][1] + " " + pathNodes.v[i][0] + ',' + pathNodes.v[i][1];
        }
        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
        if (pathNodes.c && len > 1) {
            pathString += " C" + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + " " + pathNodes.i[0][0] + ',' + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        }
        //pathNodes.__renderedString = pathString;

        if (viewData.lastPath !== pathString) {
            var pathShapeValue = '';
            if (viewData.elem) {
                if (pathNodes.c) {
                    pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
                }
                viewData.elem.setAttribute('d', pathShapeValue);
            }
            viewData.lastPath = pathString;
        }
    };

    MaskElement.prototype.destroy = function () {
        this.element = null;
        this.globalData = null;
        this.maskElement = null;
        this.data = null;
        this.masksProperties = null;
    };

    /**
     * @file 
     * Handles AE's layer parenting property.
     *
     */

    function HierarchyElement() {}

    HierarchyElement.prototype = {
        /**
            * @function 
            * Initializes hierarchy properties
            *
            */
        initHierarchy: function initHierarchy() {
            //element's parent list
            this.hierarchy = [];
            //if element is parent of another layer _isParent will be true
            this._isParent = false;
            this.checkParenting();
        },
        /**
            * @function 
            * Sets layer's hierarchy.
            * @param {array} hierarch
            * layer's parent list
            *
            */
        setHierarchy: function setHierarchy(hierarchy) {
            this.hierarchy = hierarchy;
        },
        /**
            * @function 
            * Sets layer as parent.
            *
            */
        setAsParent: function setAsParent() {
            this._isParent = true;
        },
        /**
            * @function 
            * Searches layer's parenting chain
            *
            */
        checkParenting: function checkParenting() {
            if (this.data.parent !== undefined) {
                this.comp.buildElementParenting(this, this.data.parent, []);
            }
        }
    };
    /**
     * @file 
     * Handles element's layer frame update.
     * Checks layer in point and out point
     *
     */

    function FrameElement() {}

    FrameElement.prototype = {
        /**
         * @function 
         * Initializes frame related properties.
         *
         */
        initFrame: function initFrame() {
            //set to true when inpoint is rendered
            this._isFirstFrame = false;
            //list of animated properties
            this.dynamicProperties = [];
            // If layer has been modified in current tick this will be true
            this._mdf = false;
        },
        /**
         * @function 
         * Calculates all dynamic values
         *
         * @param {number} num
         * current frame number in Layer's time
         * @param {boolean} isVisible
         * if layers is currently in range
         * 
         */
        prepareProperties: function prepareProperties(num, isVisible) {
            var i,
                len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
                if (isVisible || this._isParent && this.dynamicProperties[i].propType === 'transform') {
                    this.dynamicProperties[i].getValue();
                    if (this.dynamicProperties[i]._mdf) {
                        this.globalData._mdf = true;
                        this._mdf = true;
                    }
                }
            }
        },
        addDynamicProperty: function addDynamicProperty(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
                this.dynamicProperties.push(prop);
            }
        }
    };
    function TransformElement() {}

    TransformElement.prototype = {
        initTransform: function initTransform() {
            this.finalTransform = {
                mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : { o: 0 },
                _matMdf: false,
                _opMdf: false,
                mat: new Matrix()
            };
            if (this.data.ao) {
                this.finalTransform.mProp.autoOriented = true;
            }

            //TODO: check TYPE 11: Guided elements
            if (this.data.ty !== 11) {
                //this.createElements();
            }
        },
        renderTransform: function renderTransform() {

            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

            if (this.hierarchy) {
                var mat;
                var finalMat = this.finalTransform.mat;
                var i = 0,
                    len = this.hierarchy.length;
                //Checking if any of the transformation matrices in the hierarchy chain has changed.
                if (!this.finalTransform._matMdf) {
                    while (i < len) {
                        if (this.hierarchy[i].finalTransform.mProp._mdf) {
                            this.finalTransform._matMdf = true;
                            break;
                        }
                        i += 1;
                    }
                }

                if (this.finalTransform._matMdf) {
                    mat = this.finalTransform.mProp.v.props;
                    finalMat.cloneFromProps(mat);
                    for (i = 0; i < len; i += 1) {
                        mat = this.hierarchy[i].finalTransform.mProp.v.props;
                        finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
                    }
                }
            }
        },
        globalToLocal: function globalToLocal(pt) {
            var transforms = [];
            transforms.push(this.finalTransform);
            var flag = true;
            var comp = this.comp;
            while (flag) {
                if (comp.finalTransform) {
                    if (comp.data.hasMask) {
                        transforms.splice(0, 0, comp.finalTransform);
                    }
                    comp = comp.comp;
                } else {
                    flag = false;
                }
            }
            var i,
                len = transforms.length,
                ptNew;
            for (i = 0; i < len; i += 1) {
                ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
                //ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
                pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
            }
            return pt;
        },
        mHelper: new Matrix()
    };
    function RenderableElement() {}

    RenderableElement.prototype = {
        initRenderable: function initRenderable() {
            //layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
            this.isInRange = false;
            //layer's display state
            this.hidden = false;
            // If layer's transparency equals 0, it can be hidden
            this.isTransparent = false;
            //list of animated components
            this.renderableComponents = [];
        },
        addRenderableComponent: function addRenderableComponent(component) {
            if (this.renderableComponents.indexOf(component) === -1) {
                this.renderableComponents.push(component);
            }
        },
        removeRenderableComponent: function removeRenderableComponent(component) {
            if (this.renderableComponents.indexOf(component) !== -1) {
                this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
            }
        },
        prepareRenderableFrame: function prepareRenderableFrame(num) {
            this.checkLayerLimits(num);
        },
        checkTransparency: function checkTransparency() {
            if (this.finalTransform.mProp.o.v <= 0) {
                if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
                    this.isTransparent = true;
                    this.hide();
                }
            } else if (this.isTransparent) {
                this.isTransparent = false;
                this.show();
            }
        },
        /**
         * @function 
         * Initializes frame related properties.
         *
         * @param {number} num
         * current frame number in Layer's time
         * 
         */
        checkLayerLimits: function checkLayerLimits(num) {
            if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
                if (this.isInRange !== true) {
                    this.globalData._mdf = true;
                    this._mdf = true;
                    this.isInRange = true;
                    this.show();
                }
            } else {
                if (this.isInRange !== false) {
                    this.globalData._mdf = true;
                    this.isInRange = false;
                    this.hide();
                }
            }
        },
        renderRenderable: function renderRenderable() {
            var i,
                len = this.renderableComponents.length;
            for (i = 0; i < len; i += 1) {
                this.renderableComponents[i].renderFrame(this._isFirstFrame);
            }
            /*this.maskManager.renderFrame(this.finalTransform.mat);
            this.renderableEffectsManager.renderFrame(this._isFirstFrame);*/
        },
        sourceRectAtTime: function sourceRectAtTime() {
            return {
                top: 0,
                left: 0,
                width: 100,
                height: 100
            };
        },
        getLayerSize: function getLayerSize() {
            if (this.data.ty === 5) {
                return { w: this.data.textData.width, h: this.data.textData.height };
            } else {
                return { w: this.data.width, h: this.data.height };
            }
        }
    };
    function RenderableDOMElement() {}

    (function () {
        var _prototype = {
            initElement: function initElement(data, globalData, comp) {
                this.initFrame();
                this.initBaseData(data, globalData, comp);
                this.initTransform(data, globalData, comp);
                this.initHierarchy();
                this.initRenderable();
                this.initRendererElement();
                this.createContainerElements();
                this.createRenderableComponents();
                this.createContent();
                this.hide();
            },
            hide: function hide() {
                if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                    var elem = this.baseElement || this.layerElement;
                    elem.style.display = 'none';
                    this.hidden = true;
                }
            },
            show: function show() {
                if (this.isInRange && !this.isTransparent) {
                    if (!this.data.hd) {
                        var elem = this.baseElement || this.layerElement;
                        elem.style.display = 'block';
                    }
                    this.hidden = false;
                    this._isFirstFrame = true;
                }
            },
            renderFrame: function renderFrame() {
                //If it is exported as hidden (data.hd === true) no need to render
                //If it is not visible no need to render
                if (this.data.hd || this.hidden) {
                    return;
                }
                this.renderTransform();
                this.renderRenderable();
                this.renderElement();
                this.renderInnerContent();
                if (this._isFirstFrame) {
                    this._isFirstFrame = false;
                }
            },
            renderInnerContent: function renderInnerContent() {},
            prepareFrame: function prepareFrame(num) {
                this._mdf = false;
                this.prepareRenderableFrame(num);
                this.prepareProperties(num, this.isInRange);
                this.checkTransparency();
            },
            destroy: function destroy() {
                this.innerElem = null;
                this.destroyBaseElement();
            }
        };
        extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
    })();
    function ProcessedElement(element, position) {
        this.elem = element;
        this.pos = position;
    }
    function SVGStyleData(data, level) {
        this.data = data;
        this.type = data.ty;
        this.d = '';
        this.lvl = level;
        this._mdf = false;
        this.closed = data.hd === true;
        this.pElem = createNS('path');
        this.msElem = null;
    }

    SVGStyleData.prototype.reset = function () {
        this.d = '';
        this._mdf = false;
    };
    function SVGShapeData(transformers, level, shape) {
        this.caches = [];
        this.styles = [];
        this.transformers = transformers;
        this.lStr = '';
        this.sh = shape;
        this.lvl = level;
        //TODO find if there are some cases where _isAnimated can be false. 
        // For now, since shapes add up with other shapes. They have to be calculated every time.
        // One way of finding out is checking if all styles associated to this shape depend only of this shape
        this._isAnimated = !!shape.k;
        // TODO: commenting this for now since all shapes are animated
        var i = 0,
            len = transformers.length;
        while (i < len) {
            if (transformers[i].mProps.dynamicProperties.length) {
                this._isAnimated = true;
                break;
            }
            i += 1;
        }
    }

    SVGShapeData.prototype.setAsAnimated = function () {
        this._isAnimated = true;
    };
    function SVGTransformData(mProps, op, container) {
        this.transform = {
            mProps: mProps,
            op: op,
            container: container
        };
        this.elements = [];
        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
    }
    function SVGStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
        this._isAnimated = !!this._isAnimated;
    }

    extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
    function SVGFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
    }

    extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
    function SVGGradientFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.initGradientData(elem, data, styleOb);
    }

    SVGGradientFillStyleData.prototype.initGradientData = function (elem, data, styleOb) {
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
        this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
        this.h = PropertyFactory.getProp(elem, data.h || { k: 0 }, 0, 0.01, this);
        this.a = PropertyFactory.getProp(elem, data.a || { k: 0 }, 0, degToRads, this);
        this.g = new GradientProperty(elem, data.g, this);
        this.style = styleOb;
        this.stops = [];
        this.setGradientData(styleOb.pElem, data);
        this.setGradientOpacity(data, styleOb);
        this._isAnimated = !!this._isAnimated;
    };

    SVGGradientFillStyleData.prototype.setGradientData = function (pathElement, data) {

        var gradientId = createElementID();
        var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
        gfill.setAttribute('id', gradientId);
        gfill.setAttribute('spreadMethod', 'pad');
        gfill.setAttribute('gradientUnits', 'userSpaceOnUse');
        var stops = [];
        var stop, j, jLen;
        jLen = data.g.p * 4;
        for (j = 0; j < jLen; j += 4) {
            stop = createNS('stop');
            gfill.appendChild(stop);
            stops.push(stop);
        }
        pathElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + locationHref + '#' + gradientId + ')');

        this.gf = gfill;
        this.cst = stops;
    };

    SVGGradientFillStyleData.prototype.setGradientOpacity = function (data, styleOb) {
        if (this.g._hasOpacity && !this.g._collapsable) {
            var stop, j, jLen;
            var mask = createNS("mask");
            var maskElement = createNS('path');
            mask.appendChild(maskElement);
            var opacityId = createElementID();
            var maskId = createElementID();
            mask.setAttribute('id', maskId);
            var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
            opFill.setAttribute('id', opacityId);
            opFill.setAttribute('spreadMethod', 'pad');
            opFill.setAttribute('gradientUnits', 'userSpaceOnUse');
            jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
            var stops = this.stops;
            for (j = data.g.p * 4; j < jLen; j += 2) {
                stop = createNS('stop');
                stop.setAttribute('stop-color', 'rgb(255,255,255)');
                opFill.appendChild(stop);
                stops.push(stop);
            }
            maskElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + locationHref + '#' + opacityId + ')');
            this.of = opFill;
            this.ms = mask;
            this.ost = stops;
            this.maskId = maskId;
            styleOb.msElem = maskElement;
        }
    };

    extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
    function SVGGradientStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.initGradientData(elem, data, styleOb);
        this._isAnimated = !!this._isAnimated;
    }

    extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
    function ShapeGroupData() {
        this.it = [];
        this.prevViewData = [];
        this.gr = createNS('g');
    }
    var SVGElementsRenderer = function () {
        var _identityMatrix = new Matrix();
        var _matrixHelper = new Matrix();

        var ob = {
            createRenderFunction: createRenderFunction
        };

        function createRenderFunction(data) {
            var ty = data.ty;
            switch (data.ty) {
                case 'fl':
                    return renderFill;
                case 'gf':
                    return renderGradient;
                case 'gs':
                    return renderGradientStroke;
                case 'st':
                    return renderStroke;
                case 'sh':
                case 'el':
                case 'rc':
                case 'sr':
                    return renderPath;
                case 'tr':
                    return renderContentTransform;
            }
        }

        function renderContentTransform(styleData, itemData, isFirstFrame) {
            if (isFirstFrame || itemData.transform.op._mdf) {
                itemData.transform.container.setAttribute('opacity', itemData.transform.op.v);
            }
            if (isFirstFrame || itemData.transform.mProps._mdf) {
                itemData.transform.container.setAttribute('transform', itemData.transform.mProps.v.to2dCSS());
            }
        }

        function renderPath(styleData, itemData, isFirstFrame) {
            var j,
                jLen,
                pathStringTransformed,
                redraw,
                pathNodes,
                l,
                lLen = itemData.styles.length;
            var lvl = itemData.lvl;
            var paths, mat, props, iterations, k;
            for (l = 0; l < lLen; l += 1) {
                redraw = itemData.sh._mdf || isFirstFrame;
                if (itemData.styles[l].lvl < lvl) {
                    mat = _matrixHelper.reset();
                    iterations = lvl - itemData.styles[l].lvl;
                    k = itemData.transformers.length - 1;
                    while (!redraw && iterations > 0) {
                        redraw = itemData.transformers[k].mProps._mdf || redraw;
                        iterations--;
                        k--;
                    }
                    if (redraw) {
                        iterations = lvl - itemData.styles[l].lvl;
                        k = itemData.transformers.length - 1;
                        while (iterations > 0) {
                            props = itemData.transformers[k].mProps.v.props;
                            mat.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
                            iterations--;
                            k--;
                        }
                    }
                } else {
                    mat = _identityMatrix;
                }
                paths = itemData.sh.paths;
                jLen = paths._length;
                if (redraw) {
                    pathStringTransformed = '';
                    for (j = 0; j < jLen; j += 1) {
                        pathNodes = paths.shapes[j];
                        if (pathNodes && pathNodes._length) {
                            pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                        }
                    }
                    itemData.caches[l] = pathStringTransformed;
                } else {
                    pathStringTransformed = itemData.caches[l];
                }
                itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
                itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
            }
        }

        function renderFill(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;

            if (itemData.c._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('fill', 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
            }
            if (itemData.o._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('fill-opacity', itemData.o.v);
            }
        };

        function renderGradientStroke(styleData, itemData, isFirstFrame) {
            renderGradient(styleData, itemData, isFirstFrame);
            renderStroke(styleData, itemData, isFirstFrame);
        }

        function renderGradient(styleData, itemData, isFirstFrame) {
            var gfill = itemData.gf;
            var hasOpacity = itemData.g._hasOpacity;
            var pt1 = itemData.s.v,
                pt2 = itemData.e.v;

            if (itemData.o._mdf || isFirstFrame) {
                var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
                itemData.style.pElem.setAttribute(attr, itemData.o.v);
            }
            if (itemData.s._mdf || isFirstFrame) {
                var attr1 = styleData.t === 1 ? 'x1' : 'cx';
                var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
                gfill.setAttribute(attr1, pt1[0]);
                gfill.setAttribute(attr2, pt1[1]);
                if (hasOpacity && !itemData.g._collapsable) {
                    itemData.of.setAttribute(attr1, pt1[0]);
                    itemData.of.setAttribute(attr2, pt1[1]);
                }
            }
            var stops, i, len, stop;
            if (itemData.g._cmdf || isFirstFrame) {
                stops = itemData.cst;
                var cValues = itemData.g.c;
                len = stops.length;
                for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    stop.setAttribute('offset', cValues[i * 4] + '%');
                    stop.setAttribute('stop-color', 'rgb(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ')');
                }
            }
            if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
                var oValues = itemData.g.o;
                if (itemData.g._collapsable) {
                    stops = itemData.cst;
                } else {
                    stops = itemData.ost;
                }
                len = stops.length;
                for (i = 0; i < len; i += 1) {
                    stop = stops[i];
                    if (!itemData.g._collapsable) {
                        stop.setAttribute('offset', oValues[i * 2] + '%');
                    }
                    stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
                }
            }
            if (styleData.t === 1) {
                if (itemData.e._mdf || isFirstFrame) {
                    gfill.setAttribute('x2', pt2[0]);
                    gfill.setAttribute('y2', pt2[1]);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('x2', pt2[0]);
                        itemData.of.setAttribute('y2', pt2[1]);
                    }
                }
            } else {
                var rad;
                if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
                    rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    gfill.setAttribute('r', rad);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('r', rad);
                    }
                }
                if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
                    if (!rad) {
                        rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                    }
                    var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

                    var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99 : itemData.h.v;
                    var dist = rad * percent;
                    var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                    var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                    gfill.setAttribute('fx', x);
                    gfill.setAttribute('fy', y);
                    if (hasOpacity && !itemData.g._collapsable) {
                        itemData.of.setAttribute('fx', x);
                        itemData.of.setAttribute('fy', y);
                    }
                }
                //gfill.setAttribute('fy','200');
            }
        };

        function renderStroke(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            var d = itemData.d;
            if (d && (d._mdf || isFirstFrame) && d.dashStr) {
                styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
                styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
            }
            if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
                styleElem.pElem.setAttribute('stroke', 'rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
            }
            if (itemData.o._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
            }
            if (itemData.w._mdf || isFirstFrame) {
                styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
                if (styleElem.msElem) {
                    styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
                }
            }
        };

        return ob;
    }();
    function ShapeTransformManager() {
        this.sequences = {};
        this.sequenceList = [];
        this.transform_key_count = 0;
    }

    ShapeTransformManager.prototype = {
        addTransformSequence: function addTransformSequence(transforms) {
            var i,
                len = transforms.length;
            var key = '_';
            for (i = 0; i < len; i += 1) {
                key += transforms[i].transform.key + '_';
            }
            var sequence = this.sequences[key];
            if (!sequence) {
                sequence = {
                    transforms: [].concat(transforms),
                    finalTransform: new Matrix(),
                    _mdf: false
                };
                this.sequences[key] = sequence;
                this.sequenceList.push(sequence);
            }
            return sequence;
        },
        processSequence: function processSequence(sequence, isFirstFrame) {
            var i = 0,
                len = sequence.transforms.length,
                _mdf = isFirstFrame;
            while (i < len && !isFirstFrame) {
                if (sequence.transforms[i].transform.mProps._mdf) {
                    _mdf = true;
                    break;
                }
                i += 1;
            }
            if (_mdf) {
                var props;
                sequence.finalTransform.reset();
                for (i = len - 1; i >= 0; i -= 1) {
                    props = sequence.transforms[i].transform.mProps.v.props;
                    sequence.finalTransform.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
                }
            }
            sequence._mdf = _mdf;
        },
        processSequences: function processSequences(isFirstFrame) {
            var i,
                len = this.sequenceList.length;
            for (i = 0; i < len; i += 1) {
                this.processSequence(this.sequenceList[i], isFirstFrame);
            }
        },
        getNewKey: function getNewKey() {
            return '_' + this.transform_key_count++;
        }
    };
    function BaseElement() {}

    BaseElement.prototype = {
        checkMasks: function checkMasks() {
            if (!this.data.hasMask) {
                return false;
            }
            var i = 0,
                len = this.data.masksProperties.length;
            while (i < len) {
                if (this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false) {
                    return true;
                }
                i += 1;
            }
            return false;
        },
        initExpressions: function initExpressions() {
            this.layerInterface = LayerExpressionInterface(this);
            if (this.data.hasMask && this.maskManager) {
                this.layerInterface.registerMaskInterface(this.maskManager);
            }
            var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
            this.layerInterface.registerEffectsInterface(effectsInterface);

            if (this.data.ty === 0 || this.data.xt) {
                this.compInterface = CompExpressionInterface(this);
            } else if (this.data.ty === 4) {
                this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
                this.layerInterface.content = this.layerInterface.shapeInterface;
            } else if (this.data.ty === 5) {
                this.layerInterface.textInterface = TextExpressionInterface(this);
                this.layerInterface.text = this.layerInterface.textInterface;
            }
        },
        setBlendMode: function setBlendMode() {
            var blendModeValue = getBlendMode(this.data.bm);
            var elem = this.baseElement || this.layerElement;

            elem.style['mix-blend-mode'] = blendModeValue;
        },
        initBaseData: function initBaseData(data, globalData, comp) {
            this.globalData = globalData;
            this.comp = comp;
            this.data = data;
            this.layerId = createElementID();

            //Stretch factor for old animations missing this property.
            if (!this.data.sr) {
                this.data.sr = 1;
            }
            // effects manager
            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
        },
        getType: function getType() {
            return this.type;
        },
        sourceRectAtTime: function sourceRectAtTime() {}
    };
    function NullElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initFrame();
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
    }

    NullElement.prototype.prepareFrame = function (num) {
        this.prepareProperties(num, true);
    };

    NullElement.prototype.renderFrame = function () {};

    NullElement.prototype.getBaseElement = function () {
        return null;
    };

    NullElement.prototype.destroy = function () {};

    NullElement.prototype.sourceRectAtTime = function () {};

    NullElement.prototype.hide = function () {};

    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);

    function SVGBaseElement() {}

    SVGBaseElement.prototype = {
        initRendererElement: function initRendererElement() {
            this.layerElement = createNS('g');
        },
        createContainerElements: function createContainerElements() {
            this.matteElement = createNS('g');
            this.transformedElement = this.layerElement;
            this.maskedElement = this.layerElement;
            this._sizeChanged = false;
            var layerElementParent = null;
            //If this layer acts as a mask for the following layer
            var filId, fil, gg;
            if (this.data.td) {
                if (this.data.td == 3 || this.data.td == 1) {
                    var masker = createNS('mask');
                    masker.setAttribute('id', this.layerId);
                    masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha');
                    masker.appendChild(this.layerElement);
                    layerElementParent = masker;
                    this.globalData.defs.appendChild(masker);
                    // This is only for IE and Edge when mask if of type alpha
                    if (!featureSupport.maskType && this.data.td == 1) {
                        masker.setAttribute('mask-type', 'luminance');
                        filId = createElementID();
                        fil = filtersFactory.createFilter(filId);
                        this.globalData.defs.appendChild(fil);
                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                        gg = createNS('g');
                        gg.appendChild(this.layerElement);
                        layerElementParent = gg;
                        masker.appendChild(gg);
                        gg.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
                    }
                } else if (this.data.td == 2) {
                    var maskGroup = createNS('mask');
                    maskGroup.setAttribute('id', this.layerId);
                    maskGroup.setAttribute('mask-type', 'alpha');
                    var maskGrouper = createNS('g');
                    maskGroup.appendChild(maskGrouper);
                    filId = createElementID();
                    fil = filtersFactory.createFilter(filId);
                    ////

                    // This solution doesn't work on Android when meta tag with viewport attribute is set
                    /*var feColorMatrix = createNS('feColorMatrix');
                    feColorMatrix.setAttribute('type', 'matrix');
                    feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                    fil.appendChild(feColorMatrix);*/
                    ////
                    var feCTr = createNS('feComponentTransfer');
                    feCTr.setAttribute('in', 'SourceGraphic');
                    fil.appendChild(feCTr);
                    var feFunc = createNS('feFuncA');
                    feFunc.setAttribute('type', 'table');
                    feFunc.setAttribute('tableValues', '1.0 0.0');
                    feCTr.appendChild(feFunc);
                    ////
                    this.globalData.defs.appendChild(fil);
                    var alphaRect = createNS('rect');
                    alphaRect.setAttribute('width', this.comp.data.w);
                    alphaRect.setAttribute('height', this.comp.data.h);
                    alphaRect.setAttribute('x', '0');
                    alphaRect.setAttribute('y', '0');
                    alphaRect.setAttribute('fill', '#ffffff');
                    alphaRect.setAttribute('opacity', '0');
                    maskGrouper.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
                    maskGrouper.appendChild(alphaRect);
                    maskGrouper.appendChild(this.layerElement);
                    layerElementParent = maskGrouper;
                    if (!featureSupport.maskType) {
                        maskGroup.setAttribute('mask-type', 'luminance');
                        fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                        gg = createNS('g');
                        maskGrouper.appendChild(alphaRect);
                        gg.appendChild(this.layerElement);
                        layerElementParent = gg;
                        maskGrouper.appendChild(gg);
                    }
                    this.globalData.defs.appendChild(maskGroup);
                }
            } else if (this.data.tt) {
                this.matteElement.appendChild(this.layerElement);
                layerElementParent = this.matteElement;
                this.baseElement = this.matteElement;
            } else {
                this.baseElement = this.layerElement;
            }
            if (this.data.ln) {
                this.layerElement.setAttribute('id', this.data.ln);
            }
            if (this.data.cl) {
                this.layerElement.setAttribute('class', this.data.cl);
            }
            //Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
            if (this.data.ty === 0 && !this.data.hd) {
                var cp = createNS('clipPath');
                var pt = createNS('path');
                pt.setAttribute('d', 'M0,0 L' + this.data.w + ',0' + ' L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
                var clipId = createElementID();
                cp.setAttribute('id', clipId);
                cp.appendChild(pt);
                this.globalData.defs.appendChild(cp);

                if (this.checkMasks()) {
                    var cpGroup = createNS('g');
                    cpGroup.setAttribute('clip-path', 'url(' + locationHref + '#' + clipId + ')');
                    cpGroup.appendChild(this.layerElement);
                    this.transformedElement = cpGroup;
                    if (layerElementParent) {
                        layerElementParent.appendChild(this.transformedElement);
                    } else {
                        this.baseElement = this.transformedElement;
                    }
                } else {
                    this.layerElement.setAttribute('clip-path', 'url(' + locationHref + '#' + clipId + ')');
                }
            }
            if (this.data.bm !== 0) {
                this.setBlendMode();
            }
        },
        renderElement: function renderElement() {
            if (this.finalTransform._matMdf) {
                this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
            }
            if (this.finalTransform._opMdf) {
                this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
            }
        },
        destroyBaseElement: function destroyBaseElement() {
            this.layerElement = null;
            this.matteElement = null;
            this.maskManager.destroy();
        },
        getBaseElement: function getBaseElement() {
            if (this.data.hd) {
                return null;
            }
            return this.baseElement;
        },
        createRenderableComponents: function createRenderableComponents() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
            this.renderableEffectsManager = new SVGEffects(this);
        },
        setMatte: function setMatte(id) {
            if (!this.matteElement) {
                return;
            }
            this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
        }
    };
    function IShapeElement() {}

    IShapeElement.prototype = {
        addShapeToModifiers: function addShapeToModifiers(data) {
            var i,
                len = this.shapeModifiers.length;
            for (i = 0; i < len; i += 1) {
                this.shapeModifiers[i].addShape(data);
            }
        },
        isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data) {
            var i = 0,
                len = this.shapeModifiers.length;
            while (i < len) {
                if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
                    return true;
                }
            }
            return false;
        },
        renderModifiers: function renderModifiers() {
            if (!this.shapeModifiers.length) {
                return;
            }
            var i,
                len = this.shapes.length;
            for (i = 0; i < len; i += 1) {
                this.shapes[i].sh.reset();
            }

            len = this.shapeModifiers.length;
            for (i = len - 1; i >= 0; i -= 1) {
                this.shapeModifiers[i].processShapes(this._isFirstFrame);
            }
        },
        lcEnum: {
            '1': 'butt',
            '2': 'round',
            '3': 'square'
        },
        ljEnum: {
            '1': 'miter',
            '2': 'round',
            '3': 'bevel'
        },
        searchProcessedElement: function searchProcessedElement(elem) {
            var elements = this.processedElements;
            var i = 0,
                len = elements.length;
            while (i < len) {
                if (elements[i].elem === elem) {
                    return elements[i].pos;
                }
                i += 1;
            }
            return 0;
        },
        addProcessedElement: function addProcessedElement(elem, pos) {
            var elements = this.processedElements;
            var i = elements.length;
            while (i) {
                i -= 1;
                if (elements[i].elem === elem) {
                    elements[i].pos = pos;
                    return;
                }
            }
            elements.push(new ProcessedElement(elem, pos));
        },
        prepareFrame: function prepareFrame(num) {
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
        }
    };
    function ITextElement() {}

    ITextElement.prototype.initElement = function (data, globalData, comp) {
        this.lettersChangedFlag = true;
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
        this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
        this.initRenderable();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();
        this.createContent();
        this.hide();
        this.textAnimator.searchProperties(this.dynamicProperties);
    };

    ITextElement.prototype.prepareFrame = function (num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
            this.buildNewText();
            this.textProperty._isFirstFrame = false;
            this.textProperty._mdf = false;
        }
    };

    ITextElement.prototype.createPathShape = function (matrixHelper, shapes) {
        var j,
            jLen = shapes.length;
        var k, kLen, pathNodes;
        var shapeStr = '';
        for (j = 0; j < jLen; j += 1) {
            pathNodes = shapes[j].ks.k;
            shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
        }
        return shapeStr;
    };

    ITextElement.prototype.updateDocumentData = function (newData, index) {
        this.textProperty.updateDocumentData(newData, index);
    };

    ITextElement.prototype.canResizeFont = function (_canResize) {
        this.textProperty.canResizeFont(_canResize);
    };

    ITextElement.prototype.setMinimumFontSize = function (_fontSize) {
        this.textProperty.setMinimumFontSize(_fontSize);
    };

    ITextElement.prototype.applyTextPropertiesToMatrix = function (documentData, matrixHelper, lineNumber, xPos, yPos) {
        if (documentData.ps) {
            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
        }
        matrixHelper.translate(0, -documentData.ls, 0);
        switch (documentData.j) {
            case 1:
                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
                break;
            case 2:
                matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
                break;
        }
        matrixHelper.translate(xPos, yPos, 0);
    };

    ITextElement.prototype.buildColor = function (colorData) {
        return 'rgb(' + Math.round(colorData[0] * 255) + ',' + Math.round(colorData[1] * 255) + ',' + Math.round(colorData[2] * 255) + ')';
    };

    ITextElement.prototype.emptyProp = new LetterProps();

    ITextElement.prototype.destroy = function () {};
    function ICompElement() {}

    extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

    ICompElement.prototype.initElement = function (data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initTransform(data, globalData, comp);
        this.initRenderable();
        this.initHierarchy();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();
        if (this.data.xt || !globalData.progressiveLoad) {
            this.buildAllItems();
        }
        this.hide();
    };

    /*ICompElement.prototype.hide = function(){
        if(!this.hidden){
            this.hideElement();
            var i,len = this.elements.length;
            for( i = 0; i < len; i+=1 ){
                if(this.elements[i]){
                    this.elements[i].hide();
                }
            }
        }
    };*/

    ICompElement.prototype.prepareFrame = function (num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);
        if (!this.isInRange && !this.data.xt) {
            return;
        }

        if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            if (timeRemapped === this.data.op) {
                timeRemapped = this.data.op - 1;
            }
            this.renderedFrame = timeRemapped;
        } else {
            this.renderedFrame = num / this.data.sr;
        }
        var i,
            len = this.elements.length;
        if (!this.completeLayers) {
            this.checkLayers(this.renderedFrame);
        }
        //This iteration needs to be backwards because of how expressions connect between each other
        for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
                if (this.elements[i]._mdf) {
                    this._mdf = true;
                }
            }
        }
    };

    ICompElement.prototype.renderInnerContent = function () {
        var i,
            len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            if (this.completeLayers || this.elements[i]) {
                this.elements[i].renderFrame();
            }
        }
    };

    ICompElement.prototype.setElements = function (elems) {
        this.elements = elems;
    };

    ICompElement.prototype.getElements = function () {
        return this.elements;
    };

    ICompElement.prototype.destroyElements = function () {
        var i,
            len = this.layers.length;
        for (i = 0; i < len; i += 1) {
            if (this.elements[i]) {
                this.elements[i].destroy();
            }
        }
    };

    ICompElement.prototype.destroy = function () {
        this.destroyElements();
        this.destroyBaseElement();
    };

    function IImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
        this.sourceRect = { top: 0, left: 0, width: this.assetData.w, height: this.assetData.h };
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);

    IImageElement.prototype.createContent = function () {

        var assetPath = this.globalData.getAssetsPath(this.assetData);

        this.innerElem = createNS('image');
        this.innerElem.setAttribute('width', this.assetData.w + "px");
        this.innerElem.setAttribute('height', this.assetData.h + "px");
        this.innerElem.setAttribute('preserveAspectRatio', this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
        this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);

        this.layerElement.appendChild(this.innerElem);
    };

    IImageElement.prototype.sourceRectAtTime = function () {
        return this.sourceRect;
    };
    function ISolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
    }
    extendPrototype([IImageElement], ISolidElement);

    ISolidElement.prototype.createContent = function () {

        var rect = createNS('rect');
        ////rect.style.width = this.data.sw;
        ////rect.style.height = this.data.sh;
        ////rect.style.fill = this.data.sc;
        rect.setAttribute('width', this.data.sw);
        rect.setAttribute('height', this.data.sh);
        rect.setAttribute('fill', this.data.sc);
        this.layerElement.appendChild(rect);
    };
    function SVGCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = true;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        //this.layerElement = createNS('g');
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : { _placeholder: true };
    }

    extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);
    function SVGTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.renderType = 'svg';
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextElement);

    SVGTextElement.prototype.createContent = function () {

        if (this.data.singleShape && !this.globalData.fontManager.chars) {
            this.textContainer = createNS('text');
        }
    };

    SVGTextElement.prototype.buildTextContents = function (textArray) {
        var i = 0,
            len = textArray.length;
        var textContents = [],
            currentTextContent = '';
        while (i < len) {
            if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
                textContents.push(currentTextContent);
                currentTextContent = '';
            } else {
                currentTextContent += textArray[i];
            }
            i += 1;
        }
        textContents.push(currentTextContent);
        return textContents;
    };

    SVGTextElement.prototype.buildNewText = function () {
        var i, len;

        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
        if (documentData.fc) {
            this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
        } else {
            this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
        }
        if (documentData.sc) {
            this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
            this.layerElement.setAttribute('stroke-width', documentData.sw);
        }
        this.layerElement.setAttribute('font-size', documentData.finalSize);
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (fontData.fClass) {
            this.layerElement.setAttribute('class', fontData.fClass);
        } else {
            this.layerElement.setAttribute('font-family', fontData.fFamily);
            var fWeight = documentData.fWeight,
                fStyle = documentData.fStyle;
            this.layerElement.setAttribute('font-style', fStyle);
            this.layerElement.setAttribute('font-weight', fWeight);
        }
        this.layerElement.setAttribute('arial-label', documentData.t);

        var letters = documentData.l || [];
        var usesGlyphs = !!this.globalData.fontManager.chars;
        len = letters.length;

        var tSpan;
        var matrixHelper = this.mHelper;
        var shapes,
            shapeStr = '',
            singleShape = this.data.singleShape;
        var xPos = 0,
            yPos = 0,
            firstLine = true;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        if (singleShape && !usesGlyphs && !documentData.sz) {
            var tElement = this.textContainer;
            var justify = 'start';
            switch (documentData.j) {
                case 1:
                    justify = 'end';
                    break;
                case 2:
                    justify = 'middle';
                    break;
            }
            tElement.setAttribute('text-anchor', justify);
            tElement.setAttribute('letter-spacing', trackingOffset);
            var textContent = this.buildTextContents(documentData.finalText);
            len = textContent.length;
            yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
            for (i = 0; i < len; i += 1) {
                tSpan = this.textSpans[i] || createNS('tspan');
                tSpan.textContent = textContent[i];
                tSpan.setAttribute('x', 0);
                tSpan.setAttribute('y', yPos);
                tSpan.style.display = 'inherit';
                tElement.appendChild(tSpan);
                this.textSpans[i] = tSpan;
                yPos += documentData.finalLineHeight;
            }

            this.layerElement.appendChild(tElement);
        } else {
            var cachedSpansLength = this.textSpans.length;
            var shapeData, charData;
            for (i = 0; i < len; i += 1) {
                if (!usesGlyphs || !singleShape || i === 0) {
                    tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs ? 'path' : 'text');
                    if (cachedSpansLength <= i) {
                        tSpan.setAttribute('stroke-linecap', 'butt');
                        tSpan.setAttribute('stroke-linejoin', 'round');
                        tSpan.setAttribute('stroke-miterlimit', '4');
                        this.textSpans[i] = tSpan;
                        this.layerElement.appendChild(tSpan);
                    }
                    tSpan.style.display = 'inherit';
                }

                matrixHelper.reset();
                matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                if (singleShape) {
                    if (letters[i].n) {
                        xPos = -trackingOffset;
                        yPos += documentData.yOffset;
                        yPos += firstLine ? 1 : 0;
                        firstLine = false;
                    }
                    this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                    xPos += letters[i].l || 0;
                    //xPos += letters[i].val === ' ' ? 0 : trackingOffset;
                    xPos += trackingOffset;
                }
                if (usesGlyphs) {
                    charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                    shapeData = charData && charData.data || {};
                    shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
                    if (!singleShape) {
                        tSpan.setAttribute('d', this.createPathShape(matrixHelper, shapes));
                    } else {
                        shapeStr += this.createPathShape(matrixHelper, shapes);
                    }
                } else {
                    if (singleShape) {
                        tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
                    }
                    tSpan.textContent = letters[i].val;
                    tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
                }
                //
            }
            if (singleShape && tSpan) {
                tSpan.setAttribute('d', shapeStr);
            }
        }
        while (i < this.textSpans.length) {
            this.textSpans[i].style.display = 'none';
            i += 1;
        }

        this._sizeChanged = true;
    };

    SVGTextElement.prototype.sourceRectAtTime = function (time) {
        this.prepareFrame(this.comp.renderedFrame - this.data.st);
        this.renderInnerContent();
        if (this._sizeChanged) {
            this._sizeChanged = false;
            var textBox = this.layerElement.getBBox();
            this.bbox = {
                top: textBox.y,
                left: textBox.x,
                width: textBox.width,
                height: textBox.height
            };
        }
        return this.bbox;
    };

    SVGTextElement.prototype.renderInnerContent = function () {

        if (!this.data.singleShape) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
                this._sizeChanged = true;
                var i, len;
                var renderedLetters = this.textAnimator.renderedLetters;

                var letters = this.textProperty.currentData.l;

                len = letters.length;
                var renderedLetter, textSpan;
                for (i = 0; i < len; i += 1) {
                    if (letters[i].n) {
                        continue;
                    }
                    renderedLetter = renderedLetters[i];
                    textSpan = this.textSpans[i];
                    if (renderedLetter._mdf.m) {
                        textSpan.setAttribute('transform', renderedLetter.m);
                    }
                    if (renderedLetter._mdf.o) {
                        textSpan.setAttribute('opacity', renderedLetter.o);
                    }
                    if (renderedLetter._mdf.sw) {
                        textSpan.setAttribute('stroke-width', renderedLetter.sw);
                    }
                    if (renderedLetter._mdf.sc) {
                        textSpan.setAttribute('stroke', renderedLetter.sc);
                    }
                    if (renderedLetter._mdf.fc) {
                        textSpan.setAttribute('fill', renderedLetter.fc);
                    }
                }
            }
        }
    };
    function SVGShapeElement(data, globalData, comp) {
        //List of drawable elements
        this.shapes = [];
        // Full shape data
        this.shapesData = data.shapes;
        //List of styles that will be applied to shapes
        this.stylesList = [];
        //List of modifiers that will be applied to shapes
        this.shapeModifiers = [];
        //List of items in shape tree
        this.itemsData = [];
        //List of items in previous shape tree
        this.processedElements = [];
        // List of animated components
        this.animatedContents = [];
        this.initElement(data, globalData, comp);
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created
        this.prevViewData = [];
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
    }

    extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);

    SVGShapeElement.prototype.initSecondaryElement = function () {};

    SVGShapeElement.prototype.identityMatrix = new Matrix();

    SVGShapeElement.prototype.buildExpressionInterface = function () {};

    SVGShapeElement.prototype.createContent = function () {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
    };

    /*
    This method searches for multiple shapes that affect a single element and one of them is animated
    */
    SVGShapeElement.prototype.filterUniqueShapes = function () {
        var i,
            len = this.shapes.length,
            shape;
        var j,
            jLen = this.stylesList.length;
        var style,
            count = 0;
        var tempShapes = [];
        var areAnimated = false;
        for (j = 0; j < jLen; j += 1) {
            style = this.stylesList[j];
            areAnimated = false;
            tempShapes.length = 0;
            for (i = 0; i < len; i += 1) {
                shape = this.shapes[i];
                if (shape.styles.indexOf(style) !== -1) {
                    tempShapes.push(shape);
                    areAnimated = shape._isAnimated || areAnimated;
                }
            }
            if (tempShapes.length > 1 && areAnimated) {
                this.setShapesAsAnimated(tempShapes);
            }
        }
    };

    SVGShapeElement.prototype.setShapesAsAnimated = function (shapes) {
        var i,
            len = shapes.length;
        for (i = 0; i < len; i += 1) {
            shapes[i].setAsAnimated();
        }
    };

    SVGShapeElement.prototype.createStyleElement = function (data, level) {
        //TODO: prevent drawing of hidden styles
        var elementData;
        var styleOb = new SVGStyleData(data, level);

        var pathElement = styleOb.pElem;
        if (data.ty === 'st') {
            elementData = new SVGStrokeStyleData(this, data, styleOb);
        } else if (data.ty === 'fl') {
            elementData = new SVGFillStyleData(this, data, styleOb);
        } else if (data.ty === 'gf' || data.ty === 'gs') {
            var gradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
            elementData = new gradientConstructor(this, data, styleOb);
            this.globalData.defs.appendChild(elementData.gf);
            if (elementData.maskId) {
                this.globalData.defs.appendChild(elementData.ms);
                this.globalData.defs.appendChild(elementData.of);
                pathElement.setAttribute('mask', 'url(' + locationHref + '#' + elementData.maskId + ')');
            }
        }

        if (data.ty === 'st' || data.ty === 'gs') {
            pathElement.setAttribute('stroke-linecap', this.lcEnum[data.lc] || 'round');
            pathElement.setAttribute('stroke-linejoin', this.ljEnum[data.lj] || 'round');
            pathElement.setAttribute('fill-opacity', '0');
            if (data.lj === 1) {
                pathElement.setAttribute('stroke-miterlimit', data.ml);
            }
        }

        if (data.r === 2) {
            pathElement.setAttribute('fill-rule', 'evenodd');
        }

        if (data.ln) {
            pathElement.setAttribute('id', data.ln);
        }
        if (data.cl) {
            pathElement.setAttribute('class', data.cl);
        }
        if (data.bm) {
            pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
        }
        this.stylesList.push(styleOb);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.createGroupElement = function (data) {
        var elementData = new ShapeGroupData();
        if (data.ln) {
            elementData.gr.setAttribute('id', data.ln);
        }
        if (data.cl) {
            elementData.gr.setAttribute('class', data.cl);
        }
        if (data.bm) {
            elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
        }
        return elementData;
    };

    SVGShapeElement.prototype.createTransformElement = function (data, container) {
        var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
        var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.createShapeElement = function (data, ownTransformers, level) {
        var ty = 4;
        if (data.ty === 'rc') {
            ty = 5;
        } else if (data.ty === 'el') {
            ty = 6;
        } else if (data.ty === 'sr') {
            ty = 7;
        }
        var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
        var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        this.addToAnimatedContents(data, elementData);
        return elementData;
    };

    SVGShapeElement.prototype.addToAnimatedContents = function (data, element) {
        var i = 0,
            len = this.animatedContents.length;
        while (i < len) {
            if (this.animatedContents[i].element === element) {
                return;
            }
            i += 1;
        }
        this.animatedContents.push({
            fn: SVGElementsRenderer.createRenderFunction(data),
            element: element,
            data: data
        });
    };

    SVGShapeElement.prototype.setElementStyles = function (elementData) {
        var arr = elementData.styles;
        var j,
            jLen = this.stylesList.length;
        for (j = 0; j < jLen; j += 1) {
            if (!this.stylesList[j].closed) {
                arr.push(this.stylesList[j]);
            }
        }
    };

    SVGShapeElement.prototype.reloadShapes = function () {
        this._isFirstFrame = true;
        var i,
            len = this.itemsData.length;
        for (i = 0; i < len; i += 1) {
            this.prevViewData[i] = this.itemsData[i];
        }
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
        len = this.dynamicProperties.length;
        for (i = 0; i < len; i += 1) {
            this.dynamicProperties[i].getValue();
        }
        this.renderModifiers();
    };

    SVGShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, container, level, transformers, render) {
        var ownTransformers = [].concat(transformers);
        var i,
            len = arr.length - 1;
        var j, jLen;
        var ownStyles = [],
            ownModifiers = [],
            styleOb,
            currentTransform,
            modifier,
            processedPos;
        for (i = len; i >= 0; i -= 1) {
            processedPos = this.searchProcessedElement(arr[i]);
            if (!processedPos) {
                arr[i]._render = render;
            } else {
                itemsData[i] = prevViewData[processedPos - 1];
            }
            if (arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs') {
                if (!processedPos) {
                    itemsData[i] = this.createStyleElement(arr[i], level);
                } else {
                    itemsData[i].style.closed = false;
                }
                if (arr[i]._render) {
                    container.appendChild(itemsData[i].style.pElem);
                }
                ownStyles.push(itemsData[i].style);
            } else if (arr[i].ty == 'gr') {
                if (!processedPos) {
                    itemsData[i] = this.createGroupElement(arr[i]);
                } else {
                    jLen = itemsData[i].it.length;
                    for (j = 0; j < jLen; j += 1) {
                        itemsData[i].prevViewData[j] = itemsData[i].it[j];
                    }
                }
                this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);
                if (arr[i]._render) {
                    container.appendChild(itemsData[i].gr);
                }
            } else if (arr[i].ty == 'tr') {
                if (!processedPos) {
                    itemsData[i] = this.createTransformElement(arr[i], container);
                }
                currentTransform = itemsData[i].transform;
                ownTransformers.push(currentTransform);
            } else if (arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr') {
                if (!processedPos) {
                    itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
                }
                this.setElementStyles(itemsData[i]);
            } else if (arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'ms') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    modifier.init(this, arr[i]);
                    itemsData[i] = modifier;
                    this.shapeModifiers.push(modifier);
                } else {
                    modifier = itemsData[i];
                    modifier.closed = false;
                }
                ownModifiers.push(modifier);
            } else if (arr[i].ty == 'rp') {
                if (!processedPos) {
                    modifier = ShapeModifiers.getModifier(arr[i].ty);
                    itemsData[i] = modifier;
                    modifier.init(this, arr, i, itemsData);
                    this.shapeModifiers.push(modifier);
                    render = false;
                } else {
                    modifier = itemsData[i];
                    modifier.closed = true;
                }
                ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i], i + 1);
        }
        len = ownStyles.length;
        for (i = 0; i < len; i += 1) {
            ownStyles[i].closed = true;
        }
        len = ownModifiers.length;
        for (i = 0; i < len; i += 1) {
            ownModifiers[i].closed = true;
        }
    };

    SVGShapeElement.prototype.renderInnerContent = function () {
        this.renderModifiers();
        var i,
            len = this.stylesList.length;
        for (i = 0; i < len; i += 1) {
            this.stylesList[i].reset();
        }
        this.renderShape();

        for (i = 0; i < len; i += 1) {
            if (this.stylesList[i]._mdf || this._isFirstFrame) {
                if (this.stylesList[i].msElem) {
                    this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d);
                    //Adding M0 0 fixes same mask bug on all browsers
                    this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
                }
                this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
            }
        }
    };

    SVGShapeElement.prototype.renderShape = function () {
        var i,
            len = this.animatedContents.length;
        var animatedContent;
        for (i = 0; i < len; i += 1) {
            animatedContent = this.animatedContents[i];
            if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
                animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
            }
        }
    };

    SVGShapeElement.prototype.destroy = function () {
        this.destroyBaseElement();
        this.shapesData = null;
        this.itemsData = null;
    };

    function SVGTintFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f1');
        filter.appendChild(feColorMatrix);
        feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f2');
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
        if (filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k) {
            var feMerge = createNS('feMerge');
            filter.appendChild(feMerge);
            var feMergeNode;
            feMergeNode = createNS('feMergeNode');
            feMergeNode.setAttribute('in', 'SourceGraphic');
            feMerge.appendChild(feMergeNode);
            feMergeNode = createNS('feMergeNode');
            feMergeNode.setAttribute('in', 'f2');
            feMerge.appendChild(feMergeNode);
        }
    }

    SVGTintFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var colorBlack = this.filterManager.effectElements[0].p.v;
            var colorWhite = this.filterManager.effectElements[1].p.v;
            var opacity = this.filterManager.effectElements[2].p.v / 100;
            this.matrixFilter.setAttribute('values', colorWhite[0] - colorBlack[0] + ' 0 0 0 ' + colorBlack[0] + ' ' + (colorWhite[1] - colorBlack[1]) + ' 0 0 0 ' + colorBlack[1] + ' ' + (colorWhite[2] - colorBlack[2]) + ' 0 0 0 ' + colorBlack[2] + ' 0 0 0 ' + opacity + ' 0');
        }
    };
    function SVGFillFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
    }
    SVGFillFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var color = this.filterManager.effectElements[2].p.v;
            var opacity = this.filterManager.effectElements[6].p.v;
            this.matrixFilter.setAttribute('values', '0 0 0 0 ' + color[0] + ' 0 0 0 0 ' + color[1] + ' 0 0 0 0 ' + color[2] + ' 0 0 0 ' + opacity + ' 0');
        }
    };
    function SVGGaussianBlurEffect(filter, filterManager) {
        // Outset the filter region by 100% on all sides to accommodate blur expansion.
        filter.setAttribute('x', '-100%');
        filter.setAttribute('y', '-100%');
        filter.setAttribute('width', '300%');
        filter.setAttribute('height', '300%');

        this.filterManager = filterManager;
        var feGaussianBlur = createNS('feGaussianBlur');
        filter.appendChild(feGaussianBlur);
        this.feGaussianBlur = feGaussianBlur;
    }

    SVGGaussianBlurEffect.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            // Empirical value, matching AE's blur appearance.
            var kBlurrinessToSigma = 0.3;
            var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;

            // Dimensions mapping:
            //
            //   1 -> horizontal & vertical
            //   2 -> horizontal only
            //   3 -> vertical only
            //
            var dimensions = this.filterManager.effectElements[1].p.v;
            var sigmaX = dimensions == 3 ? 0 : sigma;
            var sigmaY = dimensions == 2 ? 0 : sigma;

            this.feGaussianBlur.setAttribute('stdDeviation', sigmaX + " " + sigmaY);

            // Repeat edges mapping:
            //
            //   0 -> off -> duplicate
            //   1 -> on  -> wrap
            var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? 'wrap' : 'duplicate';
            this.feGaussianBlur.setAttribute('edgeMode', edgeMode);
        }
    };
    function SVGStrokeEffect(elem, filterManager) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.elem = elem;
        this.paths = [];
    }

    SVGStrokeEffect.prototype.initialize = function () {

        var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
        var path, groupPath, i, len;
        if (this.filterManager.effectElements[1].p.v === 1) {
            len = this.elem.maskManager.masksProperties.length;
            i = 0;
        } else {
            i = this.filterManager.effectElements[0].p.v - 1;
            len = i + 1;
        }
        groupPath = createNS('g');
        groupPath.setAttribute('fill', 'none');
        groupPath.setAttribute('stroke-linecap', 'round');
        groupPath.setAttribute('stroke-dashoffset', 1);
        for (i; i < len; i += 1) {
            path = createNS('path');
            groupPath.appendChild(path);
            this.paths.push({ p: path, m: i });
        }
        if (this.filterManager.effectElements[10].p.v === 3) {
            var mask = createNS('mask');
            var id = createElementID();
            mask.setAttribute('id', id);
            mask.setAttribute('mask-type', 'alpha');
            mask.appendChild(groupPath);
            this.elem.globalData.defs.appendChild(mask);
            var g = createNS('g');
            g.setAttribute('mask', 'url(' + locationHref + '#' + id + ')');
            while (elemChildren[0]) {
                g.appendChild(elemChildren[0]);
            }
            this.elem.layerElement.appendChild(g);
            this.masker = mask;
            groupPath.setAttribute('stroke', '#fff');
        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (this.filterManager.effectElements[10].p.v === 2) {
                elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
                while (elemChildren.length) {
                    this.elem.layerElement.removeChild(elemChildren[0]);
                }
            }
            this.elem.layerElement.appendChild(groupPath);
            this.elem.layerElement.removeAttribute('mask');
            groupPath.setAttribute('stroke', '#fff');
        }
        this.initialized = true;
        this.pathMasker = groupPath;
    };

    SVGStrokeEffect.prototype.renderFrame = function (forceRender) {
        if (!this.initialized) {
            this.initialize();
        }
        var i,
            len = this.paths.length;
        var mask, path;
        for (i = 0; i < len; i += 1) {
            if (this.paths[i].m === -1) {
                continue;
            }
            mask = this.elem.maskManager.viewData[this.paths[i].m];
            path = this.paths[i].p;
            if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
                path.setAttribute('d', mask.lastPath);
            }
            if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
                var dasharrayValue;
                if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                    var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100;
                    var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) / 100;
                    var l = path.getTotalLength();
                    dasharrayValue = '0 0 0 ' + l * s + ' ';
                    var lineLength = l * (e - s);
                    var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100;
                    var units = Math.floor(lineLength / segment);
                    var j;
                    for (j = 0; j < units; j += 1) {
                        dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100 + ' ';
                    }
                    dasharrayValue += '0 ' + l * 10 + ' 0 0';
                } else {
                    dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v / 100;
                }
                path.setAttribute('stroke-dasharray', dasharrayValue);
            }
        }
        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.pathMasker.setAttribute('stroke-width', this.filterManager.effectElements[4].p.v * 2);
        }

        if (forceRender || this.filterManager.effectElements[6].p._mdf) {
            this.pathMasker.setAttribute('opacity', this.filterManager.effectElements[6].p.v);
        }
        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (forceRender || this.filterManager.effectElements[3].p._mdf) {
                var color = this.filterManager.effectElements[3].p.v;
                this.pathMasker.setAttribute('stroke', 'rgb(' + bm_floor(color[0] * 255) + ',' + bm_floor(color[1] * 255) + ',' + bm_floor(color[2] * 255) + ')');
            }
        }
    };
    function SVGTritoneFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', 'f1');
        filter.appendChild(feColorMatrix);
        var feComponentTransfer = createNS('feComponentTransfer');
        feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
        filter.appendChild(feComponentTransfer);
        this.matrixFilter = feComponentTransfer;
        var feFuncR = createNS('feFuncR');
        feFuncR.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncR);
        this.feFuncR = feFuncR;
        var feFuncG = createNS('feFuncG');
        feFuncG.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncG);
        this.feFuncG = feFuncG;
        var feFuncB = createNS('feFuncB');
        feFuncB.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncB);
        this.feFuncB = feFuncB;
    }

    SVGTritoneFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var color1 = this.filterManager.effectElements[0].p.v;
            var color2 = this.filterManager.effectElements[1].p.v;
            var color3 = this.filterManager.effectElements[2].p.v;
            var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
            var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
            var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
            this.feFuncR.setAttribute('tableValues', tableR);
            this.feFuncG.setAttribute('tableValues', tableG);
            this.feFuncB.setAttribute('tableValues', tableB);
            //var opacity = this.filterManager.effectElements[2].p.v/100;
            //this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
        }
    };
    function SVGProLevelsFilter(filter, filterManager) {
        this.filterManager = filterManager;
        var effectElements = this.filterManager.effectElements;
        var feComponentTransfer = createNS('feComponentTransfer');
        var feFuncR, feFuncG, feFuncB;

        if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
            this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
        }
        if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
            this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
        }
        if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
            this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
        }
        if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
            this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
        }

        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
            feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
            filter.appendChild(feComponentTransfer);
            feComponentTransfer = createNS('feComponentTransfer');
        }

        if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {

            feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
            filter.appendChild(feComponentTransfer);
            this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
            this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
            this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
        }
    }

    SVGProLevelsFilter.prototype.createFeFunc = function (type, feComponentTransfer) {
        var feFunc = createNS(type);
        feFunc.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFunc);
        return feFunc;
    };

    SVGProLevelsFilter.prototype.getTableValue = function (inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
        var cnt = 0;
        var segments = 256;
        var perc;
        var min = Math.min(inputBlack, inputWhite);
        var max = Math.max(inputBlack, inputWhite);
        var table = Array.call(null, { length: segments });
        var colorValue;
        var pos = 0;
        var outputDelta = outputWhite - outputBlack;
        var inputDelta = inputWhite - inputBlack;
        while (cnt <= 256) {
            perc = cnt / 256;
            if (perc <= min) {
                colorValue = inputDelta < 0 ? outputWhite : outputBlack;
            } else if (perc >= max) {
                colorValue = inputDelta < 0 ? outputBlack : outputWhite;
            } else {
                colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
            }
            table[pos++] = colorValue;
            cnt += 256 / (segments - 1);
        }
        return table.join(' ');
    };

    SVGProLevelsFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            var val, cnt, perc, bezier;
            var effectElements = this.filterManager.effectElements;
            if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
                val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
                this.feFuncRComposed.setAttribute('tableValues', val);
                this.feFuncGComposed.setAttribute('tableValues', val);
                this.feFuncBComposed.setAttribute('tableValues', val);
            }

            if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
                val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
                this.feFuncR.setAttribute('tableValues', val);
            }

            if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
                val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
                this.feFuncG.setAttribute('tableValues', val);
            }

            if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
                val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
                this.feFuncB.setAttribute('tableValues', val);
            }

            if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
                val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
                this.feFuncA.setAttribute('tableValues', val);
            }
        }
    };
    function SVGDropShadowEffect(filter, filterManager) {
        filter.setAttribute('x', '-100%');
        filter.setAttribute('y', '-100%');
        filter.setAttribute('width', '400%');
        filter.setAttribute('height', '400%');
        this.filterManager = filterManager;

        var feGaussianBlur = createNS('feGaussianBlur');
        feGaussianBlur.setAttribute('in', 'SourceAlpha');
        feGaussianBlur.setAttribute('result', 'drop_shadow_1');
        feGaussianBlur.setAttribute('stdDeviation', '0');
        this.feGaussianBlur = feGaussianBlur;
        filter.appendChild(feGaussianBlur);

        var feOffset = createNS('feOffset');
        feOffset.setAttribute('dx', '25');
        feOffset.setAttribute('dy', '0');
        feOffset.setAttribute('in', 'drop_shadow_1');
        feOffset.setAttribute('result', 'drop_shadow_2');
        this.feOffset = feOffset;
        filter.appendChild(feOffset);
        var feFlood = createNS('feFlood');
        feFlood.setAttribute('flood-color', '#00ff00');
        feFlood.setAttribute('flood-opacity', '1');
        feFlood.setAttribute('result', 'drop_shadow_3');
        this.feFlood = feFlood;
        filter.appendChild(feFlood);

        var feComposite = createNS('feComposite');
        feComposite.setAttribute('in', 'drop_shadow_3');
        feComposite.setAttribute('in2', 'drop_shadow_2');
        feComposite.setAttribute('operator', 'in');
        feComposite.setAttribute('result', 'drop_shadow_4');
        filter.appendChild(feComposite);

        var feMerge = createNS('feMerge');
        filter.appendChild(feMerge);
        var feMergeNode;
        feMergeNode = createNS('feMergeNode');
        feMerge.appendChild(feMergeNode);
        feMergeNode = createNS('feMergeNode');
        feMergeNode.setAttribute('in', 'SourceGraphic');
        this.feMergeNode = feMergeNode;
        this.feMerge = feMerge;
        this.originalNodeAdded = false;
        feMerge.appendChild(feMergeNode);
    }

    SVGDropShadowEffect.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
            if (forceRender || this.filterManager.effectElements[4].p._mdf) {
                this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
            }
            if (forceRender || this.filterManager.effectElements[0].p._mdf) {
                var col = this.filterManager.effectElements[0].p.v;
                this.feFlood.setAttribute('flood-color', rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
            }
            if (forceRender || this.filterManager.effectElements[1].p._mdf) {
                this.feFlood.setAttribute('flood-opacity', this.filterManager.effectElements[1].p.v / 255);
            }
            if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
                var distance = this.filterManager.effectElements[3].p.v;
                var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
                var x = distance * Math.cos(angle);
                var y = distance * Math.sin(angle);
                this.feOffset.setAttribute('dx', x);
                this.feOffset.setAttribute('dy', y);
            }
            /*if(forceRender || this.filterManager.effectElements[5].p._mdf){
                if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
                    this.feMerge.removeChild(this.feMergeNode);
                    this.originalNodeAdded = false;
                } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
                    this.feMerge.appendChild(this.feMergeNode);
                    this.originalNodeAdded = true;
                }
            }*/
        }
    };
    var _svgMatteSymbols = [];

    function SVGMatte3Effect(filterElem, filterManager, elem) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.filterElem = filterElem;
        this.elem = elem;
        elem.matteElement = createNS('g');
        elem.matteElement.appendChild(elem.layerElement);
        elem.matteElement.appendChild(elem.transformedElement);
        elem.baseElement = elem.matteElement;
    }

    SVGMatte3Effect.prototype.findSymbol = function (mask) {
        var i = 0,
            len = _svgMatteSymbols.length;
        while (i < len) {
            if (_svgMatteSymbols[i] === mask) {
                return _svgMatteSymbols[i];
            }
            i += 1;
        }
        return null;
    };

    SVGMatte3Effect.prototype.replaceInParent = function (mask, symbolId) {
        var parentNode = mask.layerElement.parentNode;
        if (!parentNode) {
            return;
        }
        var children = parentNode.children;
        var i = 0,
            len = children.length;
        while (i < len) {
            if (children[i] === mask.layerElement) {
                break;
            }
            i += 1;
        }
        var nextChild;
        if (i <= len - 2) {
            nextChild = children[i + 1];
        }
        var useElem = createNS('use');
        useElem.setAttribute('href', '#' + symbolId);
        if (nextChild) {
            parentNode.insertBefore(useElem, nextChild);
        } else {
            parentNode.appendChild(useElem);
        }
    };

    SVGMatte3Effect.prototype.setElementAsMask = function (elem, mask) {
        if (!this.findSymbol(mask)) {
            var symbolId = createElementID();
            var masker = createNS('mask');
            masker.setAttribute('id', mask.layerId);
            masker.setAttribute('mask-type', 'alpha');
            _svgMatteSymbols.push(mask);
            var defs = elem.globalData.defs;
            defs.appendChild(masker);
            var symbol = createNS('symbol');
            symbol.setAttribute('id', symbolId);
            this.replaceInParent(mask, symbolId);
            symbol.appendChild(mask.layerElement);
            defs.appendChild(symbol);
            var useElem = createNS('use');
            useElem.setAttribute('href', '#' + symbolId);
            masker.appendChild(useElem);
            mask.data.hd = false;
            mask.show();
        }
        elem.setMatte(mask.layerId);
    };

    SVGMatte3Effect.prototype.initialize = function () {
        var ind = this.filterManager.effectElements[0].p.v;
        var elements = this.elem.comp.elements;
        var i = 0,
            len = elements.length;
        while (i < len) {
            if (elements[i] && elements[i].data.ind === ind) {
                this.setElementAsMask(this.elem, elements[i]);
            }
            i += 1;
        }
        this.initialized = true;
    };

    SVGMatte3Effect.prototype.renderFrame = function () {
        if (!this.initialized) {
            this.initialize();
        }
    };
    function SVGEffects(elem) {
        var i,
            len = elem.data.ef ? elem.data.ef.length : 0;
        var filId = createElementID();
        var fil = filtersFactory.createFilter(filId);
        var count = 0;
        this.filters = [];
        var filterManager;
        for (i = 0; i < len; i += 1) {
            filterManager = null;
            if (elem.data.ef[i].ty === 20) {
                count += 1;
                filterManager = new SVGTintFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 21) {
                count += 1;
                filterManager = new SVGFillFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 22) {
                filterManager = new SVGStrokeEffect(elem, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 23) {
                count += 1;
                filterManager = new SVGTritoneFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 24) {
                count += 1;
                filterManager = new SVGProLevelsFilter(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 25) {
                count += 1;
                filterManager = new SVGDropShadowEffect(fil, elem.effectsManager.effectElements[i]);
            } else if (elem.data.ef[i].ty === 28) {
                //count += 1;
                filterManager = new SVGMatte3Effect(fil, elem.effectsManager.effectElements[i], elem);
            } else if (elem.data.ef[i].ty === 29) {
                count += 1;
                filterManager = new SVGGaussianBlurEffect(fil, elem.effectsManager.effectElements[i]);
            }
            if (filterManager) {
                this.filters.push(filterManager);
            }
        }
        if (count) {
            elem.globalData.defs.appendChild(fil);
            elem.layerElement.setAttribute('filter', 'url(' + locationHref + '#' + filId + ')');
        }
        if (this.filters.length) {
            elem.addRenderableComponent(this);
        }
    }

    SVGEffects.prototype.renderFrame = function (_isFirstFrame) {
        var i,
            len = this.filters.length;
        for (i = 0; i < len; i += 1) {
            this.filters[i].renderFrame(_isFirstFrame);
        }
    };
    function CVEffects() {}
    CVEffects.prototype.renderFrame = function () {};
    function HBaseElement(data, globalData, comp) {}
    HBaseElement.prototype = {
        checkBlendMode: function checkBlendMode() {},
        initRendererElement: function initRendererElement() {
            this.baseElement = createTag(this.data.tg || 'div');
            if (this.data.hasMask) {
                this.svgElement = createNS('svg');
                this.layerElement = createNS('g');
                this.maskedElement = this.layerElement;
                this.svgElement.appendChild(this.layerElement);
                this.baseElement.appendChild(this.svgElement);
            } else {
                this.layerElement = this.baseElement;
            }
            styleDiv(this.baseElement);
        },
        createContainerElements: function createContainerElements() {
            this.renderableEffectsManager = new CVEffects(this);
            this.transformedElement = this.baseElement;
            this.maskedElement = this.layerElement;
            if (this.data.ln) {
                this.layerElement.setAttribute('id', this.data.ln);
            }
            if (this.data.cl) {
                this.layerElement.setAttribute('class', this.data.cl);
            }
            if (this.data.bm !== 0) {
                this.setBlendMode();
            }
        },
        renderElement: function renderElement() {
            if (this.finalTransform._matMdf) {
                this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS();
            }
            if (this.finalTransform._opMdf) {
                this.transformedElement.style.opacity = this.finalTransform.mProp.o.v;
            }
        },
        renderFrame: function renderFrame() {
            //If it is exported as hidden (data.hd === true) no need to render
            //If it is not visible no need to render
            if (this.data.hd || this.hidden) {
                return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderElement();
            this.renderInnerContent();
            if (this._isFirstFrame) {
                this._isFirstFrame = false;
            }
        },
        destroy: function destroy() {
            this.layerElement = null;
            this.transformedElement = null;
            if (this.matteElement) {
                this.matteElement = null;
            }
            if (this.maskManager) {
                this.maskManager.destroy();
                this.maskManager = null;
            }
        },
        createRenderableComponents: function createRenderableComponents() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
        },
        addEffects: function addEffects() {},
        setMatte: function setMatte() {}
    };
    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
    HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting;
    function HSolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);

    HSolidElement.prototype.createContent = function () {
        var rect;
        if (this.data.hasMask) {
            rect = createNS('rect');
            rect.setAttribute('width', this.data.sw);
            rect.setAttribute('height', this.data.sh);
            rect.setAttribute('fill', this.data.sc);
            this.svgElement.setAttribute('width', this.data.sw);
            this.svgElement.setAttribute('height', this.data.sh);
        } else {
            rect = createTag('div');
            rect.style.width = this.data.sw + 'px';
            rect.style.height = this.data.sh + 'px';
            rect.style.backgroundColor = this.data.sc;
        }
        this.layerElement.appendChild(rect);
    };

    function HCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = !data.hasMask;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : { _placeholder: true };
    }

    extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

    HCompElement.prototype.createContainerElements = function () {
        this._createBaseContainerElements();
        //divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
        if (this.data.hasMask) {
            this.svgElement.setAttribute('width', this.data.w);
            this.svgElement.setAttribute('height', this.data.h);
            this.transformedElement = this.baseElement;
        } else {
            this.transformedElement = this.layerElement;
        }
    };

    HCompElement.prototype.addTo3dContainer = function (elem, pos) {
        var j = 0;
        var nextElement;
        while (j < pos) {
            if (this.elements[j] && this.elements[j].getBaseElement) {
                nextElement = this.elements[j].getBaseElement();
            }
            j += 1;
        }
        if (nextElement) {
            this.layerElement.insertBefore(elem, nextElement);
        } else {
            this.layerElement.appendChild(elem);
        }
    };

    function HShapeElement(data, globalData, comp) {
        //List of drawable elements
        this.shapes = [];
        // Full shape data
        this.shapesData = data.shapes;
        //List of styles that will be applied to shapes
        this.stylesList = [];
        //List of modifiers that will be applied to shapes
        this.shapeModifiers = [];
        //List of items in shape tree
        this.itemsData = [];
        //List of items in previous shape tree
        this.processedElements = [];
        // List of animated components
        this.animatedContents = [];
        this.shapesContainer = createNS('g');
        this.initElement(data, globalData, comp);
        //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created
        this.prevViewData = [];
        this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
        };
    }
    extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

    HShapeElement.prototype.createContent = function () {
        var cont;
        this.baseElement.style.fontSize = 0;
        if (this.data.hasMask) {
            this.layerElement.appendChild(this.shapesContainer);
            cont = this.svgElement;
        } else {
            cont = createNS('svg');
            var size = this.comp.data ? this.comp.data : this.globalData.compSize;
            cont.setAttribute('width', size.w);
            cont.setAttribute('height', size.h);
            cont.appendChild(this.shapesContainer);
            this.layerElement.appendChild(cont);
        }

        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
        this.filterUniqueShapes();
        this.shapeCont = cont;
    };

    HShapeElement.prototype.getTransformedPoint = function (transformers, point) {
        var i,
            len = transformers.length;
        for (i = 0; i < len; i += 1) {
            point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
        }
        return point;
    };

    HShapeElement.prototype.calculateShapeBoundingBox = function (item, boundingBox) {
        var shape = item.sh.v;
        var transformers = item.transformers;
        var i,
            len = shape._length,
            vPoint,
            oPoint,
            nextIPoint,
            nextVPoint,
            bounds;
        if (len <= 1) {
            return;
        }
        for (i = 0; i < len - 1; i += 1) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
        if (shape.c) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
    };

    HShapeElement.prototype.checkBounds = function (vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
        this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
        var bounds = this.shapeBoundingBox;
        boundingBox.x = bm_min(bounds.left, boundingBox.x);
        boundingBox.xMax = bm_max(bounds.right, boundingBox.xMax);
        boundingBox.y = bm_min(bounds.top, boundingBox.y);
        boundingBox.yMax = bm_max(bounds.bottom, boundingBox.yMax);
    };

    HShapeElement.prototype.shapeBoundingBox = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
    };

    HShapeElement.prototype.tempBoundingBox = {
        x: 0,
        xMax: 0,
        y: 0,
        yMax: 0,
        width: 0,
        height: 0
    };

    HShapeElement.prototype.getBoundsOfCurve = function (p0, p1, p2, p3) {

        var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];

        for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {

            b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
            a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
            c = 3 * p1[i] - 3 * p0[i];

            b = b | 0;
            a = a | 0;
            c = c | 0;

            if (a === 0) {

                if (b === 0) {
                    continue;
                }

                t = -c / b;

                if (0 < t && t < 1) {
                    bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
                }
                continue;
            }

            b2ac = b * b - 4 * c * a;

            if (b2ac < 0) {
                continue;
            }

            t1 = (-b + bm_sqrt(b2ac)) / (2 * a);
            if (0 < t1 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));

            t2 = (-b - bm_sqrt(b2ac)) / (2 * a);
            if (0 < t2 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));
        }

        this.shapeBoundingBox.left = bm_min.apply(null, bounds[0]);
        this.shapeBoundingBox.top = bm_min.apply(null, bounds[1]);
        this.shapeBoundingBox.right = bm_max.apply(null, bounds[0]);
        this.shapeBoundingBox.bottom = bm_max.apply(null, bounds[1]);
    };

    HShapeElement.prototype.calculateF = function (t, p0, p1, p2, p3, i) {
        return bm_pow(1 - t, 3) * p0[i] + 3 * bm_pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * bm_pow(t, 2) * p2[i] + bm_pow(t, 3) * p3[i];
    };

    HShapeElement.prototype.calculateBoundingBox = function (itemsData, boundingBox) {
        var i,
            len = itemsData.length,
            path;
        for (i = 0; i < len; i += 1) {
            if (itemsData[i] && itemsData[i].sh) {
                this.calculateShapeBoundingBox(itemsData[i], boundingBox);
            } else if (itemsData[i] && itemsData[i].it) {
                this.calculateBoundingBox(itemsData[i].it, boundingBox);
            }
        }
    };

    HShapeElement.prototype.currentBoxContains = function (box) {
        return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
    };

    HShapeElement.prototype.renderInnerContent = function () {
        this._renderShapeFrame();

        if (!this.hidden && (this._isFirstFrame || this._mdf)) {
            var tempBoundingBox = this.tempBoundingBox;
            var max = 999999;
            tempBoundingBox.x = max;
            tempBoundingBox.xMax = -max;
            tempBoundingBox.y = max;
            tempBoundingBox.yMax = -max;
            this.calculateBoundingBox(this.itemsData, tempBoundingBox);
            tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
            tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
            //var tempBoundingBox = this.shapeCont.getBBox();
            if (this.currentBoxContains(tempBoundingBox)) {
                return;
            }
            var changed = false;
            if (this.currentBBox.w !== tempBoundingBox.width) {
                this.currentBBox.w = tempBoundingBox.width;
                this.shapeCont.setAttribute('width', tempBoundingBox.width);
                changed = true;
            }
            if (this.currentBBox.h !== tempBoundingBox.height) {
                this.currentBBox.h = tempBoundingBox.height;
                this.shapeCont.setAttribute('height', tempBoundingBox.height);
                changed = true;
            }
            if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
                this.currentBBox.w = tempBoundingBox.width;
                this.currentBBox.h = tempBoundingBox.height;
                this.currentBBox.x = tempBoundingBox.x;
                this.currentBBox.y = tempBoundingBox.y;

                this.shapeCont.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            }
        }
    };
    function HTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.textPaths = [];
        this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
        };
        this.renderType = 'svg';
        this.isMasked = false;
        this.initElement(data, globalData, comp);
    }
    extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);

    HTextElement.prototype.createContent = function () {
        this.isMasked = this.checkMasks();
        if (this.isMasked) {
            this.renderType = 'svg';
            this.compW = this.comp.data.w;
            this.compH = this.comp.data.h;
            this.svgElement.setAttribute('width', this.compW);
            this.svgElement.setAttribute('height', this.compH);
            var g = createNS('g');
            this.maskedElement.appendChild(g);
            this.innerElem = g;
        } else {
            this.renderType = 'html';
            this.innerElem = this.layerElement;
        }

        this.checkParenting();
    };

    HTextElement.prototype.buildNewText = function () {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var innerElemStyle = this.innerElem.style;
        innerElemStyle.color = innerElemStyle.fill = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
        if (documentData.sc) {
            innerElemStyle.stroke = this.buildColor(documentData.sc);
            innerElemStyle.strokeWidth = documentData.sw + 'px';
        }
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        if (!this.globalData.fontManager.chars) {
            innerElemStyle.fontSize = documentData.finalSize + 'px';
            innerElemStyle.lineHeight = documentData.finalSize + 'px';
            if (fontData.fClass) {
                this.innerElem.className = fontData.fClass;
            } else {
                innerElemStyle.fontFamily = fontData.fFamily;
                var fWeight = documentData.fWeight,
                    fStyle = documentData.fStyle;
                innerElemStyle.fontStyle = fStyle;
                innerElemStyle.fontWeight = fWeight;
            }
        }
        var i, len;

        var letters = documentData.l;
        len = letters.length;
        var tSpan, tParent, tCont;
        var matrixHelper = this.mHelper;
        var shapes,
            shapeStr = '';
        var cnt = 0;
        for (i = 0; i < len; i += 1) {
            if (this.globalData.fontManager.chars) {
                if (!this.textPaths[cnt]) {
                    tSpan = createNS('path');
                    tSpan.setAttribute('stroke-linecap', 'butt');
                    tSpan.setAttribute('stroke-linejoin', 'round');
                    tSpan.setAttribute('stroke-miterlimit', '4');
                } else {
                    tSpan = this.textPaths[cnt];
                }
                if (!this.isMasked) {
                    if (this.textSpans[cnt]) {
                        tParent = this.textSpans[cnt];
                        tCont = tParent.children[0];
                    } else {

                        tParent = createTag('div');
                        tParent.style.lineHeight = 0;
                        tCont = createNS('svg');
                        tCont.appendChild(tSpan);
                        styleDiv(tParent);
                    }
                }
            } else {
                if (!this.isMasked) {
                    if (this.textSpans[cnt]) {
                        tParent = this.textSpans[cnt];
                        tSpan = this.textPaths[cnt];
                    } else {
                        tParent = createTag('span');
                        styleDiv(tParent);
                        tSpan = createTag('span');
                        styleDiv(tSpan);
                        tParent.appendChild(tSpan);
                    }
                } else {
                    tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
                }
            }
            //tSpan.setAttribute('visibility', 'hidden');
            if (this.globalData.fontManager.chars) {
                var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                var shapeData;
                if (charData) {
                    shapeData = charData.data;
                } else {
                    shapeData = null;
                }
                matrixHelper.reset();
                if (shapeData && shapeData.shapes) {
                    shapes = shapeData.shapes[0].it;
                    matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                    shapeStr = this.createPathShape(matrixHelper, shapes);
                    tSpan.setAttribute('d', shapeStr);
                }
                if (!this.isMasked) {
                    this.innerElem.appendChild(tParent);
                    if (shapeData && shapeData.shapes) {

                        //document.body.appendChild is needed to get exact measure of shape
                        document.body.appendChild(tCont);
                        var boundingBox = tCont.getBBox();
                        tCont.setAttribute('width', boundingBox.width + 2);
                        tCont.setAttribute('height', boundingBox.height + 2);
                        tCont.setAttribute('viewBox', boundingBox.x - 1 + ' ' + (boundingBox.y - 1) + ' ' + (boundingBox.width + 2) + ' ' + (boundingBox.height + 2));
                        tCont.style.transform = tCont.style.webkitTransform = 'translate(' + (boundingBox.x - 1) + 'px,' + (boundingBox.y - 1) + 'px)';

                        letters[i].yOffset = boundingBox.y - 1;
                    } else {
                        tCont.setAttribute('width', 1);
                        tCont.setAttribute('height', 1);
                    }
                    tParent.appendChild(tCont);
                } else {
                    this.innerElem.appendChild(tSpan);
                }
            } else {
                tSpan.textContent = letters[i].val;
                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
                if (!this.isMasked) {
                    this.innerElem.appendChild(tParent);
                    //
                    tSpan.style.transform = tSpan.style.webkitTransform = 'translate3d(0,' + -documentData.finalSize / 1.2 + 'px,0)';
                } else {
                    this.innerElem.appendChild(tSpan);
                }
            }
            //
            if (!this.isMasked) {
                this.textSpans[cnt] = tParent;
            } else {
                this.textSpans[cnt] = tSpan;
            }
            this.textSpans[cnt].style.display = 'block';
            this.textPaths[cnt] = tSpan;
            cnt += 1;
        }
        while (cnt < this.textSpans.length) {
            this.textSpans[cnt].style.display = 'none';
            cnt += 1;
        }
    };

    HTextElement.prototype.renderInnerContent = function () {

        if (this.data.singleShape) {
            if (!this._isFirstFrame && !this.lettersChangedFlag) {
                return;
            } else {
                // Todo Benchmark if using this is better than getBBox
                if (this.isMasked && this.finalTransform._matMdf) {
                    this.svgElement.setAttribute('viewBox', -this.finalTransform.mProp.p.v[0] + ' ' + -this.finalTransform.mProp.p.v[1] + ' ' + this.compW + ' ' + this.compH);
                    this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
                }
            }
        }

        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
            return;
        }
        var i,
            len,
            count = 0;
        var renderedLetters = this.textAnimator.renderedLetters;

        var letters = this.textProperty.currentData.l;

        len = letters.length;
        var renderedLetter, textSpan, textPath;
        for (i = 0; i < len; i += 1) {
            if (letters[i].n) {
                count += 1;
                continue;
            }
            textSpan = this.textSpans[i];
            textPath = this.textPaths[i];
            renderedLetter = renderedLetters[count];
            count += 1;
            if (renderedLetter._mdf.m) {
                if (!this.isMasked) {
                    textSpan.style.transform = textSpan.style.webkitTransform = renderedLetter.m;
                } else {
                    textSpan.setAttribute('transform', renderedLetter.m);
                }
            }
            ////textSpan.setAttribute('opacity',renderedLetter.o);
            textSpan.style.opacity = renderedLetter.o;
            if (renderedLetter.sw && renderedLetter._mdf.sw) {
                textPath.setAttribute('stroke-width', renderedLetter.sw);
            }
            if (renderedLetter.sc && renderedLetter._mdf.sc) {
                textPath.setAttribute('stroke', renderedLetter.sc);
            }
            if (renderedLetter.fc && renderedLetter._mdf.fc) {
                textPath.setAttribute('fill', renderedLetter.fc);
                textPath.style.color = renderedLetter.fc;
            }
        }

        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
            var boundingBox = this.innerElem.getBBox();

            if (this.currentBBox.w !== boundingBox.width) {
                this.currentBBox.w = boundingBox.width;
                this.svgElement.setAttribute('width', boundingBox.width);
            }
            if (this.currentBBox.h !== boundingBox.height) {
                this.currentBBox.h = boundingBox.height;
                this.svgElement.setAttribute('height', boundingBox.height);
            }

            var margin = 1;
            if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
                this.currentBBox.w = boundingBox.width + margin * 2;
                this.currentBBox.h = boundingBox.height + margin * 2;
                this.currentBBox.x = boundingBox.x - margin;
                this.currentBBox.y = boundingBox.y - margin;

                this.svgElement.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
                this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            }
        }
    };
    function HImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
    }

    extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);

    HImageElement.prototype.createContent = function () {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        var img = new Image();

        if (this.data.hasMask) {
            this.imageElem = createNS('image');
            this.imageElem.setAttribute('width', this.assetData.w + "px");
            this.imageElem.setAttribute('height', this.assetData.h + "px");
            this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
            this.layerElement.appendChild(this.imageElem);
            this.baseElement.setAttribute('width', this.assetData.w);
            this.baseElement.setAttribute('height', this.assetData.h);
        } else {
            this.layerElement.appendChild(img);
        }
        img.src = assetPath;
        if (this.data.ln) {
            this.baseElement.setAttribute('id', this.data.ln);
        }
    };
    function HCameraElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initHierarchy();
        var getProp = PropertyFactory.getProp;
        this.pe = getProp(this, data.pe, 0, 0, this);
        if (data.ks.p.s) {
            this.px = getProp(this, data.ks.p.x, 1, 0, this);
            this.py = getProp(this, data.ks.p.y, 1, 0, this);
            this.pz = getProp(this, data.ks.p.z, 1, 0, this);
        } else {
            this.p = getProp(this, data.ks.p, 1, 0, this);
        }
        if (data.ks.a) {
            this.a = getProp(this, data.ks.a, 1, 0, this);
        }
        if (data.ks.or.k.length && data.ks.or.k[0].to) {
            var i,
                len = data.ks.or.k.length;
            for (i = 0; i < len; i += 1) {
                data.ks.or.k[i].to = null;
                data.ks.or.k[i].ti = null;
            }
        }
        this.or = getProp(this, data.ks.or, 1, degToRads, this);
        this.or.sh = true;
        this.rx = getProp(this, data.ks.rx, 0, degToRads, this);
        this.ry = getProp(this, data.ks.ry, 0, degToRads, this);
        this.rz = getProp(this, data.ks.rz, 0, degToRads, this);
        this.mat = new Matrix();
        this._prevMat = new Matrix();
        this._isFirstFrame = true;

        // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
        this.finalTransform = {
            mProp: this
        };
    }
    extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

    HCameraElement.prototype.setup = function () {
        var i,
            len = this.comp.threeDElements.length,
            comp;
        for (i = 0; i < len; i += 1) {
            //[perspectiveElem,container]
            comp = this.comp.threeDElements[i];
            if (comp.type === '3d') {
                comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v + 'px';
                comp.container.style.transformOrigin = comp.container.style.mozTransformOrigin = comp.container.style.webkitTransformOrigin = "0px 0px 0px";
                comp.perspectiveElem.style.transform = comp.perspectiveElem.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
            }
        }
    };

    HCameraElement.prototype.createElements = function () {};

    HCameraElement.prototype.hide = function () {};

    HCameraElement.prototype.renderFrame = function () {
        var _mdf = this._isFirstFrame;
        var i, len;
        if (this.hierarchy) {
            len = this.hierarchy.length;
            for (i = 0; i < len; i += 1) {
                _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
            }
        }
        if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
            this.mat.reset();

            if (this.hierarchy) {
                var mat;
                len = this.hierarchy.length - 1;
                for (i = len; i >= 0; i -= 1) {
                    /*mat = this.hierarchy[i].finalTransform.mProp.v.props;
                    console.log(mat)
                    this.mat.transform(-mat[0],-mat[1],-mat[2],-mat[3],-mat[4],-mat[5],-mat[6],-mat[7],-mat[8],-mat[9],-mat[10],-mat[11],-mat[12],-mat[13],-mat[14],mat[15]);
                    console.log(this.mat.props)*/
                    var mTransf = this.hierarchy[i].finalTransform.mProp;
                    this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
                    this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
                    this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
                    this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
                    this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
                }
            }

            if (this.p) {
                this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
            } else {
                this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
            }
            if (this.a) {
                var diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
                var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
                //var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
                var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
                var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
                var m_rotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
                var m_rotationY = Math.atan2(lookDir[0], -lookDir[2]);
                this.mat.rotateY(m_rotationY).rotateX(-m_rotationX);
            }
            this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
            this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
            this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
            this.mat.translate(0, 0, this.pe.v);

            var hasMatrixChanged = !this._prevMat.equals(this.mat);
            if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
                len = this.comp.threeDElements.length;
                var comp;
                for (i = 0; i < len; i += 1) {
                    comp = this.comp.threeDElements[i];
                    if (comp.type === '3d') {
                        if (hasMatrixChanged) {
                            comp.container.style.transform = comp.container.style.webkitTransform = this.mat.toCSS();
                        }
                        if (this.pe._mdf) {
                            comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v + 'px';
                        }
                    }
                }
                this.mat.clone(this._prevMat);
            }
        }
        this._isFirstFrame = false;
    };

    HCameraElement.prototype.prepareFrame = function (num) {
        this.prepareProperties(num, true);
    };

    HCameraElement.prototype.destroy = function () {};
    HCameraElement.prototype.getBaseElement = function () {
        return null;
    };
    function HEffects() {}
    HEffects.prototype.renderFrame = function () {};
    var animationManager = function () {
        var moduleOb = {};
        var registeredAnimations = [];
        var initTime = 0;
        var len = 0;
        var playingAnimationsNum = 0;
        var _stopped = true;
        var _isFrozen = false;

        function removeElement(ev) {
            var i = 0;
            var animItem = ev.target;
            while (i < len) {
                if (registeredAnimations[i].animation === animItem) {
                    registeredAnimations.splice(i, 1);
                    i -= 1;
                    len -= 1;
                    if (!animItem.isPaused) {
                        subtractPlayingCount();
                    }
                }
                i += 1;
            }
        }

        function registerAnimation(element, animationData) {
            if (!element) {
                return null;
            }
            var i = 0;
            while (i < len) {
                if (registeredAnimations[i].elem == element && registeredAnimations[i].elem !== null) {
                    return registeredAnimations[i].animation;
                }
                i += 1;
            }
            var animItem = new AnimationItem();
            setupAnimation(animItem, element);
            animItem.setData(element, animationData);
            return animItem;
        }

        function getRegisteredAnimations() {
            var i,
                len = registeredAnimations.length;
            var animations = [];
            for (i = 0; i < len; i += 1) {
                animations.push(registeredAnimations[i].animation);
            }
            return animations;
        }

        function addPlayingCount() {
            playingAnimationsNum += 1;
            activate();
        }

        function subtractPlayingCount() {
            playingAnimationsNum -= 1;
        }

        function setupAnimation(animItem, element) {
            animItem.addEventListener('destroy', removeElement);
            animItem.addEventListener('_active', addPlayingCount);
            animItem.addEventListener('_idle', subtractPlayingCount);
            registeredAnimations.push({ elem: element, animation: animItem });
            len += 1;
        }

        function loadAnimation(params) {
            var animItem = new AnimationItem();
            setupAnimation(animItem, null);
            animItem.setParams(params);
            return animItem;
        }

        function setSpeed(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.setSpeed(val, animation);
            }
        }

        function setDirection(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.setDirection(val, animation);
            }
        }

        function play(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.play(animation);
            }
        }
        function resume(nowTime) {
            var elapsedTime = nowTime - initTime;
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.advanceTime(elapsedTime);
            }
            initTime = nowTime;
            if (playingAnimationsNum && !_isFrozen) {
                window.requestAnimationFrame(resume);
            } else {
                _stopped = true;
            }
        }

        function first(nowTime) {
            initTime = nowTime;
            window.requestAnimationFrame(resume);
        }

        function pause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.pause(animation);
            }
        }

        function goToAndStop(value, isFrame, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
            }
        }

        function stop(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.stop(animation);
            }
        }

        function togglePause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.togglePause(animation);
            }
        }

        function destroy(animation) {
            var i;
            for (i = len - 1; i >= 0; i -= 1) {
                registeredAnimations[i].animation.destroy(animation);
            }
        }

        function searchAnimations(animationData, standalone, renderer) {
            var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')), [].slice.call(document.getElementsByClassName('bodymovin')));
            var i,
                len = animElements.length;
            for (i = 0; i < len; i += 1) {
                if (renderer) {
                    animElements[i].setAttribute('data-bm-type', renderer);
                }
                registerAnimation(animElements[i], animationData);
            }
            if (standalone && len === 0) {
                if (!renderer) {
                    renderer = 'svg';
                }
                var body = document.getElementsByTagName('body')[0];
                body.innerHTML = '';
                var div = createTag('div');
                div.style.width = '100%';
                div.style.height = '100%';
                div.setAttribute('data-bm-type', renderer);
                body.appendChild(div);
                registerAnimation(div, animationData);
            }
        }

        function resize() {
            var i;
            for (i = 0; i < len; i += 1) {
                registeredAnimations[i].animation.resize();
            }
        }

        function activate() {
            if (!_isFrozen && playingAnimationsNum) {
                if (_stopped) {
                    window.requestAnimationFrame(first);
                    _stopped = false;
                }
            }
        }

        function freeze() {
            _isFrozen = true;
        }

        function unfreeze() {
            _isFrozen = false;
            activate();
        }

        moduleOb.registerAnimation = registerAnimation;
        moduleOb.loadAnimation = loadAnimation;
        moduleOb.setSpeed = setSpeed;
        moduleOb.setDirection = setDirection;
        moduleOb.play = play;
        moduleOb.pause = pause;
        moduleOb.stop = stop;
        moduleOb.togglePause = togglePause;
        moduleOb.searchAnimations = searchAnimations;
        moduleOb.resize = resize;
        //moduleOb.start = start;
        moduleOb.goToAndStop = goToAndStop;
        moduleOb.destroy = destroy;
        moduleOb.freeze = freeze;
        moduleOb.unfreeze = unfreeze;
        moduleOb.getRegisteredAnimations = getRegisteredAnimations;
        return moduleOb;
    }();

    var AnimationItem = function AnimationItem() {
        this._cbs = [];
        this.name = '';
        this.path = '';
        this.isLoaded = false;
        this.currentFrame = 0;
        this.currentRawFrame = 0;
        this.totalFrames = 0;
        this.frameRate = 0;
        this.frameMult = 0;
        this.playSpeed = 1;
        this.playDirection = 1;
        this.playCount = 0;
        this.animationData = {};
        this.assets = [];
        this.isPaused = true;
        this.autoplay = false;
        this.loop = true;
        this.renderer = null;
        this.animationID = createElementID();
        this.assetsPath = '';
        this.timeCompleted = 0;
        this.segmentPos = 0;
        this.subframeEnabled = subframeEnabled;
        this.segments = [];
        this._idle = true;
        this._completedLoop = false;
        this.projectInterface = ProjectInterface();
        this.imagePreloader = new ImagePreloader();
    };

    extendPrototype([BaseEvent], AnimationItem);

    AnimationItem.prototype.setParams = function (params) {
        if (params.context) {
            this.context = params.context;
        }
        if (params.wrapper || params.container) {
            this.wrapper = params.wrapper || params.container;
        }
        var animType = params.animType ? params.animType : params.renderer ? params.renderer : 'svg';
        switch (animType) {
            case 'canvas':
                this.renderer = new CanvasRenderer(this, params.rendererSettings);
                break;
            case 'svg':
                this.renderer = new SVGRenderer(this, params.rendererSettings);
                break;
            default:
                this.renderer = new HybridRenderer(this, params.rendererSettings);
                break;
        }
        this.renderer.setProjectInterface(this.projectInterface);
        this.animType = animType;

        if (params.loop === '' || params.loop === null) {} else if (params.loop === false) {
            this.loop = false;
        } else if (params.loop === true) {
            this.loop = true;
        } else {
            this.loop = parseInt(params.loop);
        }
        this.autoplay = 'autoplay' in params ? params.autoplay : true;
        this.name = params.name ? params.name : '';
        this.autoloadSegments = params.hasOwnProperty('autoloadSegments') ? params.autoloadSegments : true;
        this.assetsPath = params.assetsPath;
        if (params.animationData) {
            this.configAnimation(params.animationData);
        } else if (params.path) {
            if (params.path.substr(-4) != 'json') {
                if (params.path.substr(-1, 1) != '/') {
                    params.path += '/';
                }
                params.path += 'data.json';
            }

            if (params.path.lastIndexOf('\\') != -1) {
                this.path = params.path.substr(0, params.path.lastIndexOf('\\') + 1);
            } else {
                this.path = params.path.substr(0, params.path.lastIndexOf('/') + 1);
            }
            this.fileName = params.path.substr(params.path.lastIndexOf('/') + 1);
            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf('.json'));

            assetLoader.load(params.path, this.configAnimation.bind(this), function () {
                this.trigger('data_failed');
            }.bind(this));
        }
    };

    AnimationItem.prototype.setData = function (wrapper, animationData) {
        var params = {
            wrapper: wrapper,
            animationData: animationData ? typeof animationData === "object" ? animationData : JSON.parse(animationData) : null
        };
        var wrapperAttributes = wrapper.attributes;

        params.path = wrapperAttributes.getNamedItem('data-animation-path') ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') ? wrapperAttributes.getNamedItem('data-bm-path').value : wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
        params.animType = wrapperAttributes.getNamedItem('data-anim-type') ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') ? wrapperAttributes.getNamedItem('bm-type').value : wrapperAttributes.getNamedItem('data-bm-renderer') ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';

        var loop = wrapperAttributes.getNamedItem('data-anim-loop') ? wrapperAttributes.getNamedItem('data-anim-loop').value : wrapperAttributes.getNamedItem('data-bm-loop') ? wrapperAttributes.getNamedItem('data-bm-loop').value : wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
        if (loop === '') {} else if (loop === 'false') {
            params.loop = false;
        } else if (loop === 'true') {
            params.loop = true;
        } else {
            params.loop = parseInt(loop);
        }
        var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') ? wrapperAttributes.getNamedItem('data-anim-autoplay').value : wrapperAttributes.getNamedItem('data-bm-autoplay') ? wrapperAttributes.getNamedItem('data-bm-autoplay').value : wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
        params.autoplay = autoplay !== "false";

        params.name = wrapperAttributes.getNamedItem('data-name') ? wrapperAttributes.getNamedItem('data-name').value : wrapperAttributes.getNamedItem('data-bm-name') ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value : '';
        var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') ? wrapperAttributes.getNamedItem('data-anim-prerender').value : wrapperAttributes.getNamedItem('data-bm-prerender') ? wrapperAttributes.getNamedItem('data-bm-prerender').value : wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

        if (prerender === 'false') {
            params.prerender = false;
        }
        this.setParams(params);
    };

    AnimationItem.prototype.includeLayers = function (data) {
        if (data.op > this.animationData.op) {
            this.animationData.op = data.op;
            this.totalFrames = Math.floor(data.op - this.animationData.ip);
        }
        var layers = this.animationData.layers;
        var i,
            len = layers.length;
        var newLayers = data.layers;
        var j,
            jLen = newLayers.length;
        for (j = 0; j < jLen; j += 1) {
            i = 0;
            while (i < len) {
                if (layers[i].id == newLayers[j].id) {
                    layers[i] = newLayers[j];
                    break;
                }
                i += 1;
            }
        }
        if (data.chars || data.fonts) {
            this.renderer.globalData.fontManager.addChars(data.chars);
            this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
        }
        if (data.assets) {
            len = data.assets.length;
            for (i = 0; i < len; i += 1) {
                this.animationData.assets.push(data.assets[i]);
            }
        }
        this.animationData.__complete = false;
        dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
        this.renderer.includeLayers(data.layers);
        if (expressionsPlugin) {
            expressionsPlugin.initExpressions(this);
        }
        this.loadNextSegment();
    };

    AnimationItem.prototype.loadNextSegment = function () {
        var segments = this.animationData.segments;
        if (!segments || segments.length === 0 || !this.autoloadSegments) {
            this.trigger('data_ready');
            this.timeCompleted = this.totalFrames;
            return;
        }
        var segment = segments.shift();
        this.timeCompleted = segment.time * this.frameRate;
        var segmentPath = this.path + this.fileName + '_' + this.segmentPos + '.json';
        this.segmentPos += 1;
        assetLoader.load(segmentPath, this.includeLayers.bind(this), function () {
            this.trigger('data_failed');
        }.bind(this));
    };

    AnimationItem.prototype.loadSegments = function () {
        var segments = this.animationData.segments;
        if (!segments) {
            this.timeCompleted = this.totalFrames;
        }
        this.loadNextSegment();
    };

    AnimationItem.prototype.imagesLoaded = function () {
        this.trigger('loaded_images');
        this.checkLoaded();
    };

    AnimationItem.prototype.preloadImages = function () {
        this.imagePreloader.setAssetsPath(this.assetsPath);
        this.imagePreloader.setPath(this.path);
        this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
    };

    AnimationItem.prototype.configAnimation = function (animData) {
        if (!this.renderer) {
            return;
        }
        this.animationData = animData;
        this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
        this.renderer.configAnimation(animData);
        if (!animData.assets) {
            animData.assets = [];
        }
        this.renderer.searchExtraCompositions(animData.assets);

        this.assets = this.animationData.assets;
        this.frameRate = this.animationData.fr;
        this.firstFrame = Math.round(this.animationData.ip);
        this.frameMult = this.animationData.fr / 1000;
        this.trigger('config_ready');
        this.preloadImages();
        this.loadSegments();
        this.updaFrameModifier();
        this.waitForFontsLoaded();
    };

    AnimationItem.prototype.waitForFontsLoaded = function () {
        if (!this.renderer) {
            return;
        }
        if (this.renderer.globalData.fontManager.loaded()) {
            this.checkLoaded();
        } else {
            setTimeout(this.waitForFontsLoaded.bind(this), 20);
        }
    };

    AnimationItem.prototype.checkLoaded = function () {
        if (!this.isLoaded && this.renderer.globalData.fontManager.loaded() && (this.imagePreloader.loaded() || this.renderer.rendererType !== 'canvas')) {
            this.isLoaded = true;
            dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
            if (expressionsPlugin) {
                expressionsPlugin.initExpressions(this);
            }
            this.renderer.initItems();
            setTimeout(function () {
                this.trigger('DOMLoaded');
            }.bind(this), 0);
            this.gotoFrame();
            if (this.autoplay) {
                this.play();
            }
        }
    };

    AnimationItem.prototype.resize = function () {
        this.renderer.updateContainerSize();
    };

    AnimationItem.prototype.setSubframe = function (flag) {
        this.subframeEnabled = flag ? true : false;
    };

    AnimationItem.prototype.gotoFrame = function () {
        this.currentFrame = this.subframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;

        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
            this.currentFrame = this.timeCompleted;
        }
        this.trigger('enterFrame');
        this.renderFrame();
    };

    AnimationItem.prototype.renderFrame = function () {
        if (this.isLoaded === false) {
            return;
        }
        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
    };

    AnimationItem.prototype.play = function (name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === true) {
            this.isPaused = false;
            if (this._idle) {
                this._idle = false;
                this.trigger('_active');
            }
        }
    };

    AnimationItem.prototype.pause = function (name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === false) {
            this.isPaused = true;
            this._idle = true;
            this.trigger('_idle');
        }
    };

    AnimationItem.prototype.togglePause = function (name) {
        if (name && this.name != name) {
            return;
        }
        if (this.isPaused === true) {
            this.play();
        } else {
            this.pause();
        }
    };

    AnimationItem.prototype.stop = function (name) {
        if (name && this.name != name) {
            return;
        }
        this.pause();
        this.playCount = 0;
        this._completedLoop = false;
        this.setCurrentRawFrameValue(0);
    };

    AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
        if (name && this.name != name) {
            return;
        }
        if (isFrame) {
            this.setCurrentRawFrameValue(value);
        } else {
            this.setCurrentRawFrameValue(value * this.frameModifier);
        }
        this.pause();
    };

    AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
        this.goToAndStop(value, isFrame, name);
        this.play();
    };

    AnimationItem.prototype.advanceTime = function (value) {
        if (this.isPaused === true || this.isLoaded === false) {
            return;
        }
        var nextValue = this.currentRawFrame + value * this.frameModifier;
        var _isComplete = false;
        // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
        // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
        if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
            if (!this.loop || this.playCount === this.loop) {
                if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
                    _isComplete = true;
                    nextValue = this.totalFrames - 1;
                }
            } else if (nextValue >= this.totalFrames) {
                this.playCount += 1;
                if (!this.checkSegments(nextValue % this.totalFrames)) {
                    this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                    this._completedLoop = true;
                    this.trigger('loopComplete');
                }
            } else {
                this.setCurrentRawFrameValue(nextValue);
            }
        } else if (nextValue < 0) {
            if (!this.checkSegments(nextValue % this.totalFrames)) {
                if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                    this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
                    if (!this._completedLoop) {
                        this._completedLoop = true;
                    } else {
                        this.trigger('loopComplete');
                    }
                } else {
                    _isComplete = true;
                    nextValue = 0;
                }
            }
        } else {
            this.setCurrentRawFrameValue(nextValue);
        }
        if (_isComplete) {
            this.setCurrentRawFrameValue(nextValue);
            this.pause();
            this.trigger('complete');
        }
    };

    AnimationItem.prototype.adjustSegment = function (arr, offset) {
        this.playCount = 0;
        if (arr[1] < arr[0]) {
            if (this.frameModifier > 0) {
                if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                } else {
                    this.setDirection(-1);
                }
            }
            this.timeCompleted = this.totalFrames = arr[0] - arr[1];
            this.firstFrame = arr[1];
            this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
        } else if (arr[1] > arr[0]) {
            if (this.frameModifier < 0) {
                if (this.playSpeed < 0) {
                    this.setSpeed(-this.playSpeed);
                } else {
                    this.setDirection(1);
                }
            }
            this.timeCompleted = this.totalFrames = arr[1] - arr[0];
            this.firstFrame = arr[0];
            this.setCurrentRawFrameValue(0.001 + offset);
        }
        this.trigger('segmentStart');
    };
    AnimationItem.prototype.setSegment = function (init, end) {
        var pendingFrame = -1;
        if (this.isPaused) {
            if (this.currentRawFrame + this.firstFrame < init) {
                pendingFrame = init;
            } else if (this.currentRawFrame + this.firstFrame > end) {
                pendingFrame = end - init;
            }
        }

        this.firstFrame = init;
        this.timeCompleted = this.totalFrames = end - init;
        if (pendingFrame !== -1) {
            this.goToAndStop(pendingFrame, true);
        }
    };

    AnimationItem.prototype.playSegments = function (arr, forceFlag) {
        if (forceFlag) {
            this.segments.length = 0;
        }
        if (typeof arr[0] === 'object') {
            var i,
                len = arr.length;
            for (i = 0; i < len; i += 1) {
                this.segments.push(arr[i]);
            }
        } else {
            this.segments.push(arr);
        }
        if (this.segments.length && forceFlag) {
            this.adjustSegment(this.segments.shift(), 0);
        }
        if (this.isPaused) {
            this.play();
        }
    };

    AnimationItem.prototype.resetSegments = function (forceFlag) {
        this.segments.length = 0;
        this.segments.push([this.animationData.ip, this.animationData.op]);
        //this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
        if (forceFlag) {
            this.checkSegments(0);
        }
    };
    AnimationItem.prototype.checkSegments = function (offset) {
        if (this.segments.length) {
            this.adjustSegment(this.segments.shift(), offset);
            return true;
        }
        return false;
    };

    AnimationItem.prototype.destroy = function (name) {
        if (name && this.name != name || !this.renderer) {
            return;
        }
        this.renderer.destroy();
        this.imagePreloader.destroy();
        this.trigger('destroy');
        this._cbs = null;
        this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null;
        this.renderer = null;
    };

    AnimationItem.prototype.setCurrentRawFrameValue = function (value) {
        this.currentRawFrame = value;
        this.gotoFrame();
    };

    AnimationItem.prototype.setSpeed = function (val) {
        this.playSpeed = val;
        this.updaFrameModifier();
    };

    AnimationItem.prototype.setDirection = function (val) {
        this.playDirection = val < 0 ? -1 : 1;
        this.updaFrameModifier();
    };

    AnimationItem.prototype.updaFrameModifier = function () {
        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
    };

    AnimationItem.prototype.getPath = function () {
        return this.path;
    };

    AnimationItem.prototype.getAssetsPath = function (assetData) {
        var path = '';
        if (assetData.e) {
            path = assetData.p;
        } else if (this.assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf('images/') !== -1) {
                imagePath = imagePath.split('/')[1];
            }
            path = this.assetsPath + imagePath;
        } else {
            path = this.path;
            path += assetData.u ? assetData.u : '';
            path += assetData.p;
        }
        return path;
    };

    AnimationItem.prototype.getAssetData = function (id) {
        var i = 0,
            len = this.assets.length;
        while (i < len) {
            if (id == this.assets[i].id) {
                return this.assets[i];
            }
            i += 1;
        }
    };

    AnimationItem.prototype.hide = function () {
        this.renderer.hide();
    };

    AnimationItem.prototype.show = function () {
        this.renderer.show();
    };

    AnimationItem.prototype.getDuration = function (isFrame) {
        return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
    };

    AnimationItem.prototype.trigger = function (name) {
        if (this._cbs && this._cbs[name]) {
            switch (name) {
                case 'enterFrame':
                    this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
                    break;
                case 'loopComplete':
                    this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
                    break;
                case 'complete':
                    this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
                    break;
                case 'segmentStart':
                    this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
                    break;
                case 'destroy':
                    this.triggerEvent(name, new BMDestroyEvent(name, this));
                    break;
                default:
                    this.triggerEvent(name);
            }
        }
        if (name === 'enterFrame' && this.onEnterFrame) {
            this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
        }
        if (name === 'loopComplete' && this.onLoopComplete) {
            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
        }
        if (name === 'complete' && this.onComplete) {
            this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
        }
        if (name === 'segmentStart' && this.onSegmentStart) {
            this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
        }
        if (name === 'destroy' && this.onDestroy) {
            this.onDestroy.call(this, new BMDestroyEvent(name, this));
        }
    };

    function EffectsManager() {}

    var lottiejs = {};

    var _isFrozen = false;

    function setLocationHref(href) {
        locationHref = href;
    }

    function searchAnimations() {
        if (standalone === true) {
            animationManager.searchAnimations(animationData, standalone, renderer);
        } else {
            animationManager.searchAnimations();
        }
    }

    function setSubframeRendering(flag) {
        subframeEnabled = flag;
    }

    function loadAnimation(params) {
        if (standalone === true) {
            params.animationData = JSON.parse(animationData);
        }
        return animationManager.loadAnimation(params);
    }

    function setQuality(value) {
        if (typeof value === 'string') {
            switch (value) {
                case 'high':
                    defaultCurveSegments = 200;
                    break;
                case 'medium':
                    defaultCurveSegments = 50;
                    break;
                case 'low':
                    defaultCurveSegments = 10;
                    break;
            }
        } else if (!isNaN(value) && value > 1) {
            defaultCurveSegments = value;
        }
        if (defaultCurveSegments >= 50) {
            roundValues(false);
        } else {
            roundValues(true);
        }
    }

    function inBrowser() {
        return typeof navigator !== 'undefined';
    }

    function installPlugin(type, plugin) {
        if (type === 'expressions') {
            expressionsPlugin = plugin;
        }
    }

    function getFactory(name) {
        switch (name) {
            case "propertyFactory":
                return PropertyFactory;
            case "shapePropertyFactory":
                return ShapePropertyFactory;
            case "matrix":
                return Matrix;
        }
    }

    lottiejs.play = animationManager.play;
    lottiejs.pause = animationManager.pause;
    lottiejs.setLocationHref = setLocationHref;
    lottiejs.togglePause = animationManager.togglePause;
    lottiejs.setSpeed = animationManager.setSpeed;
    lottiejs.setDirection = animationManager.setDirection;
    lottiejs.stop = animationManager.stop;
    lottiejs.searchAnimations = searchAnimations;
    lottiejs.registerAnimation = animationManager.registerAnimation;
    lottiejs.loadAnimation = loadAnimation;
    lottiejs.setSubframeRendering = setSubframeRendering;
    lottiejs.resize = animationManager.resize;
    //lottiejs.start = start;
    lottiejs.goToAndStop = animationManager.goToAndStop;
    lottiejs.destroy = animationManager.destroy;
    lottiejs.setQuality = setQuality;
    lottiejs.inBrowser = inBrowser;
    lottiejs.installPlugin = installPlugin;
    lottiejs.freeze = animationManager.freeze;
    lottiejs.unfreeze = animationManager.unfreeze;
    lottiejs.getRegisteredAnimations = animationManager.getRegisteredAnimations;
    lottiejs.__getFactory = getFactory;
    lottiejs.version = '5.5.5';

    function checkReady() {
        if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);
            searchAnimations();
        }
    }

    function getQueryVariable(variable) {
        var vars = queryString.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) == variable) {
                return decodeURIComponent(pair[1]);
            }
        }
    }
    var standalone = '__[STANDALONE]__';
    var animationData = '__[ANIMATIONDATA]__';
    var renderer = '';
    if (standalone) {
        var scripts = document.getElementsByTagName('script');
        var index = scripts.length - 1;
        var myScript = scripts[index] || {
            src: ''
        };
        var queryString = myScript.src.replace(/^[^\?]+\??/, '');
        renderer = getQueryVariable('renderer');
    }
    var readyStateCheckInterval = setInterval(checkReady, 100);
    return lottiejs;
});

/***/ }),

/***/ "XUTr":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"dialog_body":"dialog_body__33Tyf","signout_dialog":"signout_dialog__1MICz","btn_container":"btn_container__1RM0E","btn_label":"btn_label__2Wr2N","google":"google__2hHDP","facebook":"facebook__3I3fD","twitter":"twitter__2XyAO","github":"github__29llI","cancel_btn":"cancel_btn__1O9sx","signout_btn":"signout_btn__29v2D","toolbar":"toolbar__3mfc2","menu_icon":"menu_icon__1BRa-","desktop_toolbar":"desktop_toolbar__101bi","signin_btn":"signin_btn__1BOwZ","drawer_toolbar":"drawer_toolbar__1VrbX","drawer_nav":"drawer_nav__K2TXA","active":"active__2hWDy","navbar":"navbar__2X9cA","hamburger":"hamburger__309eM","nav_item":"nav_item__3KeIu","line":"line__2i-JQ","cfpTitle":"cfpTitle__1KlZ3","cfpTitleMobile":"cfpTitleMobile__3WFGF","mobile_title":"mobile_title__1aQcX"};

/***/ }),

/***/ "ZAL5":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"hero":"hero__1Z8cY","hero_title":"hero_title__1jo1i","belt":"belt__3Q0u3","home_info":"home_info__2R1Mw","text":"text__KcKgR","stats":"stats__1a5tI","stat":"stat__1AFaM","number":"number__S-T2l","label":"label__2WshR","partners":"partners__JqXZZ","sponsors":"sponsors__HE93i","item":"item__3r_cP","video":"video__2EC34"};

/***/ }),

/***/ "ZMjw":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"footer":"footer__14P9B","footer_logo":"footer_logo__1TGSI","footer_link":"footer_link__1Xgw_"};

/***/ }),

/***/ "b9XL":
/***/ (function(module, exports) {

function _typeof2(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof2(obj) {
      return typeof obj;
    };
  } else {
    _typeof2 = function _typeof2(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }return _typeof2(obj);
}

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "d4H2":
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__("AkAO");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "dSNL":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__foundation__ = __webpack_require__("uJAj");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__component__ = __webpack_require__("EQDb");
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__foundation__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__component__["a"]; });
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






/***/ }),

/***/ "dkia":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"dialog_header":"dialog_header__1eyIk","back":"back__LQ3Ks","header_text":"header_text__DuLJS","header_subtext":"header_subtext__1kiIV","dialog_body":"dialog_body__1AXIu","subtitle":"subtitle__2nAQ4","event_topic":"event_topic__3ZoS5","speaker":"speaker__1Cf7C","speaker_item":"speaker_item__39CAk","speaker_details":"speaker_details__2gF7g","speaker_thumbnail":"speaker_thumbnail__32u6G","speaker_name":"speaker_name__2vaLT","speaker_title":"speaker_title__appDG","speaker_arrow":"speaker_arrow__38Ji2","speaker_bio":"speaker_bio__T9REJ","schedule_event_topics":"schedule_event_topics__3hu_v","header_speaker_profile":"header_speaker_profile__eyyZs","dialog_footer":"dialog_footer__1IAA2","share":"share__cO1m-","fab":"fab__1Tic6","dialog_container":"dialog_container__3c6lJ"};

/***/ }),

/***/ "fHKL":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TopAppBar = exports.TopAppBarTitle = exports.TopAppBarIcon = exports.TopAppBarSection = exports.TopAppBarRow = void 0;

var _get2 = _interopRequireDefault(__webpack_require__("J5U+"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _typeof2 = _interopRequireDefault(__webpack_require__("b9XL"));

var _topAppBar = __webpack_require__("NFzA");

var _bindDecorator = __webpack_require__("gKs0");

var _preact = __webpack_require__("KM04");

var _MaterialComponent6 = _interopRequireDefault(__webpack_require__("uc5p"));

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var TopAppBarRow =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(TopAppBarRow, _MaterialComponent);

  function TopAppBarRow() {
    var _this;

    (0, _classCallCheck2.default)(this, TopAppBarRow);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TopAppBarRow).apply(this, arguments));
    _this.componentName = 'top-app-bar__row';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(TopAppBarRow, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("div", _extends({}, props), this.props.children);
    }
  }]);
  return TopAppBarRow;
}(_MaterialComponent6.default);

exports.TopAppBarRow = TopAppBarRow;

var TopAppBarSection =
/*#__PURE__*/
function (_MaterialComponent2) {
  (0, _inherits2.default)(TopAppBarSection, _MaterialComponent2);

  function TopAppBarSection() {
    var _this2;

    (0, _classCallCheck2.default)(this, TopAppBarSection);
    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TopAppBarSection).apply(this, arguments));
    _this2.componentName = 'top-app-bar__section';
    _this2.mdcProps = ['align-start', 'align-end'];
    return _this2;
  }

  (0, _createClass2.default)(TopAppBarSection, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("section", _extends({}, props), props.children);
    }
  }]);
  return TopAppBarSection;
}(_MaterialComponent6.default);

exports.TopAppBarSection = TopAppBarSection;

var TopAppBarIcon =
/*#__PURE__*/
function (_MaterialComponent3) {
  (0, _inherits2.default)(TopAppBarIcon, _MaterialComponent3);

  function TopAppBarIcon() {
    var _this3;

    (0, _classCallCheck2.default)(this, TopAppBarIcon);
    _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TopAppBarIcon).apply(this, arguments));
    _this3.componentName = 'top-app-bar__icon';
    _this3.mdcProps = [];
    return _this3;
  }

  (0, _createClass2.default)(TopAppBarIcon, [{
    key: "materialDom",
    value: function materialDom(props) {
      var className = props.navigation ? 'material-icons mdc-top-app-bar__navigation-icon' : 'material-icons';
      return (0, _preact.h)("a", _extends({
        className: className
      }, props), props.children);
    }
  }]);
  return TopAppBarIcon;
}(_MaterialComponent6.default);

exports.TopAppBarIcon = TopAppBarIcon;

var TopAppBarTitle =
/*#__PURE__*/
function (_MaterialComponent4) {
  (0, _inherits2.default)(TopAppBarTitle, _MaterialComponent4);

  function TopAppBarTitle() {
    var _this4;

    (0, _classCallCheck2.default)(this, TopAppBarTitle);
    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TopAppBarTitle).apply(this, arguments));
    _this4.componentName = 'top-app-bar__title';
    _this4.mdcProps = [];
    return _this4;
  }

  (0, _createClass2.default)(TopAppBarTitle, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("span", _extends({}, props), props.children);
    }
  }]);
  return TopAppBarTitle;
}(_MaterialComponent6.default);

exports.TopAppBarTitle = TopAppBarTitle;

var TopAppBar =
/*#__PURE__*/
function (_MaterialComponent5) {
  (0, _inherits2.default)(TopAppBar, _MaterialComponent5);

  function TopAppBar() {
    var _this5;

    (0, _classCallCheck2.default)(this, TopAppBar);
    _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TopAppBar).apply(this, arguments));
    _this5.componentName = 'top-app-bar';
    _this5.mdcProps = ['short', 'short-collapsed', 'fixed', 'prominent'];
    return _this5;
  }

  (0, _createClass2.default)(TopAppBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(TopAppBar.prototype), "componentDidMount", this).call(this);

      if (this.control) {
        var comp = new _topAppBar.MDCTopAppBar(this.control);
        comp.listen('MDCTopAppBar:nav', this.onNav);
        this.MDComponent = comp;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(TopAppBar.prototype), "componentWillUnmount", this).call(this);

      if (this.MDComponent) {
        this.MDComponent.unlisten('MDCTopAppBar:nav', this.onNav);
        this.MDComponent.destroy();
      }
    }
  }, {
    key: "onNav",
    value: function onNav(e) {
      if (this.props.onNav) {
        this.props.onNav(e);
      }
    }
  }, {
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("header", _extends({
        ref: this.setControlRef
      }, props), props.children);
    }
  }]);
  return TopAppBar;
}(_MaterialComponent6.default);

exports.TopAppBar = TopAppBar;

__decorate([_bindDecorator.bind], TopAppBar.prototype, "onNav", null);

var default_1 =
/*#__PURE__*/
function (_TopAppBar) {
  (0, _inherits2.default)(default_1, _TopAppBar);

  function default_1() {
    (0, _classCallCheck2.default)(this, default_1);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(default_1).apply(this, arguments));
  }

  return default_1;
}(TopAppBar);

exports.default = default_1;
default_1.Section = TopAppBarSection;
default_1.Icon = TopAppBarIcon;
default_1.Title = TopAppBarTitle;
default_1.Row = TopAppBarRow;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "gKs0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var constants;
(function (constants) {
    constants.typeOfFunction = 'function';
    constants.boolTrue = true;
})(constants || (constants = {}));
function bind(target, propertyKey, descriptor) {
    if (!descriptor || typeof descriptor.value !== constants.typeOfFunction) {
        throw new TypeError("Only methods can be decorated with @bind. <" + propertyKey + "> is not a method!");
    }
    return {
        configurable: constants.boolTrue,
        get: function get() {
            var bound = descriptor.value.bind(this);
            // Credits to https://github.com/andreypopp/autobind-decorator for memoizing the result of bind against a symbol on the instance.
            Object.defineProperty(this, propertyKey, {
                value: bound,
                configurable: constants.boolTrue,
                writable: constants.boolTrue
            });
            return bound;
        }
    };
}
exports.bind = bind;
exports.default = bind;

/***/ }),

/***/ "kvG9":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"faq":"faq__2W9QX","faq_item":"faq_item__sn-Vv","faq_title":"faq_title__1r5Mp","faq_content":"faq_content__QBIcC","faq_list":"faq_list__3WKcB"};

/***/ }),

/***/ "l262":
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),

/***/ "mTzT":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"countdownContainer":"countdownContainer__3GKYu","countdown":"countdown__2ljL7","unitWrapper":"unitWrapper__2WYLN","digit":"digit__1tHWl","unitLabel":"unitLabel__17Mhk","blue":"blue__3ma8t","darkfill":"darkfill__3V_-J","lightfill":"lightfill__3Tn9f","darkstroke":"darkstroke__Ih762","lightstroke":"lightstroke__2_JM1","red":"red__2iNQn","yellow":"yellow__34his","green":"green__1Py6t"};

/***/ }),

/***/ "o9kt":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"cfp":"cfp__1mOP-","footer":"footer__2eux3"};

/***/ }),

/***/ "pln1":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "rq4c":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "s3tW":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"schedule":"schedule__1aVD5","tabs":"tabs__3lO7Y","tab":"tab__37oYr","myio_info":"myio_info__1H_Jw","schedule_section":"schedule_section__1I6vX","schedule_content":"schedule_content__3CLwc","schedule_time":"schedule_time__1IwNg","schedule_events":"schedule_events__L8lEN","schedule_event":"schedule_event__3QDLd","schedule_event_title":"schedule_event_title__3w2jA","star_button":"star_button__3cBqK","star":"star__1XJd8","star_border":"star_border__Bwstp","schedule_event_details":"schedule_event_details__37dUc","schedule_event_speaker":"schedule_event_speaker__3TqlO","schedule_event_meta":"schedule_event_meta__10biI","schedule_event_description":"schedule_event_description__3imRx","schedule_event_topics":"schedule_event_topics__3hKXc","slides":"slides__34aZV","slide":"slide__1ZkWv","footer":"footer__1Dzr-"};

/***/ }),

/***/ "sEh6":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "sw5u":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Link = exports.Match = undefined;

var _extends = Object.assign || function (target) {
	for (var i = 1; i < arguments.length; i++) {
		var source = arguments[i];for (var key in source) {
			if (Object.prototype.hasOwnProperty.call(source, key)) {
				target[key] = source[key];
			}
		}
	}return target;
};

var _preact = __webpack_require__("KM04");

var _preactRouter = __webpack_require__("/QC5");

function _objectWithoutProperties(obj, keys) {
	var target = {};for (var i in obj) {
		if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	}return target;
}

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

function _possibleConstructorReturn(self, call) {
	if (!self) {
		throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	}return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
	if (typeof superClass !== "function" && superClass !== null) {
		throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Match = exports.Match = function (_Component) {
	_inherits(Match, _Component);

	function Match() {
		var _temp, _this, _ret;

		_classCallCheck(this, Match);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.update = function (url) {
			_this.nextUrl = url;
			_this.setState({});
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	Match.prototype.componentDidMount = function componentDidMount() {
		_preactRouter.subscribers.push(this.update);
	};

	Match.prototype.componentWillUnmount = function componentWillUnmount() {
		_preactRouter.subscribers.splice(_preactRouter.subscribers.indexOf(this.update) >>> 0, 1);
	};

	Match.prototype.render = function render(props) {
		var url = this.nextUrl || (0, _preactRouter.getCurrentUrl)(),
		    path = url.replace(/\?.+$/, '');
		this.nextUrl = null;
		return props.children[0] && props.children[0]({
			url: url,
			path: path,
			matches: path === props.path
		});
	};

	return Match;
}(_preact.Component);

var Link = function Link(_ref) {
	var activeClassName = _ref.activeClassName,
	    path = _ref.path,
	    props = _objectWithoutProperties(_ref, ['activeClassName', 'path']);

	return (0, _preact.h)(Match, { path: path || props.href }, function (_ref2) {
		var matches = _ref2.matches;
		return (0, _preact.h)(_preactRouter.Link, _extends({}, props, { 'class': [props.class || props.className, matches && activeClassName].filter(Boolean).join(' ') }));
	});
};

exports.Link = Link;
exports.default = Match;

Match.Link = Link;

/***/ }),

/***/ "u+vq":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "uJAj":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @template A
 */
var MDCFoundation = function () {
  _createClass(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }

    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }

    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }

    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }

    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  MDCFoundation.prototype.init = function init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  };

  MDCFoundation.prototype.destroy = function destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  };

  return MDCFoundation;
}();

/* harmony default export */ __webpack_exports__["a"] = (MDCFoundation);

/***/ }),

/***/ "uc5p":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MaterialComponent = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _typeof2 = _interopRequireDefault(__webpack_require__("b9XL"));

var _ripple = __webpack_require__("vkNc");

var _bindDecorator = __webpack_require__("gKs0");

var _preact = __webpack_require__("KM04");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var doNotRemoveProps = ['disabled'];
/**
 * Base class for every Material component in this package
 * NOTE: every component should add a ref by the name of `control` to its root dom for autoInit Properties
 *
 * @export
 * @class MaterialComponent
 * @extends {Component}
 */

var MaterialComponent =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(MaterialComponent, _Component);

  function MaterialComponent() {
    (0, _classCallCheck2.default)(this, MaterialComponent);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MaterialComponent).apply(this, arguments));
  }

  (0, _createClass2.default)(MaterialComponent, [{
    key: "render",
    value: function render(props) {
      if (!this.classText) {
        this.classText = this.buildClassName(props);
      } // Fetch a VNode


      var componentProps = props;
      var userDefinedClasses = componentProps.className || componentProps.class || ''; // We delete class props and add them later in the final
      // step so every component does not need to handle user specified classes.

      if (componentProps.class) {
        delete componentProps.class;
      }

      if (componentProps.className) {
        delete componentProps.className;
      }

      var element = this.materialDom(componentProps);
      element.attributes = element.attributes || {};
      element.attributes.className = "".concat(userDefinedClasses, " ").concat(this.getClassName(element)).split(' ').filter(function (value, index, self) {
        return self.indexOf(value) === index && value !== '';
      }) // Unique + exclude empty class names
      .join(' '); // Clean this shit of proxy attributes

      this.mdcProps.forEach(function (prop) {
        // TODO: Fix this better
        if (prop in doNotRemoveProps) {
          return;
        }

        delete element.attributes[prop];
      });
      return element;
    }
    /** Attach the ripple effect */

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.ripple && this.control) {
        this.ripple = new _ripple.MDCRipple(this.control);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.MDComponent && this.mdcNotifyProps) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.mdcNotifyProps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;

            if (this.props[prop] !== nextProps[prop]) {
              this.MDComponent[prop] = nextProps[prop];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.mdcProps[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _prop = _step2.value;

          if (this.props[_prop] !== nextProps[_prop]) {
            this.classText = this.buildClassName(nextProps);
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.ripple) {
        this.ripple.destroy();
      }
    }
  }, {
    key: "afterComponentDidMount",
    value: function afterComponentDidMount() {
      if (this.MDComponent && this.mdcNotifyProps) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.mdcNotifyProps[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var prop = _step3.value;
            this.MDComponent[prop] = this.props[prop];
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
    } // Shared setter for the root element ref

  }, {
    key: "setControlRef",
    value: function setControlRef(control) {
      this.control = control;
    }
    /** Build the className based on component names and mdc props */

  }, {
    key: "buildClassName",
    value: function buildClassName(props) {
      // Class name based on component name
      var classText = 'mdc-' + this.componentName; // Loop over mdcProps to turn them into classNames

      for (var propKey in props) {
        if (props.hasOwnProperty(propKey)) {
          var prop = props[propKey];

          if (typeof prop === 'boolean' && prop) {
            if (this.mdcProps.indexOf(propKey) !== -1) {
              classText += " mdc-".concat(this.componentName, "--").concat(propKey);
            }
          }
        }
      }

      return classText;
    }
    /** Returns the class name for element */

  }, {
    key: "getClassName",
    value: function getClassName(element) {
      if (!element) {
        return '';
      }

      var attrs = element.attributes = element.attributes || {};
      var classText = this.classText;

      if (attrs.class) {
        classText += ' ' + attrs.class;
      }

      if (attrs.className && attrs.className !== attrs.class) {
        classText += ' ' + attrs.className;
      }

      return classText;
    }
  }]);
  return MaterialComponent;
}(_preact.Component);

exports.MaterialComponent = MaterialComponent;

__decorate([_bindDecorator.bind], MaterialComponent.prototype, "setControlRef", null);

var _default = MaterialComponent;
exports.default = _default;
//# sourceMappingURL=MaterialComponent.js.map

/***/ }),

/***/ "vkNc":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var util_namespaceObject = {};
__webpack_require__.d(util_namespaceObject, "supportsCssVariables", function() { return supportsCssVariables; });
__webpack_require__.d(util_namespaceObject, "applyPassive", function() { return applyPassive; });
__webpack_require__.d(util_namespaceObject, "getMatchesProperty", function() { return getMatchesProperty; });
__webpack_require__.d(util_namespaceObject, "getNormalizedEventCoords", function() { return getNormalizedEventCoords; });

// EXTERNAL MODULE: ../node_modules/@material/base/component.js
var component = __webpack_require__("EQDb");

// CONCATENATED MODULE: ../node_modules/@material/ripple/adapter.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Ripple. Provides an interface for managing
 * - classes
 * - dom
 * - CSS variables
 * - position
 * - dimensions
 * - scroll position
 * - event handlers
 * - unbounded, active and disabled states
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
var MDCRippleAdapter = function () {
  function MDCRippleAdapter() {
    _classCallCheck(this, MDCRippleAdapter);
  }

  /** @return {boolean} */
  MDCRippleAdapter.prototype.browserSupportsCssVars = function browserSupportsCssVars() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isUnbounded = function isUnbounded() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isSurfaceActive = function isSurfaceActive() {};

  /** @return {boolean} */


  MDCRippleAdapter.prototype.isSurfaceDisabled = function isSurfaceDisabled() {};

  /** @param {string} className */


  MDCRippleAdapter.prototype.addClass = function addClass(className) {};

  /** @param {string} className */


  MDCRippleAdapter.prototype.removeClass = function removeClass(className) {};

  /** @param {!EventTarget} target */


  MDCRippleAdapter.prototype.containsEventTarget = function containsEventTarget(target) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.registerInteractionHandler = function registerInteractionHandler(evtType, handler) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.deregisterInteractionHandler = function deregisterInteractionHandler(evtType, handler) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.registerDocumentInteractionHandler = function registerDocumentInteractionHandler(evtType, handler) {};

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.deregisterDocumentInteractionHandler = function deregisterDocumentInteractionHandler(evtType, handler) {};

  /**
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.registerResizeHandler = function registerResizeHandler(handler) {};

  /**
   * @param {!Function} handler
   */


  MDCRippleAdapter.prototype.deregisterResizeHandler = function deregisterResizeHandler(handler) {};

  /**
   * @param {string} varName
   * @param {?number|string} value
   */


  MDCRippleAdapter.prototype.updateCssVariable = function updateCssVariable(varName, value) {};

  /** @return {!ClientRect} */


  MDCRippleAdapter.prototype.computeBoundingRect = function computeBoundingRect() {};

  /** @return {{x: number, y: number}} */


  MDCRippleAdapter.prototype.getWindowPageOffset = function getWindowPageOffset() {};

  return MDCRippleAdapter;
}();

/* harmony default export */ var adapter = (MDCRippleAdapter);
// EXTERNAL MODULE: ../node_modules/@material/base/foundation.js
var foundation = __webpack_require__("uJAj");

// CONCATENATED MODULE: ../node_modules/@material/ripple/constants.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var cssClasses = {
  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
  // given that it's an 'upgrade' to an existing component. That being said it is the root
  // CSS class that all other CSS classes derive from.
  ROOT: 'mdc-ripple-upgraded',
  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation'
};

var strings = {
  VAR_LEFT: '--mdc-ripple-left',
  VAR_TOP: '--mdc-ripple-top',
  VAR_FG_SIZE: '--mdc-ripple-fg-size',
  VAR_FG_SCALE: '--mdc-ripple-fg-scale',
  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end'
};

var numbers = {
  PADDING: 10,
  INITIAL_ORIGIN_SCALE: 0.6,
  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)
  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)
  TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices
};


// CONCATENATED MODULE: ../node_modules/@material/ripple/util.js
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.
 * @private {boolean|undefined}
 */
var supportsCssVariables_ = void 0;

/**
 * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.
 * @private {boolean|undefined}
 */
var supportsPassive_ = void 0;

/**
 * @param {!Window} windowObj
 * @return {boolean}
 */
function detectEdgePseudoVarBug(windowObj) {
  // Detect versions of Edge with buggy var() support
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  var document = windowObj.document;
  var node = document.createElement('div');
  node.className = 'mdc-ripple-surface--test-edge-var-bug';
  document.body.appendChild(node);

  // The bug exists if ::before style ends up propagating to the parent element.
  // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
  // but Firefox is known to support CSS custom properties correctly.
  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  var computedStyle = windowObj.getComputedStyle(node);
  var hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
  node.remove();
  return hasPseudoVarBug;
}

/**
 * @param {!Window} windowObj
 * @param {boolean=} forceRefresh
 * @return {boolean|undefined}
 */

function supportsCssVariables(windowObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var supportsCssVariables = supportsCssVariables_;
  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
    return supportsCssVariables;
  }

  var supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';
  if (!supportsFunctionPresent) {
    return;
  }

  var explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');
  // See: https://bugs.webkit.org/show_bug.cgi?id=154669
  // See: README section on Safari
  var weAreFeatureDetectingSafari10plus = windowObj.CSS.supports('(--css-vars: yes)') && windowObj.CSS.supports('color', '#00000000');

  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
    supportsCssVariables = !detectEdgePseudoVarBug(windowObj);
  } else {
    supportsCssVariables = false;
  }

  if (!forceRefresh) {
    supportsCssVariables_ = supportsCssVariables;
  }
  return supportsCssVariables;
}

//
/**
 * Determine whether the current browser supports passive event listeners, and if so, use them.
 * @param {!Window=} globalObj
 * @param {boolean=} forceRefresh
 * @return {boolean|{passive: boolean}}
 */
function applyPassive() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (supportsPassive_ === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    supportsPassive_ = isSupported;
  }

  return supportsPassive_ ? { passive: true } : false;
}

/**
 * @param {!Object} HTMLElementPrototype
 * @return {!Array<string>}
 */
function getMatchesProperty(HTMLElementPrototype) {
  return ['webkitMatchesSelector', 'msMatchesSelector', 'matches'].filter(function (p) {
    return p in HTMLElementPrototype;
  }).pop();
}

/**
 * @param {!Event} ev
 * @param {{x: number, y: number}} pageOffset
 * @param {!ClientRect} clientRect
 * @return {{x: number, y: number}}
 */
function getNormalizedEventCoords(ev, pageOffset, clientRect) {
  var x = pageOffset.x,
      y = pageOffset.y;

  var documentX = x + clientRect.left;
  var documentY = y + clientRect.top;

  var normalizedX = void 0;
  var normalizedY = void 0;
  // Determine touch point relative to the ripple container.
  if (ev.type === 'touchstart') {
    normalizedX = ev.changedTouches[0].pageX - documentX;
    normalizedY = ev.changedTouches[0].pageY - documentY;
  } else {
    normalizedX = ev.pageX - documentX;
    normalizedY = ev.pageY - documentY;
  }

  return { x: normalizedX, y: normalizedY };
}


// CONCATENATED MODULE: ../node_modules/@material/ripple/foundation.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function foundation__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






/**
 * @typedef {{
 *   isActivated: (boolean|undefined),
 *   hasDeactivationUXRun: (boolean|undefined),
 *   wasActivatedByPointer: (boolean|undefined),
 *   wasElementMadeActive: (boolean|undefined),
 *   activationEvent: Event,
 *   isProgrammatic: (boolean|undefined)
 * }}
 */
var ActivationStateType = void 0;

/**
 * @typedef {{
 *   activate: (string|undefined),
 *   deactivate: (string|undefined),
 *   focus: (string|undefined),
 *   blur: (string|undefined)
 * }}
 */
var ListenerInfoType = void 0;

/**
 * @typedef {{
 *   activate: function(!Event),
 *   deactivate: function(!Event),
 *   focus: function(),
 *   blur: function()
 * }}
 */
var ListenersType = void 0;

/**
 * @typedef {{
 *   x: number,
 *   y: number
 * }}
 */
var PointType = void 0;

// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];

// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup'];

// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations
/** @type {!Array<!EventTarget>} */
var activatedTargets = [];

/**
 * @extends {MDCFoundation<!MDCRippleAdapter>}
 */

var foundation_MDCRippleFoundation = function (_MDCFoundation) {
  _inherits(MDCRippleFoundation, _MDCFoundation);

  _createClass(MDCRippleFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        browserSupportsCssVars: function browserSupportsCssVars() /* boolean - cached */{},
        isUnbounded: function isUnbounded() /* boolean */{},
        isSurfaceActive: function isSurfaceActive() /* boolean */{},
        isSurfaceDisabled: function isSurfaceDisabled() /* boolean */{},
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        containsEventTarget: function containsEventTarget() /* target: !EventTarget */{},
        registerInteractionHandler: function registerInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerDocumentInteractionHandler: function registerDocumentInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        updateCssVariable: function updateCssVariable() /* varName: string, value: string */{},
        computeBoundingRect: function computeBoundingRect() /* ClientRect */{},
        getWindowPageOffset: function getWindowPageOffset() /* {x: number, y: number} */{}
      };
    }
  }]);

  function MDCRippleFoundation(adapter) {
    foundation__classCallCheck(this, MDCRippleFoundation);

    /** @private {number} */
    var _this = _possibleConstructorReturn(this, _MDCFoundation.call(this, _extends(MDCRippleFoundation.defaultAdapter, adapter)));

    _this.layoutFrame_ = 0;

    /** @private {!ClientRect} */
    _this.frame_ = /** @type {!ClientRect} */{ width: 0, height: 0 };

    /** @private {!ActivationStateType} */
    _this.activationState_ = _this.defaultActivationState_();

    /** @private {number} */
    _this.initialSize_ = 0;

    /** @private {number} */
    _this.maxRadius_ = 0;

    /** @private {function(!Event)} */
    _this.activateHandler_ = function (e) {
      return _this.activate_(e);
    };

    /** @private {function(!Event)} */
    _this.deactivateHandler_ = function (e) {
      return _this.deactivate_(e);
    };

    /** @private {function(?Event=)} */
    _this.focusHandler_ = function () {
      return _this.handleFocus();
    };

    /** @private {function(?Event=)} */
    _this.blurHandler_ = function () {
      return _this.handleBlur();
    };

    /** @private {!Function} */
    _this.resizeHandler_ = function () {
      return _this.layout();
    };

    /** @private {{left: number, top:number}} */
    _this.unboundedCoords_ = {
      left: 0,
      top: 0
    };

    /** @private {number} */
    _this.fgScale_ = 0;

    /** @private {number} */
    _this.activationTimer_ = 0;

    /** @private {number} */
    _this.fgDeactivationRemovalTimer_ = 0;

    /** @private {boolean} */
    _this.activationAnimationHasEnded_ = false;

    /** @private {!Function} */
    _this.activationTimerCallback_ = function () {
      _this.activationAnimationHasEnded_ = true;
      _this.runDeactivationUXLogicIfReady_();
    };

    /** @private {?Event} */
    _this.previousActivationEvent_ = null;
    return _this;
  }

  /**
   * We compute this property so that we are not querying information about the client
   * until the point in time where the foundation requests it. This prevents scenarios where
   * client-side feature-detection may happen too early, such as when components are rendered on the server
   * and then initialized at mount time on the client.
   * @return {boolean}
   * @private
   */


  MDCRippleFoundation.prototype.supportsPressRipple_ = function supportsPressRipple_() {
    return this.adapter_.browserSupportsCssVars();
  };

  /**
   * @return {!ActivationStateType}
   */


  MDCRippleFoundation.prototype.defaultActivationState_ = function defaultActivationState_() {
    return {
      isActivated: false,
      hasDeactivationUXRun: false,
      wasActivatedByPointer: false,
      wasElementMadeActive: false,
      activationEvent: null,
      isProgrammatic: false
    };
  };

  /** @override */


  MDCRippleFoundation.prototype.init = function init() {
    var _this2 = this;

    var supportsPressRipple = this.supportsPressRipple_();

    this.registerRootHandlers_(supportsPressRipple);

    if (supportsPressRipple) {
      var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses,
          ROOT = _MDCRippleFoundation$.ROOT,
          UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;

      requestAnimationFrame(function () {
        _this2.adapter_.addClass(ROOT);
        if (_this2.adapter_.isUnbounded()) {
          _this2.adapter_.addClass(UNBOUNDED);
          // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
          _this2.layoutInternal_();
        }
      });
    }
  };

  /** @override */


  MDCRippleFoundation.prototype.destroy = function destroy() {
    var _this3 = this;

    if (this.supportsPressRipple_()) {
      if (this.activationTimer_) {
        clearTimeout(this.activationTimer_);
        this.activationTimer_ = 0;
        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
      }

      if (this.fgDeactivationRemovalTimer_) {
        clearTimeout(this.fgDeactivationRemovalTimer_);
        this.fgDeactivationRemovalTimer_ = 0;
        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
      }

      var _MDCRippleFoundation$2 = MDCRippleFoundation.cssClasses,
          ROOT = _MDCRippleFoundation$2.ROOT,
          UNBOUNDED = _MDCRippleFoundation$2.UNBOUNDED;

      requestAnimationFrame(function () {
        _this3.adapter_.removeClass(ROOT);
        _this3.adapter_.removeClass(UNBOUNDED);
        _this3.removeCssVars_();
      });
    }

    this.deregisterRootHandlers_();
    this.deregisterDeactivationHandlers_();
  };

  /**
   * @param {boolean} supportsPressRipple Passed from init to save a redundant function call
   * @private
   */


  MDCRippleFoundation.prototype.registerRootHandlers_ = function registerRootHandlers_(supportsPressRipple) {
    var _this4 = this;

    if (supportsPressRipple) {
      ACTIVATION_EVENT_TYPES.forEach(function (type) {
        _this4.adapter_.registerInteractionHandler(type, _this4.activateHandler_);
      });
      if (this.adapter_.isUnbounded()) {
        this.adapter_.registerResizeHandler(this.resizeHandler_);
      }
    }

    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
  };

  /**
   * @param {!Event} e
   * @private
   */


  MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function registerDeactivationHandlers_(e) {
    var _this5 = this;

    if (e.type === 'keydown') {
      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
    } else {
      POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {
        _this5.adapter_.registerDocumentInteractionHandler(type, _this5.deactivateHandler_);
      });
    }
  };

  /** @private */


  MDCRippleFoundation.prototype.deregisterRootHandlers_ = function deregisterRootHandlers_() {
    var _this6 = this;

    ACTIVATION_EVENT_TYPES.forEach(function (type) {
      _this6.adapter_.deregisterInteractionHandler(type, _this6.activateHandler_);
    });
    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);

    if (this.adapter_.isUnbounded()) {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }
  };

  /** @private */


  MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function deregisterDeactivationHandlers_() {
    var _this7 = this;

    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
    POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {
      _this7.adapter_.deregisterDocumentInteractionHandler(type, _this7.deactivateHandler_);
    });
  };

  /** @private */


  MDCRippleFoundation.prototype.removeCssVars_ = function removeCssVars_() {
    var _this8 = this;

    var strings = MDCRippleFoundation.strings;

    Object.keys(strings).forEach(function (k) {
      if (k.indexOf('VAR_') === 0) {
        _this8.adapter_.updateCssVariable(strings[k], null);
      }
    });
  };

  /**
   * @param {?Event} e
   * @private
   */


  MDCRippleFoundation.prototype.activate_ = function activate_(e) {
    var _this9 = this;

    if (this.adapter_.isSurfaceDisabled()) {
      return;
    }

    var activationState = this.activationState_;
    if (activationState.isActivated) {
      return;
    }

    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
    var previousActivationEvent = this.previousActivationEvent_;
    var isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;
    if (isSameInteraction) {
      return;
    }

    activationState.isActivated = true;
    activationState.isProgrammatic = e === null;
    activationState.activationEvent = e;
    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown';

    var hasActivatedChild = e && activatedTargets.length > 0 && activatedTargets.some(function (target) {
      return _this9.adapter_.containsEventTarget(target);
    });
    if (hasActivatedChild) {
      // Immediately reset activation state, while preserving logic that prevents touch follow-on events
      this.resetActivationState_();
      return;
    }

    if (e) {
      activatedTargets.push( /** @type {!EventTarget} */e.target);
      this.registerDeactivationHandlers_(e);
    }

    activationState.wasElementMadeActive = this.checkElementMadeActive_(e);
    if (activationState.wasElementMadeActive) {
      this.animateActivation_();
    }

    requestAnimationFrame(function () {
      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
      activatedTargets = [];

      if (!activationState.wasElementMadeActive && (e.key === ' ' || e.keyCode === 32)) {
        // If space was pressed, try again within an rAF call to detect :active, because different UAs report
        // active states inconsistently when they're called within event handling code:
        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
        // variable is set within a rAF callback for a submit button interaction (#2241).
        activationState.wasElementMadeActive = _this9.checkElementMadeActive_(e);
        if (activationState.wasElementMadeActive) {
          _this9.animateActivation_();
        }
      }

      if (!activationState.wasElementMadeActive) {
        // Reset activation state immediately if element was not made active.
        _this9.activationState_ = _this9.defaultActivationState_();
      }
    });
  };

  /**
   * @param {?Event} e
   * @private
   */


  MDCRippleFoundation.prototype.checkElementMadeActive_ = function checkElementMadeActive_(e) {
    return e && e.type === 'keydown' ? this.adapter_.isSurfaceActive() : true;
  };

  /**
   * @param {?Event=} event Optional event containing position information.
   */


  MDCRippleFoundation.prototype.activate = function activate() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.activate_(event);
  };

  /** @private */


  MDCRippleFoundation.prototype.animateActivation_ = function animateActivation_() {
    var _this10 = this;

    var _MDCRippleFoundation$3 = MDCRippleFoundation.strings,
        VAR_FG_TRANSLATE_START = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_START,
        VAR_FG_TRANSLATE_END = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_END;
    var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses,
        FG_DEACTIVATION = _MDCRippleFoundation$4.FG_DEACTIVATION,
        FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;
    var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;


    this.layoutInternal_();

    var translateStart = '';
    var translateEnd = '';

    if (!this.adapter_.isUnbounded()) {
      var _getFgTranslationCoor = this.getFgTranslationCoordinates_(),
          startPoint = _getFgTranslationCoor.startPoint,
          endPoint = _getFgTranslationCoor.endPoint;

      translateStart = startPoint.x + 'px, ' + startPoint.y + 'px';
      translateEnd = endPoint.x + 'px, ' + endPoint.y + 'px';
    }

    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
    // Cancel any ongoing activation/deactivation animations
    clearTimeout(this.activationTimer_);
    clearTimeout(this.fgDeactivationRemovalTimer_);
    this.rmBoundedActivationClasses_();
    this.adapter_.removeClass(FG_DEACTIVATION);

    // Force layout in order to re-trigger the animation.
    this.adapter_.computeBoundingRect();
    this.adapter_.addClass(FG_ACTIVATION);
    this.activationTimer_ = setTimeout(function () {
      return _this10.activationTimerCallback_();
    }, DEACTIVATION_TIMEOUT_MS);
  };

  /**
   * @private
   * @return {{startPoint: PointType, endPoint: PointType}}
   */


  MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function getFgTranslationCoordinates_() {
    var _activationState_ = this.activationState_,
        activationEvent = _activationState_.activationEvent,
        wasActivatedByPointer = _activationState_.wasActivatedByPointer;


    var startPoint = void 0;
    if (wasActivatedByPointer) {
      startPoint = getNormalizedEventCoords(
      /** @type {!Event} */activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
    } else {
      startPoint = {
        x: this.frame_.width / 2,
        y: this.frame_.height / 2
      };
    }
    // Center the element around the start point.
    startPoint = {
      x: startPoint.x - this.initialSize_ / 2,
      y: startPoint.y - this.initialSize_ / 2
    };

    var endPoint = {
      x: this.frame_.width / 2 - this.initialSize_ / 2,
      y: this.frame_.height / 2 - this.initialSize_ / 2
    };

    return { startPoint: startPoint, endPoint: endPoint };
  };

  /** @private */


  MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function runDeactivationUXLogicIfReady_() {
    var _this11 = this;

    // This method is called both when a pointing device is released, and when the activation animation ends.
    // The deactivation animation should only run after both of those occur.
    var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
    var _activationState_2 = this.activationState_,
        hasDeactivationUXRun = _activationState_2.hasDeactivationUXRun,
        isActivated = _activationState_2.isActivated;

    var activationHasEnded = hasDeactivationUXRun || !isActivated;

    if (activationHasEnded && this.activationAnimationHasEnded_) {
      this.rmBoundedActivationClasses_();
      this.adapter_.addClass(FG_DEACTIVATION);
      this.fgDeactivationRemovalTimer_ = setTimeout(function () {
        _this11.adapter_.removeClass(FG_DEACTIVATION);
      }, numbers.FG_DEACTIVATION_MS);
    }
  };

  /** @private */


  MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function rmBoundedActivationClasses_() {
    var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;

    this.adapter_.removeClass(FG_ACTIVATION);
    this.activationAnimationHasEnded_ = false;
    this.adapter_.computeBoundingRect();
  };

  MDCRippleFoundation.prototype.resetActivationState_ = function resetActivationState_() {
    var _this12 = this;

    this.previousActivationEvent_ = this.activationState_.activationEvent;
    this.activationState_ = this.defaultActivationState_();
    // Touch devices may fire additional events for the same interaction within a short time.
    // Store the previous event until it's safe to assume that subsequent events are for new interactions.
    setTimeout(function () {
      return _this12.previousActivationEvent_ = null;
    }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
  };

  /**
   * @param {?Event} e
   * @private
   */


  MDCRippleFoundation.prototype.deactivate_ = function deactivate_(e) {
    var _this13 = this;

    var activationState = this.activationState_;
    // This can happen in scenarios such as when you have a keyup event that blurs the element.
    if (!activationState.isActivated) {
      return;
    }

    var state = /** @type {!ActivationStateType} */_extends({}, activationState);

    if (activationState.isProgrammatic) {
      var evtObject = null;
      requestAnimationFrame(function () {
        return _this13.animateDeactivation_(evtObject, state);
      });
      this.resetActivationState_();
    } else {
      this.deregisterDeactivationHandlers_();
      requestAnimationFrame(function () {
        _this13.activationState_.hasDeactivationUXRun = true;
        _this13.animateDeactivation_(e, state);
        _this13.resetActivationState_();
      });
    }
  };

  /**
   * @param {?Event=} event Optional event containing position information.
   */


  MDCRippleFoundation.prototype.deactivate = function deactivate() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    this.deactivate_(event);
  };

  /**
   * @param {Event} e
   * @param {!ActivationStateType} options
   * @private
   */


  MDCRippleFoundation.prototype.animateDeactivation_ = function animateDeactivation_(e, _ref) {
    var wasActivatedByPointer = _ref.wasActivatedByPointer,
        wasElementMadeActive = _ref.wasElementMadeActive;

    if (wasActivatedByPointer || wasElementMadeActive) {
      this.runDeactivationUXLogicIfReady_();
    }
  };

  MDCRippleFoundation.prototype.layout = function layout() {
    var _this14 = this;

    if (this.layoutFrame_) {
      cancelAnimationFrame(this.layoutFrame_);
    }
    this.layoutFrame_ = requestAnimationFrame(function () {
      _this14.layoutInternal_();
      _this14.layoutFrame_ = 0;
    });
  };

  /** @private */


  MDCRippleFoundation.prototype.layoutInternal_ = function layoutInternal_() {
    var _this15 = this;

    this.frame_ = this.adapter_.computeBoundingRect();
    var maxDim = Math.max(this.frame_.height, this.frame_.width);

    // Surface diameter is treated differently for unbounded vs. bounded ripples.
    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
    // `overflow: hidden`.
    var getBoundedRadius = function getBoundedRadius() {
      var hypotenuse = Math.sqrt(Math.pow(_this15.frame_.width, 2) + Math.pow(_this15.frame_.height, 2));
      return hypotenuse + MDCRippleFoundation.numbers.PADDING;
    };

    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();

    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
    this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;
    this.fgScale_ = this.maxRadius_ / this.initialSize_;

    this.updateLayoutCssVars_();
  };

  /** @private */


  MDCRippleFoundation.prototype.updateLayoutCssVars_ = function updateLayoutCssVars_() {
    var _MDCRippleFoundation$5 = MDCRippleFoundation.strings,
        VAR_FG_SIZE = _MDCRippleFoundation$5.VAR_FG_SIZE,
        VAR_LEFT = _MDCRippleFoundation$5.VAR_LEFT,
        VAR_TOP = _MDCRippleFoundation$5.VAR_TOP,
        VAR_FG_SCALE = _MDCRippleFoundation$5.VAR_FG_SCALE;


    this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + 'px');
    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

    if (this.adapter_.isUnbounded()) {
      this.unboundedCoords_ = {
        left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),
        top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)
      };

      this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + 'px');
      this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + 'px');
    }
  };

  /** @param {boolean} unbounded */


  MDCRippleFoundation.prototype.setUnbounded = function setUnbounded(unbounded) {
    var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;

    if (unbounded) {
      this.adapter_.addClass(UNBOUNDED);
    } else {
      this.adapter_.removeClass(UNBOUNDED);
    }
  };

  MDCRippleFoundation.prototype.handleFocus = function handleFocus() {
    var _this16 = this;

    requestAnimationFrame(function () {
      return _this16.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
    });
  };

  MDCRippleFoundation.prototype.handleBlur = function handleBlur() {
    var _this17 = this;

    requestAnimationFrame(function () {
      return _this17.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
    });
  };

  return MDCRippleFoundation;
}(foundation["a" /* default */]);

/* harmony default export */ var ripple_foundation = (foundation_MDCRippleFoundation);
// CONCATENATED MODULE: ../node_modules/@material/ripple/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCRipple", function() { return ripple_MDCRipple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleCapableSurface", function() { return RippleCapableSurface; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MDCRippleFoundation", function() { return ripple_foundation; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "util", function() { return util_namespaceObject; });
var ripple__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function ripple__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ripple__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function ripple__inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */






/**
 * @extends MDCComponent<!MDCRippleFoundation>
 */

var ripple_MDCRipple = function (_MDCComponent) {
  ripple__inherits(MDCRipple, _MDCComponent);

  /** @param {...?} args */
  function MDCRipple() {
    ripple__classCallCheck(this, MDCRipple);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @type {boolean} */
    var _this = ripple__possibleConstructorReturn(this, _MDCComponent.call.apply(_MDCComponent, [this].concat(args)));

    _this.disabled = false;

    /** @private {boolean} */
    _this.unbounded_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @param {{isUnbounded: (boolean|undefined)}=} options
   * @return {!MDCRipple}
   */


  MDCRipple.attachTo = function attachTo(root) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$isUnbounded = _ref.isUnbounded,
        isUnbounded = _ref$isUnbounded === undefined ? undefined : _ref$isUnbounded;

    var ripple = new MDCRipple(root);
    // Only override unbounded behavior if option is explicitly specified
    if (isUnbounded !== undefined) {
      ripple.unbounded = /** @type {boolean} */isUnbounded;
    }
    return ripple;
  };

  /**
   * @param {!RippleCapableSurface} instance
   * @return {!MDCRippleAdapter}
   */


  MDCRipple.createAdapter = function createAdapter(instance) {
    var MATCHES = getMatchesProperty(HTMLElement.prototype);

    return {
      browserSupportsCssVars: function browserSupportsCssVars() {
        return supportsCssVariables(window);
      },
      isUnbounded: function isUnbounded() {
        return instance.unbounded;
      },
      isSurfaceActive: function isSurfaceActive() {
        return instance.root_[MATCHES](':active');
      },
      isSurfaceDisabled: function isSurfaceDisabled() {
        return instance.disabled;
      },
      addClass: function addClass(className) {
        return instance.root_.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return instance.root_.classList.remove(className);
      },
      containsEventTarget: function containsEventTarget(target) {
        return instance.root_.contains(target);
      },
      registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
        return instance.root_.addEventListener(evtType, handler, applyPassive());
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
        return instance.root_.removeEventListener(evtType, handler, applyPassive());
      },
      registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
        return document.documentElement.addEventListener(evtType, handler, applyPassive());
      },
      deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
        return document.documentElement.removeEventListener(evtType, handler, applyPassive());
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      updateCssVariable: function updateCssVariable(varName, value) {
        return instance.root_.style.setProperty(varName, value);
      },
      computeBoundingRect: function computeBoundingRect() {
        return instance.root_.getBoundingClientRect();
      },
      getWindowPageOffset: function getWindowPageOffset() {
        return { x: window.pageXOffset, y: window.pageYOffset };
      }
    };
  };

  /** @return {boolean} */


  /**
   * Closure Compiler throws an access control error when directly accessing a
   * protected or private property inside a getter/setter, like unbounded above.
   * By accessing the protected property inside a method, we solve that problem.
   * That's why this function exists.
   * @private
   */
  MDCRipple.prototype.setUnbounded_ = function setUnbounded_() {
    this.foundation_.setUnbounded(this.unbounded_);
  };

  MDCRipple.prototype.activate = function activate() {
    this.foundation_.activate();
  };

  MDCRipple.prototype.deactivate = function deactivate() {
    this.foundation_.deactivate();
  };

  MDCRipple.prototype.layout = function layout() {
    this.foundation_.layout();
  };

  /**
   * @return {!MDCRippleFoundation}
   * @override
   */


  MDCRipple.prototype.getDefaultFoundation = function getDefaultFoundation() {
    return new ripple_foundation(MDCRipple.createAdapter(this));
  };

  /** @override */


  MDCRipple.prototype.initialSyncWithDOM = function initialSyncWithDOM() {
    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;
  };

  ripple__createClass(MDCRipple, [{
    key: 'unbounded',
    get: function get() {
      return this.unbounded_;
    }

    /** @param {boolean} unbounded */
    ,
    set: function set(unbounded) {
      this.unbounded_ = Boolean(unbounded);
      this.setUnbounded_();
    }
  }]);

  return MDCRipple;
}(component["a" /* default */]);

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */


var RippleCapableSurface = function RippleCapableSurface() {
  ripple__classCallCheck(this, RippleCapableSurface);
};

/** @protected {!Element} */


RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;



/***/ }),

/***/ "xxi1":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"main":"main__3MSlA","errorMessage":"errorMessage__3X7Px"};

/***/ }),

/***/ "yH7v":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"tabs":"tabs__wy0k6","tab":"tab__3c40k","line":"line__290FP","attending":"attending__1Vw7x","attending_item":"attending_item__Av8wp","attending_title":"attending_title__1uepx","attending_content":"attending_content__11-BM","attending_list":"attending_list__FmHPF","hero":"hero__1oekB","belt":"belt___Pqzu","footer":"footer__H5vsT"};

/***/ }),

/***/ "ySUw":
/***/ (function(module, exports, __webpack_require__) {

var tabbable = __webpack_require__("TO+D");

var listeningFocusTrap = null;

function focusTrap(element, userOptions) {
  var tabbableNodes = [];
  var firstTabbableNode = null;
  var lastTabbableNode = null;
  var nodeFocusedBeforeActivation = null;
  var active = false;
  var paused = false;
  var tabEvent = null;

  var container = typeof element === 'string' ? document.querySelector(element) : element;

  var config = userOptions || {};
  config.returnFocusOnDeactivate = userOptions && userOptions.returnFocusOnDeactivate !== undefined ? userOptions.returnFocusOnDeactivate : true;
  config.escapeDeactivates = userOptions && userOptions.escapeDeactivates !== undefined ? userOptions.escapeDeactivates : true;

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause
  };

  return trap;

  function activate(activateOptions) {
    if (active) return;

    var defaultedActivateOptions = {
      onActivate: activateOptions && activateOptions.onActivate !== undefined ? activateOptions.onActivate : config.onActivate
    };

    active = true;
    paused = false;
    nodeFocusedBeforeActivation = document.activeElement;

    if (defaultedActivateOptions.onActivate) {
      defaultedActivateOptions.onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!active) return;

    var defaultedDeactivateOptions = {
      returnFocus: deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate,
      onDeactivate: deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate
    };

    removeListeners();

    if (defaultedDeactivateOptions.onDeactivate) {
      defaultedDeactivateOptions.onDeactivate();
    }

    if (defaultedDeactivateOptions.returnFocus) {
      setTimeout(function () {
        tryFocus(nodeFocusedBeforeActivation);
      }, 0);
    }

    active = false;
    paused = false;
    return this;
  }

  function pause() {
    if (paused || !active) return;
    paused = true;
    removeListeners();
  }

  function unpause() {
    if (!paused || !active) return;
    paused = false;
    addListeners();
  }

  function addListeners() {
    if (!active) return;

    // There can be only one listening focus trap at a time
    if (listeningFocusTrap) {
      listeningFocusTrap.pause();
    }
    listeningFocusTrap = trap;

    updateTabbableNodes();
    // Ensure that the focused element doesn't capture the event that caused the focus trap activation
    setTimeout(function () {
      tryFocus(firstFocusNode());
    }, 0);
    document.addEventListener('focus', checkFocus, true);
    document.addEventListener('click', checkClick, true);
    document.addEventListener('mousedown', checkPointerDown, true);
    document.addEventListener('touchstart', checkPointerDown, true);
    document.addEventListener('keydown', checkKey, true);

    return trap;
  }

  function removeListeners() {
    if (!active || listeningFocusTrap !== trap) return;

    document.removeEventListener('focus', checkFocus, true);
    document.removeEventListener('click', checkClick, true);
    document.removeEventListener('mousedown', checkPointerDown, true);
    document.removeEventListener('touchstart', checkPointerDown, true);
    document.removeEventListener('keydown', checkKey, true);

    listeningFocusTrap = null;

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = document.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function firstFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(document.activeElement)) {
      node = document.activeElement;
    } else {
      node = tabbableNodes[0] || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error('You can\'t have a focus-trap without at least one focusable element');
    }

    return node;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event
  function checkPointerDown(e) {
    if (config.clickOutsideDeactivates && !container.contains(e.target)) {
      deactivate({ returnFocus: false });
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function checkFocus(e) {
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
    // Checking for a blur method here resolves a Firefox issue (#15)
    if (typeof e.target.blur === 'function') e.target.blur();

    if (tabEvent) {
      readjustFocus(tabEvent);
    }
  }

  function checkKey(e) {
    if (e.key === 'Tab' || e.keyCode === 9) {
      handleTab(e);
    }

    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      deactivate();
    }
  }

  function handleTab(e) {
    updateTabbableNodes();

    if (e.target.hasAttribute('tabindex') && Number(e.target.getAttribute('tabindex')) < 0) {
      return tabEvent = e;
    }

    e.preventDefault();
    var currentFocusIndex = tabbableNodes.indexOf(e.target);

    if (e.shiftKey) {
      if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
        return tryFocus(lastTabbableNode);
      }
      return tryFocus(tabbableNodes[currentFocusIndex - 1]);
    }

    if (e.target === lastTabbableNode) return tryFocus(firstTabbableNode);

    tryFocus(tabbableNodes[currentFocusIndex + 1]);
  }

  function updateTabbableNodes() {
    tabbableNodes = tabbable(container);
    firstTabbableNode = tabbableNodes[0];
    lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
  }

  function readjustFocus(e) {
    if (e.shiftKey) return tryFocus(lastTabbableNode);

    tryFocus(firstTabbableNode);
  }
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function tryFocus(node) {
  if (!node || !node.focus) return;
  if (node === document.activeElement) return;

  node.focus();
  if (node.tagName.toLowerCase() === 'input') {
    node.select();
  }
}

module.exports = focusTrap;

/***/ }),

/***/ "ynRT":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _interopRequireDefault = __webpack_require__("SpGf");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Drawer = exports.DrawerItem = exports.DrawerContent = exports.DrawerHeader = void 0;

var _get2 = _interopRequireDefault(__webpack_require__("J5U+"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__("0fcM"));

var _createClass2 = _interopRequireDefault(__webpack_require__("P8NW"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__("0421"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__("UJE0"));

var _inherits2 = _interopRequireDefault(__webpack_require__("d4H2"));

var _typeof2 = _interopRequireDefault(__webpack_require__("b9XL"));

var _drawer = __webpack_require__("EyEO");

var _bindDecorator = __webpack_require__("gKs0");

var _preact = __webpack_require__("KM04");

var _MaterialComponent4 = _interopRequireDefault(__webpack_require__("uc5p"));

var _List = __webpack_require__("E7XR");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var DrawerHeader =
/*#__PURE__*/
function (_MaterialComponent) {
  (0, _inherits2.default)(DrawerHeader, _MaterialComponent);

  function DrawerHeader() {
    var _this;

    (0, _classCallCheck2.default)(this, DrawerHeader);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerHeader).apply(this, arguments));
    _this.componentName = 'drawer__header';
    _this.mdcProps = [];
    return _this;
  }

  (0, _createClass2.default)(DrawerHeader, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("header", _extends({
        ref: this.setControlRef
      }, props), (0, _preact.h)("div", {
        className: "mdc-drawer__header-content"
      }, props.children));
    }
  }]);
  return DrawerHeader;
}(_MaterialComponent4.default);

exports.DrawerHeader = DrawerHeader;

var DrawerContent =
/*#__PURE__*/
function (_MaterialComponent2) {
  (0, _inherits2.default)(DrawerContent, _MaterialComponent2);

  function DrawerContent() {
    var _this2;

    (0, _classCallCheck2.default)(this, DrawerContent);
    _this2 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerContent).apply(this, arguments));
    _this2.componentName = 'drawer__content';
    _this2.mdcProps = [];
    return _this2;
  }

  (0, _createClass2.default)(DrawerContent, [{
    key: "materialDom",
    value: function materialDom(props) {
      return (0, _preact.h)("div", {
        class: "mdc-drawer__content"
      }, (0, _preact.h)("nav", _extends({
        className: "mdc-list",
        ref: this.setControlRef
      }, props), props.children));
    }
  }]);
  return DrawerContent;
}(_MaterialComponent4.default);

exports.DrawerContent = DrawerContent;

var DrawerItem =
/*#__PURE__*/
function (_ListLinkItem) {
  (0, _inherits2.default)(DrawerItem, _ListLinkItem);

  function DrawerItem() {
    (0, _classCallCheck2.default)(this, DrawerItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerItem).apply(this, arguments));
  }

  (0, _createClass2.default)(DrawerItem, [{
    key: "materialDom",
    value: function materialDom(props) {
      var returnedNode = (0, _get2.default)((0, _getPrototypeOf2.default)(DrawerItem.prototype), "materialDom", this).call(this, props);
      /* Logic to add selected class */

      if (props.selected) {
        returnedNode.attributes.className = 'mdc-list-item--activated';
      }

      return returnedNode;
    }
  }]);
  return DrawerItem;
}(_List.ListLinkItem);

exports.DrawerItem = DrawerItem;

var Drawer =
/*#__PURE__*/
function (_MaterialComponent3) {
  (0, _inherits2.default)(Drawer, _MaterialComponent3);

  function Drawer() {
    var _this3;

    (0, _classCallCheck2.default)(this, Drawer);
    _this3 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Drawer).apply(this, arguments));
    _this3.componentName = 'drawer-container';
    _this3.mdcProps = [];
    _this3.mdcNotifyProps = ['open'];
    return _this3;
  }

  (0, _createClass2.default)(Drawer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Drawer.prototype), "componentDidMount", this).call(this);

      if (this.control && (this.props.modal || this.props.dismissible)) {
        this.MDComponent = new _drawer.MDCDrawer(this.control);
        this.MDComponent.listen('MDCDrawer:opened', this.onOpen);
        this.MDComponent.listen('MDCDrawer:closed', this.onClose);
      }
    }
  }, {
    key: "onOpen",
    value: function onOpen(e) {
      if (this.props.onOpen) {
        this.props.onOpen(e);
      }
    }
  }, {
    key: "onClose",
    value: function onClose(e) {
      if (this.props.onClose) {
        this.props.onClose(e);
      }
    }
  }, {
    key: "materialDom",
    value: function materialDom(props) {
      var classes = ['mdc-drawer']; // cant use mdcProps cuz classes need to be on the inner child and not on root level

      if (props.modal) {
        classes.push('mdc-drawer--modal');
      } else if (props.dismissible) {
        classes.push('mdc-drawer--dismissible');
      }

      return (0, _preact.h)("div", null, (0, _preact.h)("aside", _extends({
        class: classes.join(' '),
        ref: this.setControlRef
      }, props), props.children), props.modal && (0, _preact.h)("div", {
        class: "mdc-drawer-scrim"
      }));
    }
  }]);
  return Drawer;
}(_MaterialComponent4.default);

exports.Drawer = Drawer;
Drawer.DrawerContent = DrawerContent;
Drawer.DrawerHeader = DrawerHeader;
Drawer.DrawerItem = DrawerItem;

__decorate([_bindDecorator.bind], Drawer.prototype, "onOpen", null);

__decorate([_bindDecorator.bind], Drawer.prototype, "onClose", null);

var default_1 =
/*#__PURE__*/
function (_Drawer) {
  (0, _inherits2.default)(default_1, _Drawer);

  function default_1() {
    (0, _classCallCheck2.default)(this, default_1);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(default_1).apply(this, arguments));
  }

  return default_1;
}(Drawer);

exports.default = default_1;
default_1.DrawerContent = DrawerContent;
default_1.DrawerHeader = DrawerHeader;
default_1.DrawerItem = DrawerItem;
//# sourceMappingURL=index.js.map

/***/ })

/******/ });
//# sourceMappingURL=ssr-bundle.js.map